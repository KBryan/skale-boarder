{"id":"f676cc7ecf7d24dc295df6fd01420ba0","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/interfaces/IGnosisSafe.sol":{"content":"pragma solidity ^0.8.19;\n\ncontract Enum {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n}\n\ninterface GnosisSafe {\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation\n    ) external returns (bool success);\n\n    function addOwnerWithThreshold(address owner, uint256 threshold) external;\n    function removeOwner(address prevOwner, address owner, uint256 threshold) external;\n\n    function getThreshold() external view returns (uint256);\n\n    function getOwners() external view returns (address[] memory);\n\n    function isOwner(address owner) external view returns (bool);\n\n    function enableModule(address module) external;\n}\n"},"contracts/TokenAuthenticated.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\n// import \"hardhat/console.sol\";\n\n/**\n * @title TokenAuthenticated\n * @dev allow a user to authenticate with a signed english token.\n */\ncontract TokenAuthenticated {\n    string public STATEMENT;\n\n    uint256 public lengthOfToken = 15;\n       \n    struct TokenRequest {\n        address owner;\n        address device;\n        uint256 issuedAt;\n    }\n\n    constructor(string memory _statement) {\n        STATEMENT = _statement;\n    }\n\n    function _updateStatement(string memory newStatement) internal {\n        STATEMENT = newStatement;\n    }\n\n    function _updateLengthOfToken(uint256 newLength) internal {\n        lengthOfToken = newLength;\n    }\n\n    function authenticate(\n        TokenRequest calldata request,\n        bytes calldata signature\n    ) internal view returns (bool) {\n        bytes32 msgHash = hashForToken(request);\n        address signer = ECDSA.recover(msgHash, signature);\n        require(signer == request.owner, \"invalid signature\");\n        require(\n            request.issuedAt >= block.number - lengthOfToken,\n            \"Request is too old\"\n        );\n        return true;\n    }\n\n    function createTokenRequest(\n        address owner,\n        address device\n    ) public view returns (TokenRequest memory request, string memory) {\n        request = TokenRequest({\n            owner: owner,\n            device: device,\n            issuedAt: block.number - 1\n        });\n        return (request, stringToSign(request));\n    }\n\n\n    /**\n     * @dev Returns the string to sign of the provided WalletCreateRequest.\n     * @param request The WalletCreateRequest struct containing the owner address, device address, and issuedAt block number.\n     */\n    function stringToSign(\n        TokenRequest memory request\n    ) internal view returns (string memory) {\n        return string(abi.encodePacked(\n            STATEMENT,\n            \"\\n\\nMe: \",\n            Strings.toHexString(request.owner),\n            \"\\nDevice: \",\n            Strings.toHexString(request.device),\n            \"\\nIssued at: \",\n            Strings.toString(request.issuedAt)\n        ));\n    }\n\n    function hashForToken(\n        TokenRequest calldata request\n    ) internal view returns (bytes32) {\n        return ECDSA.toEthSignedMessageHash(bytes(stringToSign(request)));\n    }\n}"},"contracts/WalletDeployer.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport \"./TokenAuthenticated.sol\";\nimport \"./interfaces/IGnosisSafe.sol\";\n\n// import \"hardhat/console.sol\";\n\ninterface IProxyFactory {\n    function createProxyWithNonce(\n        address _mastercopy,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) external returns (address proxy);\n}\n\ninterface IEnglishOwnerAdder {\n    function addOwner(\n        address safe,\n        TokenAuthenticated.TokenRequest calldata request,\n        bytes calldata signature\n    ) external;\n}\n\n/**\n * @title WalletDeployer\n * @dev A contract that allows a user to create a Gnosis Safe wallet by signing an English message.\n *      It sets up a a safe by calling the SafeStetup.sol contract which adds the correct modules and the TokenRequest\n *      device and owner as owners to the safe.\n */\ncontract WalletDeployer is TokenAuthenticated {\n    string public CHAIN_ID;\n\n    address private immutable _gnosisSafeContract;\n    address private immutable _gnosisSafeProxyFactory;\n    address private immutable _defaultFallackhandler;\n\n    address private immutable _setupHandler;\n\n    bytes4 private constant SETUP_DATA = bytes4(keccak256(\"setup()\"));\n\n    // a mapping of owner to safe address\n    mapping(address => address) public ownerToSafe;\n    mapping(address => address) public safeToOwner;\n\n    constructor(\n        address gnosisSafeContract,\n        address gnosisSafeProxyFactory,\n        address defaultFallbackHandler,\n        address setupHandler\n    )\n        TokenAuthenticated(\n            \"I authorize this device to send transactions on my behalf.\"\n        )\n    {\n        CHAIN_ID = Strings.toString(block.chainid);\n        _gnosisSafeContract = gnosisSafeContract;\n        _gnosisSafeProxyFactory = gnosisSafeProxyFactory;\n        _defaultFallackhandler = defaultFallbackHandler;\n        _setupHandler = setupHandler;\n    }\n\n    // async walletAddressForUser(user:Address):Promise<Address> {\n    //     const setupData = await setupDataForUser(user)\n\n    //     const salt = utils.keccak256(utils.solidityPack(['bytes', 'uint256'], [utils.keccak256(setupData), this.chainId]))\n    //     const initCode = utils.solidityKeccak256(['bytes', 'bytes'], [await this.proxyFactory.proxyCreationCode(), utils.defaultAbiCoder.encode(['address'], [MASTER_COPY_ADDR])])\n\n    //     const addr = utils.getCreate2Address(this.proxyFactory.address, salt, initCode)\n    //     return addr.toLowerCase()\n    //   }\n\n    /**\n     * @dev Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.\n     * @param request The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.\n     * @param signature The signature signed by the owner to verify ownership.\n     */\n    function createSafe(\n        TokenRequest calldata request,\n        bytes calldata signature,\n        address englishOwnerAdder\n    ) public {\n        require(\n            ownerToSafe[request.owner] == address(0),\n            \"Safe already exists for owner\"\n        );\n        require(authenticate(request, signature));\n\n        // // not sure exactly why, but it's important that this array is a memory address[] so that the initializer is encoded properly\n        // address[] memory owners;\n        // if (request.device == address(0)) {\n        //     owners = new address[](1);\n        //     owners[0] = request.owner;\n        // } else {\n        //     owners = new address[](2);\n        //     owners[0] = request.owner;\n        //     owners[1] = request.device;\n        // }\n\n        address[] memory owners = new address[](1);\n        owners[0] = request.owner;\n\n        bytes memory initializer = abi.encodeWithSignature(\n            \"setup(address[],uint256,address,bytes,address,address,uint256,address)\",\n            owners, // set the owner and first device addresses\n            uint256(1), // set the number of required confirmations (threshhold) to 1\n            _setupHandler, // setupModules address\n            abi.encodeWithSignature(\"setup()\"), // setupModules data\n            _defaultFallackhandler, // set the default fallback handler\n            address(0), // set the payment token address\n            address(0), // set the payment token address\n            uint256(0), // set the payment amount to 0\n            address(0) // set the payment fee receiver address\n        );\n\n        address proxyAddr = IProxyFactory(_gnosisSafeProxyFactory)\n            .createProxyWithNonce(\n                _gnosisSafeContract,\n                initializer,\n                block.chainid\n            );\n\n        if (request.device != address(0)) {\n            IEnglishOwnerAdder(englishOwnerAdder).addOwner(\n                proxyAddr,\n                request,\n                signature\n            );\n        }\n\n        ownerToSafe[request.owner] = proxyAddr;\n        safeToOwner[proxyAddr] = request.owner;\n    }\n}\n\n// async walletAddressForUser(user:Address):Promise<Address> {\n//     const setupData = await setupDataForUser(user)\n\n//     const salt = utils.keccak256(utils.solidityPack(['bytes', 'uint256'], [utils.keccak256(setupData), this.chainId]))\n//     const initCode = utils.solidityKeccak256(['bytes', 'bytes'], [await this.proxyFactory.proxyCreationCode(), utils.defaultAbiCoder.encode(['address'], [MASTER_COPY_ADDR])])\n\n//     const addr = utils.getCreate2Address(this.proxyFactory.address, salt, initCode)\n//     return addr.toLowerCase()\n//   }\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IGnosisSafe.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IGnosisSafe.sol","start":-1},"type":"Warning"}],"sources":{"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[1400],"Strings":[174]},"id":175,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":175,"sourceUnit":1401,"src":"126:25:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"153:34:0","text":" @dev String operations."},"fullyImplemented":true,"id":174,"linearizedBaseContracts":[174],"name":"Strings","nameLocation":"196:7:0","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":6,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:0","nodeType":"VariableDeclaration","scope":174,"src":"210:54:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":4,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:0","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":5,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":9,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:0","nodeType":"VariableDeclaration","scope":174,"src":"270:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":7,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":8,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:0","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":56,"nodeType":"Block","src":"486:625:0","statements":[{"id":55,"nodeType":"UncheckedBlock","src":"496:609:0","statements":[{"assignments":[18],"declarations":[{"constant":false,"id":18,"mutability":"mutable","name":"length","nameLocation":"528:6:0","nodeType":"VariableDeclaration","scope":55,"src":"520:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":17,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":25,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":21,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"548:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":19,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"537:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1400_$","typeString":"type(library Math)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:0","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1237,"src":"537:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":22,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":23,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:0"},{"assignments":[27],"declarations":[{"constant":false,"id":27,"mutability":"mutable","name":"buffer","nameLocation":"586:6:0","nodeType":"VariableDeclaration","scope":55,"src":"572:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":26,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":32,"initialValue":{"arguments":[{"id":30,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"606:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":29,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":28,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":31,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:0"},{"assignments":[34],"declarations":[{"constant":false,"id":34,"mutability":"mutable","name":"ptr","nameLocation":"635:3:0","nodeType":"VariableDeclaration","scope":55,"src":"627:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":35,"nodeType":"VariableDeclarationStatement","src":"627:11:0"},{"AST":{"nodeType":"YulBlock","src":"708:67:0","statements":[{"nodeType":"YulAssignment","src":"726:35:0","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:0","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:0"},"nodeType":"YulFunctionCall","src":"745:15:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:0"},"nodeType":"YulFunctionCall","src":"733:28:0"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:0"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":27,"isOffset":false,"isSlot":false,"src":"737:6:0","valueSize":1},{"declaration":18,"isOffset":false,"isSlot":false,"src":"753:6:0","valueSize":1},{"declaration":34,"isOffset":false,"isSlot":false,"src":"726:3:0","valueSize":1}],"id":36,"nodeType":"InlineAssembly","src":"699:76:0"},{"body":{"id":51,"nodeType":"Block","src":"801:267:0","statements":[{"expression":{"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:0","subExpression":{"id":38,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"819:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":40,"nodeType":"ExpressionStatement","src":"819:5:0"},{"AST":{"nodeType":"YulBlock","src":"902:84:0","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:0"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:0","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:0"},"nodeType":"YulFunctionCall","src":"942:14:0"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:0"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:0"},"nodeType":"YulFunctionCall","src":"937:30:0"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:0"},"nodeType":"YulFunctionCall","src":"924:44:0"},"nodeType":"YulExpressionStatement","src":"924:44:0"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":6,"isOffset":false,"isSlot":false,"src":"958:8:0","valueSize":1},{"declaration":34,"isOffset":false,"isSlot":false,"src":"932:3:0","valueSize":1},{"declaration":12,"isOffset":false,"isSlot":false,"src":"946:5:0","valueSize":1}],"id":41,"nodeType":"InlineAssembly","src":"893:93:0"},{"expression":{"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":42,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"1003:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":43,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:0","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":45,"nodeType":"ExpressionStatement","src":"1003:11:0"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":46,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"1036:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":47,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":50,"nodeType":"IfStatement","src":"1032:21:0","trueBody":{"id":49,"nodeType":"Break","src":"1048:5:0"}}]},"condition":{"hexValue":"74727565","id":37,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":52,"nodeType":"WhileStatement","src":"788:280:0"},{"expression":{"id":53,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1088:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":16,"id":54,"nodeType":"Return","src":"1081:13:0"}]}]},"documentation":{"id":10,"nodeType":"StructuredDocumentation","src":"320:90:0","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":57,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:0","nodeType":"FunctionDefinition","parameters":{"id":13,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"mutability":"mutable","name":"value","nameLocation":"441:5:0","nodeType":"VariableDeclaration","scope":57,"src":"433:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":11,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":57,"src":"471:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":14,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:0"},"scope":174,"src":"415:696:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":76,"nodeType":"Block","src":"1290:100:0","statements":[{"id":75,"nodeType":"UncheckedBlock","src":"1300:84:0","statements":[{"expression":{"arguments":[{"id":66,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":60,"src":"1343:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":69,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":60,"src":"1362:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":67,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"1350:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1400_$","typeString":"type(library Math)"}},"id":68,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:0","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1360,"src":"1350:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":71,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":65,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[77,153,173],"referencedDeclaration":153,"src":"1331:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":73,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":64,"id":74,"nodeType":"Return","src":"1324:49:0"}]}]},"documentation":{"id":58,"nodeType":"StructuredDocumentation","src":"1117:94:0","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":77,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:0","nodeType":"FunctionDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"value","nameLocation":"1245:5:0","nodeType":"VariableDeclaration","scope":77,"src":"1237:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":59,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:0"},"returnParameters":{"id":64,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":77,"src":"1275:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":62,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:0"},"scope":174,"src":"1216:174:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":152,"nodeType":"Block","src":"1603:347:0","statements":[{"assignments":[88],"declarations":[{"constant":false,"id":88,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:0","nodeType":"VariableDeclaration","scope":152,"src":"1613:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":87,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":97,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":95,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":91,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":92,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1649:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":90,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":89,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:0"},{"expression":{"id":102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":98,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1670:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":100,"indexExpression":{"hexValue":"30","id":99,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":103,"nodeType":"ExpressionStatement","src":"1670:15:0"},{"expression":{"id":108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":104,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1695:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":106,"indexExpression":{"hexValue":"31","id":105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":109,"nodeType":"ExpressionStatement","src":"1695:15:0"},{"body":{"id":138,"nodeType":"Block","src":"1765:83:0","statements":[{"expression":{"id":132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":124,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1779:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":126,"indexExpression":{"id":125,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1786:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":127,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"1791:8:0","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":131,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":128,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1800:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:0","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":133,"nodeType":"ExpressionStatement","src":"1779:33:0"},{"expression":{"id":136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":134,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1826:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":137,"nodeType":"ExpressionStatement","src":"1826:11:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":118,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1753:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":139,"initializationExpression":{"assignments":[111],"declarations":[{"constant":false,"id":111,"mutability":"mutable","name":"i","nameLocation":"1733:1:0","nodeType":"VariableDeclaration","scope":139,"src":"1725:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":110,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":117,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":113,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"1741:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:0"},"loopExpression":{"expression":{"id":122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:0","subExpression":{"id":121,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1762:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":123,"nodeType":"ExpressionStatement","src":"1760:3:0"},"nodeType":"ForStatement","src":"1720:128:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":141,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1865:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":140,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":146,"nodeType":"ExpressionStatement","src":"1857:55:0"},{"expression":{"arguments":[{"id":149,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"1936:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":147,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:0","typeDescriptions":{}}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":86,"id":151,"nodeType":"Return","src":"1922:21:0"}]},"documentation":{"id":78,"nodeType":"StructuredDocumentation","src":"1396:112:0","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":153,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:0","nodeType":"FunctionDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80,"mutability":"mutable","name":"value","nameLocation":"1542:5:0","nodeType":"VariableDeclaration","scope":153,"src":"1534:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":79,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":82,"mutability":"mutable","name":"length","nameLocation":"1557:6:0","nodeType":"VariableDeclaration","scope":153,"src":"1549:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":81,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":153,"src":"1588:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":84,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:0"},"scope":174,"src":"1513:437:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":172,"nodeType":"Block","src":"2175:76:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":166,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"2220:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":164,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:0","typeDescriptions":{}}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":162,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:0","typeDescriptions":{}}},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":169,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"2228:15:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":161,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[77,153,173],"referencedDeclaration":153,"src":"2192:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":160,"id":171,"nodeType":"Return","src":"2185:59:0"}]},"documentation":{"id":154,"nodeType":"StructuredDocumentation","src":"1956:141:0","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":173,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:0","nodeType":"FunctionDefinition","parameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"addr","nameLocation":"2131:4:0","nodeType":"VariableDeclaration","scope":173,"src":"2123:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:0"},"returnParameters":{"id":160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":173,"src":"2160:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":158,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:0"},"scope":174,"src":"2102:149:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":175,"src":"188:2065:0","usedErrors":[]}],"src":"101:2153:0"},"id":0},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[535],"Math":[1400],"Strings":[174]},"id":536,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":176,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":177,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":536,"sourceUnit":175,"src":"137:24:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":178,"nodeType":"StructuredDocumentation","src":"163:205:1","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":535,"linearizedBaseContracts":[535],"name":"ECDSA","nameLocation":"377:5:1","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":184,"members":[{"id":179,"name":"NoError","nameLocation":"417:7:1","nodeType":"EnumValue","src":"417:7:1"},{"id":180,"name":"InvalidSignature","nameLocation":"434:16:1","nodeType":"EnumValue","src":"434:16:1"},{"id":181,"name":"InvalidSignatureLength","nameLocation":"460:22:1","nodeType":"EnumValue","src":"460:22:1"},{"id":182,"name":"InvalidSignatureS","nameLocation":"492:17:1","nodeType":"EnumValue","src":"492:17:1"},{"id":183,"name":"InvalidSignatureV","nameLocation":"519:17:1","nodeType":"EnumValue","src":"519:17:1"}],"name":"RecoverError","nameLocation":"394:12:1","nodeType":"EnumDefinition","src":"389:175:1"},{"body":{"id":227,"nodeType":"Block","src":"624:457:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"},"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":190,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"638:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":191,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"647:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$184_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:1","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":179,"src":"647:20:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":196,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"734:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":197,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"743:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$184_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:1","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":180,"src":"743:29:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":205,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"843:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":206,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"852:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$184_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":207,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:1","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":181,"src":"852:35:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":214,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"965:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":215,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"974:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$184_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:1","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":182,"src":"974:30:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":223,"nodeType":"IfStatement","src":"961:114:1","trueBody":{"id":222,"nodeType":"Block","src":"1006:69:1","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":218,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"ExpressionStatement","src":"1020:44:1"}]}},"id":224,"nodeType":"IfStatement","src":"839:236:1","trueBody":{"id":213,"nodeType":"Block","src":"889:66:1","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":209,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":212,"nodeType":"ExpressionStatement","src":"903:41:1"}]}},"id":225,"nodeType":"IfStatement","src":"730:345:1","trueBody":{"id":204,"nodeType":"Block","src":"774:59:1","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":200,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":203,"nodeType":"ExpressionStatement","src":"788:34:1"}]}},"id":226,"nodeType":"IfStatement","src":"634:441:1","trueBody":{"id":195,"nodeType":"Block","src":"669:55:1","statements":[{"functionReturnParameters":189,"id":194,"nodeType":"Return","src":"683:7:1"}]}}]},"id":228,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:1","nodeType":"FunctionDefinition","parameters":{"id":188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"error","nameLocation":"604:5:1","nodeType":"VariableDeclaration","scope":228,"src":"591:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":186,"nodeType":"UserDefinedTypeName","pathNode":{"id":185,"name":"RecoverError","nameLocations":["591:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":184,"src":"591:12:1"},"referencedDeclaration":184,"src":"591:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:1"},"returnParameters":{"id":189,"nodeType":"ParameterList","parameters":[],"src":"624:0:1"},"scope":535,"src":"570:511:1","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":273,"nodeType":"Block","src":"2249:626:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":241,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2263:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:1","memberName":"length","nodeType":"MemberAccess","src":"2263:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:1","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":271,"nodeType":"Block","src":"2788:81:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:1","typeDescriptions":{}}},"id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":267,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"2822:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$184_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:1","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":181,"src":"2822:35:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}}],"id":269,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":240,"id":270,"nodeType":"Return","src":"2802:56:1"}]},"id":272,"nodeType":"IfStatement","src":"2259:610:1","trueBody":{"id":262,"nodeType":"Block","src":"2287:495:1","statements":[{"assignments":[246],"declarations":[{"constant":false,"id":246,"mutability":"mutable","name":"r","nameLocation":"2309:1:1","nodeType":"VariableDeclaration","scope":262,"src":"2301:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":245,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":247,"nodeType":"VariableDeclarationStatement","src":"2301:9:1"},{"assignments":[249],"declarations":[{"constant":false,"id":249,"mutability":"mutable","name":"s","nameLocation":"2332:1:1","nodeType":"VariableDeclaration","scope":262,"src":"2324:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":248,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":250,"nodeType":"VariableDeclarationStatement","src":"2324:9:1"},{"assignments":[252],"declarations":[{"constant":false,"id":252,"mutability":"mutable","name":"v","nameLocation":"2353:1:1","nodeType":"VariableDeclaration","scope":262,"src":"2347:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":251,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":253,"nodeType":"VariableDeclarationStatement","src":"2347:7:1"},{"AST":{"nodeType":"YulBlock","src":"2555:171:1","statements":[{"nodeType":"YulAssignment","src":"2573:32:1","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:1"},"nodeType":"YulFunctionCall","src":"2584:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:1"},"nodeType":"YulFunctionCall","src":"2578:27:1"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:1"}]},{"nodeType":"YulAssignment","src":"2622:32:1","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:1","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:1"},"nodeType":"YulFunctionCall","src":"2633:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:1"},"nodeType":"YulFunctionCall","src":"2627:27:1"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:1"}]},{"nodeType":"YulAssignment","src":"2671:41:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:1","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:1","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:1"},"nodeType":"YulFunctionCall","src":"2690:20:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:1"},"nodeType":"YulFunctionCall","src":"2684:27:1"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:1"},"nodeType":"YulFunctionCall","src":"2676:36:1"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":246,"isOffset":false,"isSlot":false,"src":"2573:1:1","valueSize":1},{"declaration":249,"isOffset":false,"isSlot":false,"src":"2622:1:1","valueSize":1},{"declaration":233,"isOffset":false,"isSlot":false,"src":"2588:9:1","valueSize":1},{"declaration":233,"isOffset":false,"isSlot":false,"src":"2637:9:1","valueSize":1},{"declaration":233,"isOffset":false,"isSlot":false,"src":"2694:9:1","valueSize":1},{"declaration":252,"isOffset":false,"isSlot":false,"src":"2671:1:1","valueSize":1}],"id":254,"nodeType":"InlineAssembly","src":"2546:180:1"},{"expression":{"arguments":[{"id":256,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2757:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":257,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"2763:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":258,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"2766:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":259,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"2769:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":255,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[274,348,442],"referencedDeclaration":442,"src":"2746:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":240,"id":261,"nodeType":"Return","src":"2739:32:1"}]}}]},"documentation":{"id":229,"nodeType":"StructuredDocumentation","src":"1087:1053:1","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":274,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:1","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"hash","nameLocation":"2173:4:1","nodeType":"VariableDeclaration","scope":274,"src":"2165:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"signature","nameLocation":"2192:9:1","nodeType":"VariableDeclaration","scope":274,"src":"2179:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":232,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:1"},"returnParameters":{"id":240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":274,"src":"2226:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":235,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":274,"src":"2235:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":238,"nodeType":"UserDefinedTypeName","pathNode":{"id":237,"name":"RecoverError","nameLocations":["2235:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":184,"src":"2235:12:1"},"referencedDeclaration":184,"src":"2235:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:1"},"scope":535,"src":"2145:730:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":300,"nodeType":"Block","src":"3748:140:1","statements":[{"assignments":[285,288],"declarations":[{"constant":false,"id":285,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:1","nodeType":"VariableDeclaration","scope":300,"src":"3759:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":288,"mutability":"mutable","name":"error","nameLocation":"3791:5:1","nodeType":"VariableDeclaration","scope":300,"src":"3778:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":287,"nodeType":"UserDefinedTypeName","pathNode":{"id":286,"name":"RecoverError","nameLocations":["3778:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":184,"src":"3778:12:1"},"referencedDeclaration":184,"src":"3778:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":293,"initialValue":{"arguments":[{"id":290,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"3811:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":291,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"3817:9:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":289,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[274,348,442],"referencedDeclaration":274,"src":"3800:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:1"},{"expression":{"arguments":[{"id":295,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"3849:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}],"id":294,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"3837:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$184_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":297,"nodeType":"ExpressionStatement","src":"3837:18:1"},{"expression":{"id":298,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"3872:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":283,"id":299,"nodeType":"Return","src":"3865:16:1"}]},"documentation":{"id":275,"nodeType":"StructuredDocumentation","src":"2881:775:1","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":301,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:1","nodeType":"FunctionDefinition","parameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":277,"mutability":"mutable","name":"hash","nameLocation":"3686:4:1","nodeType":"VariableDeclaration","scope":301,"src":"3678:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":276,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":279,"mutability":"mutable","name":"signature","nameLocation":"3705:9:1","nodeType":"VariableDeclaration","scope":301,"src":"3692:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":278,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:1"},"returnParameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":301,"src":"3739:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":281,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:1"},"scope":535,"src":"3661:227:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":347,"nodeType":"Block","src":"4275:203:1","statements":[{"assignments":[317],"declarations":[{"constant":false,"id":317,"mutability":"mutable","name":"s","nameLocation":"4293:1:1","nodeType":"VariableDeclaration","scope":347,"src":"4285:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":316,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4285:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":324,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":318,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"4297:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4310:66:1","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4302:7:1","typeDescriptions":{}}},"id":322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4297:80:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4285:92:1"},{"assignments":[326],"declarations":[{"constant":false,"id":326,"mutability":"mutable","name":"v","nameLocation":"4393:1:1","nodeType":"VariableDeclaration","scope":347,"src":"4387:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":325,"name":"uint8","nodeType":"ElementaryTypeName","src":"4387:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":339,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":331,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"4412:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4404:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":329,"name":"uint256","nodeType":"ElementaryTypeName","src":"4404:7:1","typeDescriptions":{}}},"id":332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4404:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4419:3:1","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4404:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":335,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4403:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4426:2:1","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4403:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4397:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":327,"name":"uint8","nodeType":"ElementaryTypeName","src":"4397:5:1","typeDescriptions":{}}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4397:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4387:42:1"},{"expression":{"arguments":[{"id":341,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":304,"src":"4457:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":342,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"4463:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":343,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"4466:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":344,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"4469:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":340,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[274,348,442],"referencedDeclaration":442,"src":"4446:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4446:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":315,"id":346,"nodeType":"Return","src":"4439:32:1"}]},"documentation":{"id":302,"nodeType":"StructuredDocumentation","src":"3894:243:1","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":348,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:1","nodeType":"FunctionDefinition","parameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":304,"mutability":"mutable","name":"hash","nameLocation":"4179:4:1","nodeType":"VariableDeclaration","scope":348,"src":"4171:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4171:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":306,"mutability":"mutable","name":"r","nameLocation":"4201:1:1","nodeType":"VariableDeclaration","scope":348,"src":"4193:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":305,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":308,"mutability":"mutable","name":"vs","nameLocation":"4220:2:1","nodeType":"VariableDeclaration","scope":348,"src":"4212:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4212:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:67:1"},"returnParameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":348,"src":"4252:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":310,"name":"address","nodeType":"ElementaryTypeName","src":"4252:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":348,"src":"4261:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":313,"nodeType":"UserDefinedTypeName","pathNode":{"id":312,"name":"RecoverError","nameLocations":["4261:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":184,"src":"4261:12:1"},"referencedDeclaration":184,"src":"4261:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4251:23:1"},"scope":535,"src":"4142:336:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":377,"nodeType":"Block","src":"4759:136:1","statements":[{"assignments":[361,364],"declarations":[{"constant":false,"id":361,"mutability":"mutable","name":"recovered","nameLocation":"4778:9:1","nodeType":"VariableDeclaration","scope":377,"src":"4770:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":360,"name":"address","nodeType":"ElementaryTypeName","src":"4770:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":364,"mutability":"mutable","name":"error","nameLocation":"4802:5:1","nodeType":"VariableDeclaration","scope":377,"src":"4789:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":363,"nodeType":"UserDefinedTypeName","pathNode":{"id":362,"name":"RecoverError","nameLocations":["4789:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":184,"src":"4789:12:1"},"referencedDeclaration":184,"src":"4789:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":370,"initialValue":{"arguments":[{"id":366,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"4822:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":367,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"4828:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":368,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"4831:2:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":365,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[274,348,442],"referencedDeclaration":348,"src":"4811:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4811:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4769:65:1"},{"expression":{"arguments":[{"id":372,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"4856:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}],"id":371,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"4844:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$184_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4844:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":374,"nodeType":"ExpressionStatement","src":"4844:18:1"},{"expression":{"id":375,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":361,"src":"4879:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":359,"id":376,"nodeType":"Return","src":"4872:16:1"}]},"documentation":{"id":349,"nodeType":"StructuredDocumentation","src":"4484:154:1","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":378,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4652:7:1","nodeType":"FunctionDefinition","parameters":{"id":356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":351,"mutability":"mutable","name":"hash","nameLocation":"4677:4:1","nodeType":"VariableDeclaration","scope":378,"src":"4669:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4669:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":353,"mutability":"mutable","name":"r","nameLocation":"4699:1:1","nodeType":"VariableDeclaration","scope":378,"src":"4691:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":352,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4691:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":355,"mutability":"mutable","name":"vs","nameLocation":"4718:2:1","nodeType":"VariableDeclaration","scope":378,"src":"4710:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4710:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4659:67:1"},"returnParameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":378,"src":"4750:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"4750:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4749:9:1"},"scope":535,"src":"4643:252:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":441,"nodeType":"Block","src":"5218:1345:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":397,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"6114:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6106:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":395,"name":"uint256","nodeType":"ElementaryTypeName","src":"6106:7:1","typeDescriptions":{}}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6106:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:66:1","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6106:79:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":410,"nodeType":"IfStatement","src":"6102:161:1","trueBody":{"id":409,"nodeType":"Block","src":"6187:76:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6217:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6209:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"6209:7:1","typeDescriptions":{}}},"id":404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6209:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":405,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"6221:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$184_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6234:17:1","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":182,"src":"6221:30:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}}],"id":407,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6208:44:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":394,"id":408,"nodeType":"Return","src":"6201:51:1"}]}},{"assignments":[412],"declarations":[{"constant":false,"id":412,"mutability":"mutable","name":"signer","nameLocation":"6365:6:1","nodeType":"VariableDeclaration","scope":441,"src":"6357:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":411,"name":"address","nodeType":"ElementaryTypeName","src":"6357:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":419,"initialValue":{"arguments":[{"id":414,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"6384:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":415,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"6390:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":416,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"6393:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":417,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"6396:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":413,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6374:9:1","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6374:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6357:41:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":420,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"6412:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6430:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":422,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6422:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"6422:7:1","typeDescriptions":{}}},"id":424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6422:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6412:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":435,"nodeType":"IfStatement","src":"6408:101:1","trueBody":{"id":434,"nodeType":"Block","src":"6434:75:1","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6464:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6456:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:1","typeDescriptions":{}}},"id":429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6456:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":430,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"6468:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$184_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6481:16:1","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":180,"src":"6468:29:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}}],"id":432,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6455:43:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":394,"id":433,"nodeType":"Return","src":"6448:50:1"}]}},{"expression":{"components":[{"id":436,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"6527:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":437,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"6535:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$184_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6548:7:1","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":179,"src":"6535:20:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}}],"id":439,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6526:30:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":394,"id":440,"nodeType":"Return","src":"6519:37:1"}]},"documentation":{"id":379,"nodeType":"StructuredDocumentation","src":"4901:163:1","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":442,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5078:10:1","nodeType":"FunctionDefinition","parameters":{"id":388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":381,"mutability":"mutable","name":"hash","nameLocation":"5106:4:1","nodeType":"VariableDeclaration","scope":442,"src":"5098:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5098:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":383,"mutability":"mutable","name":"v","nameLocation":"5126:1:1","nodeType":"VariableDeclaration","scope":442,"src":"5120:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":382,"name":"uint8","nodeType":"ElementaryTypeName","src":"5120:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"r","nameLocation":"5145:1:1","nodeType":"VariableDeclaration","scope":442,"src":"5137:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":384,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5137:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":387,"mutability":"mutable","name":"s","nameLocation":"5164:1:1","nodeType":"VariableDeclaration","scope":442,"src":"5156:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":386,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5156:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5088:83:1"},"returnParameters":{"id":394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":442,"src":"5195:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"5195:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":442,"src":"5204:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":392,"nodeType":"UserDefinedTypeName","pathNode":{"id":391,"name":"RecoverError","nameLocations":["5204:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":184,"src":"5204:12:1"},"referencedDeclaration":184,"src":"5204:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5194:23:1"},"scope":535,"src":"5069:1494:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":474,"nodeType":"Block","src":"6828:138:1","statements":[{"assignments":[457,460],"declarations":[{"constant":false,"id":457,"mutability":"mutable","name":"recovered","nameLocation":"6847:9:1","nodeType":"VariableDeclaration","scope":474,"src":"6839:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":456,"name":"address","nodeType":"ElementaryTypeName","src":"6839:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":460,"mutability":"mutable","name":"error","nameLocation":"6871:5:1","nodeType":"VariableDeclaration","scope":474,"src":"6858:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":459,"nodeType":"UserDefinedTypeName","pathNode":{"id":458,"name":"RecoverError","nameLocations":["6858:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":184,"src":"6858:12:1"},"referencedDeclaration":184,"src":"6858:12:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":467,"initialValue":{"arguments":[{"id":462,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"6891:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":463,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6897:1:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":464,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"6900:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":465,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"6903:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":461,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[274,348,442],"referencedDeclaration":442,"src":"6880:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6880:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$184_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6838:67:1"},{"expression":{"arguments":[{"id":469,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"6927:5:1","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$184","typeString":"enum ECDSA.RecoverError"}],"id":468,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"6915:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$184_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6915:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":471,"nodeType":"ExpressionStatement","src":"6915:18:1"},{"expression":{"id":472,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"6950:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":455,"id":473,"nodeType":"Return","src":"6943:16:1"}]},"documentation":{"id":443,"nodeType":"StructuredDocumentation","src":"6569:122:1","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":475,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6705:7:1","nodeType":"FunctionDefinition","parameters":{"id":452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":445,"mutability":"mutable","name":"hash","nameLocation":"6730:4:1","nodeType":"VariableDeclaration","scope":475,"src":"6722:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6722:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":447,"mutability":"mutable","name":"v","nameLocation":"6750:1:1","nodeType":"VariableDeclaration","scope":475,"src":"6744:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":446,"name":"uint8","nodeType":"ElementaryTypeName","src":"6744:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":449,"mutability":"mutable","name":"r","nameLocation":"6769:1:1","nodeType":"VariableDeclaration","scope":475,"src":"6761:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6761:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":451,"mutability":"mutable","name":"s","nameLocation":"6788:1:1","nodeType":"VariableDeclaration","scope":475,"src":"6780:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":450,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6780:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6712:83:1"},"returnParameters":{"id":455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":475,"src":"6819:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"6819:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6818:9:1"},"scope":535,"src":"6696:270:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":491,"nodeType":"Block","src":"7334:187:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7472:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":487,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"7508:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":484,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7455:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7459:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"7455:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7455:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":483,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7445:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7445:69:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":482,"id":490,"nodeType":"Return","src":"7438:76:1"}]},"documentation":{"id":476,"nodeType":"StructuredDocumentation","src":"6972:279:1","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":492,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7265:22:1","nodeType":"FunctionDefinition","parameters":{"id":479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"hash","nameLocation":"7296:4:1","nodeType":"VariableDeclaration","scope":492,"src":"7288:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7288:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7287:14:1"},"returnParameters":{"id":482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":481,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":492,"src":"7325:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":480,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7325:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7324:9:1"},"scope":535,"src":"7256:265:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":513,"nodeType":"Block","src":"7886:116:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7930:32:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":506,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"7981:1:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7983:6:1","memberName":"length","nodeType":"MemberAccess","src":"7981:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":504,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"7964:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$174_$","typeString":"type(library Strings)"}},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7972:8:1","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":57,"src":"7964:16:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7964:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":509,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"7992:1:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":501,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7913:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7917:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"7913:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7913:81:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":500,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7903:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7903:92:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":499,"id":512,"nodeType":"Return","src":"7896:99:1"}]},"documentation":{"id":493,"nodeType":"StructuredDocumentation","src":"7527:274:1","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":514,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7815:22:1","nodeType":"FunctionDefinition","parameters":{"id":496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":495,"mutability":"mutable","name":"s","nameLocation":"7851:1:1","nodeType":"VariableDeclaration","scope":514,"src":"7838:14:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":494,"name":"bytes","nodeType":"ElementaryTypeName","src":"7838:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7837:16:1"},"returnParameters":{"id":499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":514,"src":"7877:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":497,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7877:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7876:9:1"},"scope":535,"src":"7806:196:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":533,"nodeType":"Block","src":"8443:92:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8487:10:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":528,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":517,"src":"8499:15:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":529,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"8516:10:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":525,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8470:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8474:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"8470:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8470:57:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":524,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8460:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8460:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":523,"id":532,"nodeType":"Return","src":"8453:75:1"}]},"documentation":{"id":515,"nodeType":"StructuredDocumentation","src":"8008:328:1","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":534,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8350:15:1","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":517,"mutability":"mutable","name":"domainSeparator","nameLocation":"8374:15:1","nodeType":"VariableDeclaration","scope":534,"src":"8366:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":516,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8366:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":519,"mutability":"mutable","name":"structHash","nameLocation":"8399:10:1","nodeType":"VariableDeclaration","scope":534,"src":"8391:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8391:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8365:45:1"},"returnParameters":{"id":523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":534,"src":"8434:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8434:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8433:9:1"},"scope":535,"src":"8341:194:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":536,"src":"369:8168:1","usedErrors":[]}],"src":"112:8426:1"},"id":1},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[1400]},"id":1401,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":537,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":538,"nodeType":"StructuredDocumentation","src":"128:73:2","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1400,"linearizedBaseContracts":[1400],"name":"Math","nameLocation":"210:4:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":542,"members":[{"id":539,"name":"Down","nameLocation":"245:4:2","nodeType":"EnumValue","src":"245:4:2"},{"id":540,"name":"Up","nameLocation":"287:2:2","nodeType":"EnumValue","src":"287:2:2"},{"id":541,"name":"Zero","nameLocation":"318:4:2","nodeType":"EnumValue","src":"318:4:2"}],"name":"Rounding","nameLocation":"226:8:2","nodeType":"EnumDefinition","src":"221:122:2"},{"body":{"id":559,"nodeType":"Block","src":"480:37:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":552,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":545,"src":"497:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":553,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":547,"src":"501:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":556,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":547,"src":"509:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:2","trueExpression":{"id":555,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":545,"src":"505:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":551,"id":558,"nodeType":"Return","src":"490:20:2"}]},"documentation":{"id":543,"nodeType":"StructuredDocumentation","src":"349:59:2","text":" @dev Returns the largest of two numbers."},"id":560,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:2","nodeType":"FunctionDefinition","parameters":{"id":548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"a","nameLocation":"434:1:2","nodeType":"VariableDeclaration","scope":560,"src":"426:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":544,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":547,"mutability":"mutable","name":"b","nameLocation":"445:1:2","nodeType":"VariableDeclaration","scope":560,"src":"437:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":546,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:2"},"returnParameters":{"id":551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":550,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":560,"src":"471:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":549,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:2"},"scope":1400,"src":"413:104:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":577,"nodeType":"Block","src":"655:37:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":570,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"672:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":571,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"676:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":574,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"684:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:2","trueExpression":{"id":573,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"680:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":569,"id":576,"nodeType":"Return","src":"665:20:2"}]},"documentation":{"id":561,"nodeType":"StructuredDocumentation","src":"523:60:2","text":" @dev Returns the smallest of two numbers."},"id":578,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:2","nodeType":"FunctionDefinition","parameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":563,"mutability":"mutable","name":"a","nameLocation":"609:1:2","nodeType":"VariableDeclaration","scope":578,"src":"601:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":565,"mutability":"mutable","name":"b","nameLocation":"620:1:2","nodeType":"VariableDeclaration","scope":578,"src":"612:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":564,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:2"},"returnParameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":578,"src":"646:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":567,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:2"},"scope":1400,"src":"588:104:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":600,"nodeType":"Block","src":"876:82:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":588,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"931:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":589,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"935:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":591,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":592,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"941:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":593,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"945:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":595,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":587,"id":599,"nodeType":"Return","src":"923:28:2"}]},"documentation":{"id":579,"nodeType":"StructuredDocumentation","src":"698:102:2","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":601,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:2","nodeType":"FunctionDefinition","parameters":{"id":584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":581,"mutability":"mutable","name":"a","nameLocation":"830:1:2","nodeType":"VariableDeclaration","scope":601,"src":"822:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":580,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":583,"mutability":"mutable","name":"b","nameLocation":"841:1:2","nodeType":"VariableDeclaration","scope":601,"src":"833:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":582,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:2"},"returnParameters":{"id":587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":601,"src":"867:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":585,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:2"},"scope":1400,"src":"805:153:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":625,"nodeType":"Block","src":"1228:123:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":611,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1316:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":615,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1330:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":618,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":619,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"1339:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:2","trueExpression":{"hexValue":"30","id":614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":610,"id":624,"nodeType":"Return","src":"1309:35:2"}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"964:188:2","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":626,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:2","nodeType":"FunctionDefinition","parameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"a","nameLocation":"1182:1:2","nodeType":"VariableDeclaration","scope":626,"src":"1174:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":603,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"b","nameLocation":"1193:1:2","nodeType":"VariableDeclaration","scope":626,"src":"1185:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":605,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:2"},"returnParameters":{"id":610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":626,"src":"1219:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":608,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:2"},"scope":1400,"src":"1157:194:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":747,"nodeType":"Block","src":"1795:3797:2","statements":[{"id":746,"nodeType":"UncheckedBlock","src":"1805:3781:2","statements":[{"assignments":[639],"declarations":[{"constant":false,"id":639,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:2","nodeType":"VariableDeclaration","scope":746,"src":"2126:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":638,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":640,"nodeType":"VariableDeclarationStatement","src":"2126:13:2"},{"assignments":[642],"declarations":[{"constant":false,"id":642,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:2","nodeType":"VariableDeclaration","scope":746,"src":"2198:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":641,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":643,"nodeType":"VariableDeclarationStatement","src":"2198:13:2"},{"AST":{"nodeType":"YulBlock","src":"2278:157:2","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:2"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:2","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:2"},"nodeType":"YulFunctionCall","src":"2319:6:2"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:2"},"nodeType":"YulFunctionCall","src":"2306:20:2"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:2","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:2"},"nodeType":"YulFunctionCall","src":"2352:9:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:2"}]},{"nodeType":"YulAssignment","src":"2378:43:2","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:2"},"nodeType":"YulFunctionCall","src":"2391:14:2"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:2"},"nodeType":"YulFunctionCall","src":"2407:13:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:2"},"nodeType":"YulFunctionCall","src":"2387:34:2"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":639,"isOffset":false,"isSlot":false,"src":"2343:5:2","valueSize":1},{"declaration":639,"isOffset":false,"isSlot":false,"src":"2399:5:2","valueSize":1},{"declaration":639,"isOffset":false,"isSlot":false,"src":"2414:5:2","valueSize":1},{"declaration":642,"isOffset":false,"isSlot":false,"src":"2378:5:2","valueSize":1},{"declaration":629,"isOffset":false,"isSlot":false,"src":"2313:1:2","valueSize":1},{"declaration":629,"isOffset":false,"isSlot":false,"src":"2356:1:2","valueSize":1},{"declaration":631,"isOffset":false,"isSlot":false,"src":"2316:1:2","valueSize":1},{"declaration":631,"isOffset":false,"isSlot":false,"src":"2359:1:2","valueSize":1}],"id":644,"nodeType":"InlineAssembly","src":"2269:166:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":645,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"2516:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":653,"nodeType":"IfStatement","src":"2512:75:2","trueBody":{"id":652,"nodeType":"Block","src":"2528:59:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":648,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"2553:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":649,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"2561:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":637,"id":651,"nodeType":"Return","src":"2546:26:2"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":655,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"2697:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":656,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"2711:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":654,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":659,"nodeType":"ExpressionStatement","src":"2689:28:2"},{"assignments":[661],"declarations":[{"constant":false,"id":661,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:2","nodeType":"VariableDeclaration","scope":746,"src":"2973:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":660,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":662,"nodeType":"VariableDeclarationStatement","src":"2973:17:2"},{"AST":{"nodeType":"YulBlock","src":"3013:291:2","statements":[{"nodeType":"YulAssignment","src":"3082:38:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:2"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:2"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:2"},"nodeType":"YulFunctionCall","src":"3095:25:2"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:2"}]},{"nodeType":"YulAssignment","src":"3202:41:2","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:2"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:2"},"nodeType":"YulFunctionCall","src":"3222:20:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:2"},"nodeType":"YulFunctionCall","src":"3211:32:2"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:2"}]},{"nodeType":"YulAssignment","src":"3260:30:2","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:2"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:2"},"nodeType":"YulFunctionCall","src":"3269:21:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":633,"isOffset":false,"isSlot":false,"src":"3108:11:2","valueSize":1},{"declaration":639,"isOffset":false,"isSlot":false,"src":"3236:5:2","valueSize":1},{"declaration":639,"isOffset":false,"isSlot":false,"src":"3260:5:2","valueSize":1},{"declaration":639,"isOffset":false,"isSlot":false,"src":"3273:5:2","valueSize":1},{"declaration":642,"isOffset":false,"isSlot":false,"src":"3202:5:2","valueSize":1},{"declaration":642,"isOffset":false,"isSlot":false,"src":"3215:5:2","valueSize":1},{"declaration":661,"isOffset":false,"isSlot":false,"src":"3082:9:2","valueSize":1},{"declaration":661,"isOffset":false,"isSlot":false,"src":"3225:9:2","valueSize":1},{"declaration":661,"isOffset":false,"isSlot":false,"src":"3280:9:2","valueSize":1},{"declaration":629,"isOffset":false,"isSlot":false,"src":"3102:1:2","valueSize":1},{"declaration":631,"isOffset":false,"isSlot":false,"src":"3105:1:2","valueSize":1}],"id":663,"nodeType":"InlineAssembly","src":"3004:300:2"},{"assignments":[665],"declarations":[{"constant":false,"id":665,"mutability":"mutable","name":"twos","nameLocation":"3619:4:2","nodeType":"VariableDeclaration","scope":746,"src":"3611:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":664,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":673,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":666,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"3626:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:2","subExpression":{"id":667,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"3642:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":671,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:2"},{"AST":{"nodeType":"YulBlock","src":"3681:362:2","statements":[{"nodeType":"YulAssignment","src":"3746:37:2","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:2"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:2"},"nodeType":"YulFunctionCall","src":"3761:22:2"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:2"}]},{"nodeType":"YulAssignment","src":"3850:25:2","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:2"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:2"},"nodeType":"YulFunctionCall","src":"3859:16:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:2"}]},{"nodeType":"YulAssignment","src":"3990:39:2","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:2","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:2"},"nodeType":"YulFunctionCall","src":"4006:12:2"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:2"},"nodeType":"YulFunctionCall","src":"4002:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:2","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:2"},"nodeType":"YulFunctionCall","src":"3998:31:2"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":633,"isOffset":false,"isSlot":false,"src":"3746:11:2","valueSize":1},{"declaration":633,"isOffset":false,"isSlot":false,"src":"3765:11:2","valueSize":1},{"declaration":639,"isOffset":false,"isSlot":false,"src":"3850:5:2","valueSize":1},{"declaration":639,"isOffset":false,"isSlot":false,"src":"3863:5:2","valueSize":1},{"declaration":665,"isOffset":false,"isSlot":false,"src":"3778:4:2","valueSize":1},{"declaration":665,"isOffset":false,"isSlot":false,"src":"3870:4:2","valueSize":1},{"declaration":665,"isOffset":false,"isSlot":false,"src":"3990:4:2","valueSize":1},{"declaration":665,"isOffset":false,"isSlot":false,"src":"4013:4:2","valueSize":1},{"declaration":665,"isOffset":false,"isSlot":false,"src":"4020:4:2","valueSize":1}],"id":674,"nodeType":"InlineAssembly","src":"3672:371:2"},{"expression":{"id":679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":675,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"4109:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":676,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"4118:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":677,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"4126:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":680,"nodeType":"ExpressionStatement","src":"4109:21:2"},{"assignments":[682],"declarations":[{"constant":false,"id":682,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:2","nodeType":"VariableDeclaration","scope":746,"src":"4448:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":689,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:2","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":684,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4471:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":686,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:2"},{"expression":{"id":696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":690,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4704:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":692,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4719:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":693,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4733:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":697,"nodeType":"ExpressionStatement","src":"4704:36:2"},{"expression":{"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":698,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4773:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":700,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4788:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":701,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4802:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":705,"nodeType":"ExpressionStatement","src":"4773:36:2"},{"expression":{"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":706,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4843:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":708,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4858:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":709,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4872:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":713,"nodeType":"ExpressionStatement","src":"4843:36:2"},{"expression":{"id":720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":714,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4913:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":716,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4928:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":717,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4942:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":721,"nodeType":"ExpressionStatement","src":"4913:36:2"},{"expression":{"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":722,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"4983:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":724,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4998:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":725,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"5012:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":729,"nodeType":"ExpressionStatement","src":"4983:36:2"},{"expression":{"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":730,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"5054:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":732,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"5069:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":733,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"5083:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":737,"nodeType":"ExpressionStatement","src":"5054:36:2"},{"expression":{"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":738,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"5524:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":739,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"5533:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":740,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"5541:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":743,"nodeType":"ExpressionStatement","src":"5524:24:2"},{"expression":{"id":744,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"5569:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":637,"id":745,"nodeType":"Return","src":"5562:13:2"}]}]},"documentation":{"id":627,"nodeType":"StructuredDocumentation","src":"1357:305:2","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":748,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:2","nodeType":"FunctionDefinition","parameters":{"id":634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":629,"mutability":"mutable","name":"x","nameLocation":"1700:1:2","nodeType":"VariableDeclaration","scope":748,"src":"1692:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":631,"mutability":"mutable","name":"y","nameLocation":"1719:1:2","nodeType":"VariableDeclaration","scope":748,"src":"1711:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":630,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":633,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:2","nodeType":"VariableDeclaration","scope":748,"src":"1730:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":632,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:2"},"returnParameters":{"id":637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":636,"mutability":"mutable","name":"result","nameLocation":"1787:6:2","nodeType":"VariableDeclaration","scope":748,"src":"1779:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:2"},"scope":1400,"src":"1667:3925:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":791,"nodeType":"Block","src":"5872:189:2","statements":[{"assignments":[764],"declarations":[{"constant":false,"id":764,"mutability":"mutable","name":"result","nameLocation":"5890:6:2","nodeType":"VariableDeclaration","scope":791,"src":"5882:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":763,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":770,"initialValue":{"arguments":[{"id":766,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":751,"src":"5906:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":767,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"5909:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":768,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"5912:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":765,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[748,792],"referencedDeclaration":748,"src":"5899:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:2"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":771,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"5938:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":772,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"5950:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$542_$","typeString":"type(enum Math.Rounding)"}},"id":773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":540,"src":"5950:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"src":"5938:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":776,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":751,"src":"5972:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":777,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"5975:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":778,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"5978:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":775,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:2","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":788,"nodeType":"IfStatement","src":"5934:98:2","trueBody":{"id":787,"nodeType":"Block","src":"5996:36:2","statements":[{"expression":{"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":783,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"6010:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":786,"nodeType":"ExpressionStatement","src":"6010:11:2"}]}},{"expression":{"id":789,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"6048:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":762,"id":790,"nodeType":"Return","src":"6041:13:2"}]},"documentation":{"id":749,"nodeType":"StructuredDocumentation","src":"5598:121:2","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":792,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:2","nodeType":"FunctionDefinition","parameters":{"id":759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":751,"mutability":"mutable","name":"x","nameLocation":"5757:1:2","nodeType":"VariableDeclaration","scope":792,"src":"5749:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":750,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":753,"mutability":"mutable","name":"y","nameLocation":"5776:1:2","nodeType":"VariableDeclaration","scope":792,"src":"5768:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":752,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":755,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:2","nodeType":"VariableDeclaration","scope":792,"src":"5787:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":754,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":758,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:2","nodeType":"VariableDeclaration","scope":792,"src":"5816:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"},"typeName":{"id":757,"nodeType":"UserDefinedTypeName","pathNode":{"id":756,"name":"Rounding","nameLocations":["5816:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":542,"src":"5816:8:2"},"referencedDeclaration":542,"src":"5816:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:2"},"returnParameters":{"id":762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":792,"src":"5863:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":760,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:2"},"scope":1400,"src":"5724:337:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":903,"nodeType":"Block","src":"6337:1585:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":800,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"6351:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":806,"nodeType":"IfStatement","src":"6347:45:2","trueBody":{"id":805,"nodeType":"Block","src":"6359:33:2","statements":[{"expression":{"hexValue":"30","id":803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":799,"id":804,"nodeType":"Return","src":"6373:8:2"}]}},{"assignments":[808],"declarations":[{"constant":false,"id":808,"mutability":"mutable","name":"result","nameLocation":"7079:6:2","nodeType":"VariableDeclaration","scope":903,"src":"7071:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":807,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":817,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":811,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"7099:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":810,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1072,1108],"referencedDeclaration":1072,"src":"7094:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":815,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:2"},{"id":902,"nodeType":"UncheckedBlock","src":"7508:408:2","statements":[{"expression":{"id":827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":818,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7532:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":819,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7542:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":820,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"7551:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":821,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7555:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":824,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":828,"nodeType":"ExpressionStatement","src":"7532:35:2"},{"expression":{"id":838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":829,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7581:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":830,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7591:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":831,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"7600:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":832,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7604:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":835,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":839,"nodeType":"ExpressionStatement","src":"7581:35:2"},{"expression":{"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":840,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7630:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":841,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7640:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":842,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"7649:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":843,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7653:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":846,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":850,"nodeType":"ExpressionStatement","src":"7630:35:2"},{"expression":{"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":851,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7679:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":852,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7689:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":853,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"7698:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":854,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7702:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":857,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":861,"nodeType":"ExpressionStatement","src":"7679:35:2"},{"expression":{"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":862,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7728:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":863,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7738:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":864,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"7747:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":865,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7751:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":868,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":872,"nodeType":"ExpressionStatement","src":"7728:35:2"},{"expression":{"id":882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":873,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7777:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":874,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7787:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":875,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"7796:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":876,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7800:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":879,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":883,"nodeType":"ExpressionStatement","src":"7777:35:2"},{"expression":{"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":884,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7826:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":885,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7836:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":886,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"7845:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":887,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7849:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":890,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":894,"nodeType":"ExpressionStatement","src":"7826:35:2"},{"expression":{"arguments":[{"id":896,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7886:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":897,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"7894:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":898,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7898:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":895,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"7882:3:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":799,"id":901,"nodeType":"Return","src":"7875:30:2"}]}]},"documentation":{"id":793,"nodeType":"StructuredDocumentation","src":"6067:208:2","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":904,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:2","nodeType":"FunctionDefinition","parameters":{"id":796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"mutability":"mutable","name":"a","nameLocation":"6302:1:2","nodeType":"VariableDeclaration","scope":904,"src":"6294:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":794,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:2"},"returnParameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":904,"src":"6328:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":797,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:2"},"scope":1400,"src":"6280:1642:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":939,"nodeType":"Block","src":"8098:161:2","statements":[{"id":938,"nodeType":"UncheckedBlock","src":"8108:145:2","statements":[{"assignments":[916],"declarations":[{"constant":false,"id":916,"mutability":"mutable","name":"result","nameLocation":"8140:6:2","nodeType":"VariableDeclaration","scope":938,"src":"8132:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":915,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":920,"initialValue":{"arguments":[{"id":918,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"8154:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":917,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[904,940],"referencedDeclaration":904,"src":"8149:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":921,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"8177:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":922,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"8187:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":923,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"8199:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$542_$","typeString":"type(enum Math.Rounding)"}},"id":924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":540,"src":"8199:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"src":"8187:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":926,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"8214:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":927,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"8223:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":929,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"8232:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:2","trueExpression":{"hexValue":"31","id":932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":935,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":914,"id":937,"nodeType":"Return","src":"8170:72:2"}]}]},"documentation":{"id":905,"nodeType":"StructuredDocumentation","src":"7928:89:2","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":940,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:2","nodeType":"FunctionDefinition","parameters":{"id":911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":907,"mutability":"mutable","name":"a","nameLocation":"8044:1:2","nodeType":"VariableDeclaration","scope":940,"src":"8036:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":906,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":910,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:2","nodeType":"VariableDeclaration","scope":940,"src":"8047:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"},"typeName":{"id":909,"nodeType":"UserDefinedTypeName","pathNode":{"id":908,"name":"Rounding","nameLocations":["8047:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":542,"src":"8047:8:2"},"referencedDeclaration":542,"src":"8047:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:2"},"returnParameters":{"id":914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":913,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":940,"src":"8089:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":912,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:2"},"scope":1400,"src":"8022:237:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1071,"nodeType":"Block","src":"8444:922:2","statements":[{"assignments":[949],"declarations":[{"constant":false,"id":949,"mutability":"mutable","name":"result","nameLocation":"8462:6:2","nodeType":"VariableDeclaration","scope":1071,"src":"8454:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":948,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":951,"initialValue":{"hexValue":"30","id":950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:2"},{"id":1068,"nodeType":"UncheckedBlock","src":"8482:855:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":952,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"8510:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":966,"nodeType":"IfStatement","src":"8506:99:2","trueBody":{"id":965,"nodeType":"Block","src":"8528:77:2","statements":[{"expression":{"id":959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":957,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"8546:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":960,"nodeType":"ExpressionStatement","src":"8546:13:2"},{"expression":{"id":963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":961,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"8577:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":964,"nodeType":"ExpressionStatement","src":"8577:13:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":967,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"8622:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":981,"nodeType":"IfStatement","src":"8618:96:2","trueBody":{"id":980,"nodeType":"Block","src":"8639:75:2","statements":[{"expression":{"id":974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":972,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"8657:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":975,"nodeType":"ExpressionStatement","src":"8657:12:2"},{"expression":{"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":976,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"8687:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":979,"nodeType":"ExpressionStatement","src":"8687:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"8731:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":996,"nodeType":"IfStatement","src":"8727:96:2","trueBody":{"id":995,"nodeType":"Block","src":"8748:75:2","statements":[{"expression":{"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":987,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"8766:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":990,"nodeType":"ExpressionStatement","src":"8766:12:2"},{"expression":{"id":993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":991,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"8796:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":994,"nodeType":"ExpressionStatement","src":"8796:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":997,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"8840:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1011,"nodeType":"IfStatement","src":"8836:96:2","trueBody":{"id":1010,"nodeType":"Block","src":"8857:75:2","statements":[{"expression":{"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1002,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"8875:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1005,"nodeType":"ExpressionStatement","src":"8875:12:2"},{"expression":{"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1006,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"8905:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1009,"nodeType":"ExpressionStatement","src":"8905:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1012,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"8949:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1026,"nodeType":"IfStatement","src":"8945:93:2","trueBody":{"id":1025,"nodeType":"Block","src":"8965:73:2","statements":[{"expression":{"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"8983:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1020,"nodeType":"ExpressionStatement","src":"8983:11:2"},{"expression":{"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1021,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"9012:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1024,"nodeType":"ExpressionStatement","src":"9012:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1027,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"9055:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1041,"nodeType":"IfStatement","src":"9051:93:2","trueBody":{"id":1040,"nodeType":"Block","src":"9071:73:2","statements":[{"expression":{"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1032,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"9089:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1035,"nodeType":"ExpressionStatement","src":"9089:11:2"},{"expression":{"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1036,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"9118:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1039,"nodeType":"ExpressionStatement","src":"9118:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1042,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"9161:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1056,"nodeType":"IfStatement","src":"9157:93:2","trueBody":{"id":1055,"nodeType":"Block","src":"9177:73:2","statements":[{"expression":{"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1047,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"9195:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1050,"nodeType":"ExpressionStatement","src":"9195:11:2"},{"expression":{"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1051,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"9224:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1054,"nodeType":"ExpressionStatement","src":"9224:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1057,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"9267:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1067,"nodeType":"IfStatement","src":"9263:64:2","trueBody":{"id":1066,"nodeType":"Block","src":"9283:44:2","statements":[{"expression":{"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1062,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"9301:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1065,"nodeType":"ExpressionStatement","src":"9301:11:2"}]}}]},{"expression":{"id":1069,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"9353:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":947,"id":1070,"nodeType":"Return","src":"9346:13:2"}]},"documentation":{"id":941,"nodeType":"StructuredDocumentation","src":"8265:113:2","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1072,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:2","nodeType":"FunctionDefinition","parameters":{"id":944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":943,"mutability":"mutable","name":"value","nameLocation":"8405:5:2","nodeType":"VariableDeclaration","scope":1072,"src":"8397:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":942,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:2"},"returnParameters":{"id":947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":946,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1072,"src":"8435:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":945,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:2"},"scope":1400,"src":"8383:983:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1107,"nodeType":"Block","src":"9599:165:2","statements":[{"id":1106,"nodeType":"UncheckedBlock","src":"9609:149:2","statements":[{"assignments":[1084],"declarations":[{"constant":false,"id":1084,"mutability":"mutable","name":"result","nameLocation":"9641:6:2","nodeType":"VariableDeclaration","scope":1106,"src":"9633:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1088,"initialValue":{"arguments":[{"id":1086,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"9655:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1085,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1072,1108],"referencedDeclaration":1072,"src":"9650:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1089,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"9682:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1090,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"9692:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1091,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"9704:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$542_$","typeString":"type(enum Math.Rounding)"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":540,"src":"9704:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"src":"9692:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1095,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"9724:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1097,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"9733:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:2","trueExpression":{"hexValue":"31","id":1100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1103,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1082,"id":1105,"nodeType":"Return","src":"9675:72:2"}]}]},"documentation":{"id":1073,"nodeType":"StructuredDocumentation","src":"9372:142:2","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1108,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:2","nodeType":"FunctionDefinition","parameters":{"id":1079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1075,"mutability":"mutable","name":"value","nameLocation":"9541:5:2","nodeType":"VariableDeclaration","scope":1108,"src":"9533:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1074,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1078,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:2","nodeType":"VariableDeclaration","scope":1108,"src":"9548:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"},"typeName":{"id":1077,"nodeType":"UserDefinedTypeName","pathNode":{"id":1076,"name":"Rounding","nameLocations":["9548:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":542,"src":"9548:8:2"},"referencedDeclaration":542,"src":"9548:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:2"},"returnParameters":{"id":1082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1108,"src":"9590:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1080,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:2"},"scope":1400,"src":"9519:245:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1236,"nodeType":"Block","src":"9951:828:2","statements":[{"assignments":[1117],"declarations":[{"constant":false,"id":1117,"mutability":"mutable","name":"result","nameLocation":"9969:6:2","nodeType":"VariableDeclaration","scope":1236,"src":"9961:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1116,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1119,"initialValue":{"hexValue":"30","id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:2"},{"id":1233,"nodeType":"UncheckedBlock","src":"9989:761:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10017:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1123,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1136,"nodeType":"IfStatement","src":"10013:99:2","trueBody":{"id":1135,"nodeType":"Block","src":"10034:78:2","statements":[{"expression":{"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10052:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1130,"nodeType":"ExpressionStatement","src":"10052:15:2"},{"expression":{"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1131,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"10085:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1134,"nodeType":"ExpressionStatement","src":"10085:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1137,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10129:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1153,"nodeType":"IfStatement","src":"10125:99:2","trueBody":{"id":1152,"nodeType":"Block","src":"10146:78:2","statements":[{"expression":{"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1142,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10164:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1147,"nodeType":"ExpressionStatement","src":"10164:15:2"},{"expression":{"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1148,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"10197:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1151,"nodeType":"ExpressionStatement","src":"10197:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10241:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1157,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1170,"nodeType":"IfStatement","src":"10237:99:2","trueBody":{"id":1169,"nodeType":"Block","src":"10258:78:2","statements":[{"expression":{"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1159,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10276:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1164,"nodeType":"ExpressionStatement","src":"10276:15:2"},{"expression":{"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1165,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"10309:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1168,"nodeType":"ExpressionStatement","src":"10309:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1171,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10353:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1187,"nodeType":"IfStatement","src":"10349:96:2","trueBody":{"id":1186,"nodeType":"Block","src":"10369:76:2","statements":[{"expression":{"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10387:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1181,"nodeType":"ExpressionStatement","src":"10387:14:2"},{"expression":{"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1182,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"10419:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1185,"nodeType":"ExpressionStatement","src":"10419:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1188,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10462:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:2","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1204,"nodeType":"IfStatement","src":"10458:96:2","trueBody":{"id":1203,"nodeType":"Block","src":"10478:76:2","statements":[{"expression":{"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1193,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10496:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:2","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1198,"nodeType":"ExpressionStatement","src":"10496:14:2"},{"expression":{"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1199,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"10528:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1202,"nodeType":"ExpressionStatement","src":"10528:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1205,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10571:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:2","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1221,"nodeType":"IfStatement","src":"10567:96:2","trueBody":{"id":1220,"nodeType":"Block","src":"10587:76:2","statements":[{"expression":{"id":1214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10605:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:2","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1215,"nodeType":"ExpressionStatement","src":"10605:14:2"},{"expression":{"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1216,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"10637:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1219,"nodeType":"ExpressionStatement","src":"10637:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1222,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"10680:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1232,"nodeType":"IfStatement","src":"10676:64:2","trueBody":{"id":1231,"nodeType":"Block","src":"10696:44:2","statements":[{"expression":{"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1227,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"10714:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1230,"nodeType":"ExpressionStatement","src":"10714:11:2"}]}}]},{"expression":{"id":1234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"10766:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1115,"id":1235,"nodeType":"Return","src":"10759:13:2"}]},"documentation":{"id":1109,"nodeType":"StructuredDocumentation","src":"9770:114:2","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1237,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:2","nodeType":"FunctionDefinition","parameters":{"id":1112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1111,"mutability":"mutable","name":"value","nameLocation":"9912:5:2","nodeType":"VariableDeclaration","scope":1237,"src":"9904:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1110,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:2"},"returnParameters":{"id":1115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1237,"src":"9942:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1113,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:2"},"scope":1400,"src":"9889:890:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1272,"nodeType":"Block","src":"11014:165:2","statements":[{"id":1271,"nodeType":"UncheckedBlock","src":"11024:149:2","statements":[{"assignments":[1249],"declarations":[{"constant":false,"id":1249,"mutability":"mutable","name":"result","nameLocation":"11056:6:2","nodeType":"VariableDeclaration","scope":1271,"src":"11048:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1248,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1253,"initialValue":{"arguments":[{"id":1251,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"11071:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1250,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1237,1273],"referencedDeclaration":1237,"src":"11065:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1254,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"11098:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1255,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"11108:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1256,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"11120:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$542_$","typeString":"type(enum Math.Rounding)"}},"id":1257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":540,"src":"11120:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"src":"11108:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1260,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"11139:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1262,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"11148:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:2","trueExpression":{"hexValue":"31","id":1265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1268,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1247,"id":1270,"nodeType":"Return","src":"11091:71:2"}]}]},"documentation":{"id":1238,"nodeType":"StructuredDocumentation","src":"10785:143:2","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1273,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:2","nodeType":"FunctionDefinition","parameters":{"id":1244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1240,"mutability":"mutable","name":"value","nameLocation":"10956:5:2","nodeType":"VariableDeclaration","scope":1273,"src":"10948:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1239,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1243,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:2","nodeType":"VariableDeclaration","scope":1273,"src":"10963:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"},"typeName":{"id":1242,"nodeType":"UserDefinedTypeName","pathNode":{"id":1241,"name":"Rounding","nameLocations":["10963:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":542,"src":"10963:8:2"},"referencedDeclaration":542,"src":"10963:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:2"},"returnParameters":{"id":1247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1273,"src":"11005:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1245,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:2"},"scope":1400,"src":"10933:246:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1359,"nodeType":"Block","src":"11493:600:2","statements":[{"assignments":[1282],"declarations":[{"constant":false,"id":1282,"mutability":"mutable","name":"result","nameLocation":"11511:6:2","nodeType":"VariableDeclaration","scope":1359,"src":"11503:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1281,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1284,"initialValue":{"hexValue":"30","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:2"},{"id":1356,"nodeType":"UncheckedBlock","src":"11531:533:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1285,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"11559:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1299,"nodeType":"IfStatement","src":"11555:98:2","trueBody":{"id":1298,"nodeType":"Block","src":"11577:76:2","statements":[{"expression":{"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1290,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"11595:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1293,"nodeType":"ExpressionStatement","src":"11595:13:2"},{"expression":{"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1294,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"11626:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1297,"nodeType":"ExpressionStatement","src":"11626:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1300,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"11670:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1314,"nodeType":"IfStatement","src":"11666:95:2","trueBody":{"id":1313,"nodeType":"Block","src":"11687:74:2","statements":[{"expression":{"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1305,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"11705:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1308,"nodeType":"ExpressionStatement","src":"11705:12:2"},{"expression":{"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1309,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"11735:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1312,"nodeType":"ExpressionStatement","src":"11735:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1315,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"11778:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1329,"nodeType":"IfStatement","src":"11774:95:2","trueBody":{"id":1328,"nodeType":"Block","src":"11795:74:2","statements":[{"expression":{"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1320,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"11813:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1323,"nodeType":"ExpressionStatement","src":"11813:12:2"},{"expression":{"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1324,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"11843:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1327,"nodeType":"ExpressionStatement","src":"11843:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1330,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"11886:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1344,"nodeType":"IfStatement","src":"11882:95:2","trueBody":{"id":1343,"nodeType":"Block","src":"11903:74:2","statements":[{"expression":{"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1335,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"11921:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1338,"nodeType":"ExpressionStatement","src":"11921:12:2"},{"expression":{"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1339,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"11951:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1342,"nodeType":"ExpressionStatement","src":"11951:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1345,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"11994:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1355,"nodeType":"IfStatement","src":"11990:64:2","trueBody":{"id":1354,"nodeType":"Block","src":"12010:44:2","statements":[{"expression":{"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1350,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"12028:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1353,"nodeType":"ExpressionStatement","src":"12028:11:2"}]}}]},{"expression":{"id":1357,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"12080:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1280,"id":1358,"nodeType":"Return","src":"12073:13:2"}]},"documentation":{"id":1274,"nodeType":"StructuredDocumentation","src":"11185:240:2","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1360,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:2","nodeType":"FunctionDefinition","parameters":{"id":1277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1276,"mutability":"mutable","name":"value","nameLocation":"11454:5:2","nodeType":"VariableDeclaration","scope":1360,"src":"11446:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1275,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:2"},"returnParameters":{"id":1280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1279,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1360,"src":"11484:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1278,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:2"},"scope":1400,"src":"11430:663:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1398,"nodeType":"Block","src":"12329:173:2","statements":[{"id":1397,"nodeType":"UncheckedBlock","src":"12339:157:2","statements":[{"assignments":[1372],"declarations":[{"constant":false,"id":1372,"mutability":"mutable","name":"result","nameLocation":"12371:6:2","nodeType":"VariableDeclaration","scope":1397,"src":"12363:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1371,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1376,"initialValue":{"arguments":[{"id":1374,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"12387:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1373,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1360,1399],"referencedDeclaration":1360,"src":"12380:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1377,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"12414:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1378,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"12424:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1379,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"12436:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$542_$","typeString":"type(enum Math.Rounding)"}},"id":1380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":540,"src":"12436:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"src":"12424:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1383,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"12457:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":1384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1386,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1388,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"12471:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:2","trueExpression":{"hexValue":"31","id":1391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1394,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1370,"id":1396,"nodeType":"Return","src":"12407:78:2"}]}]},"documentation":{"id":1361,"nodeType":"StructuredDocumentation","src":"12099:143:2","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1399,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:2","nodeType":"FunctionDefinition","parameters":{"id":1367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1363,"mutability":"mutable","name":"value","nameLocation":"12271:5:2","nodeType":"VariableDeclaration","scope":1399,"src":"12263:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1362,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:2","nodeType":"VariableDeclaration","scope":1399,"src":"12278:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"},"typeName":{"id":1365,"nodeType":"UserDefinedTypeName","pathNode":{"id":1364,"name":"Rounding","nameLocations":["12278:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":542,"src":"12278:8:2"},"referencedDeclaration":542,"src":"12278:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$542","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:2"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1369,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1399,"src":"12320:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1368,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:2"},"scope":1400,"src":"12247:255:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1401,"src":"202:12302:2","usedErrors":[]}],"src":"103:12402:2"},"id":2},"contracts/TokenAuthenticated.sol":{"ast":{"absolutePath":"contracts/TokenAuthenticated.sol","exportedSymbols":{"ECDSA":[535],"Math":[1400],"Strings":[174],"TokenAuthenticated":[1579]},"id":1580,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1402,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"33:24:3"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":1403,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1580,"sourceUnit":536,"src":"59:62:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":1404,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1580,"sourceUnit":175,"src":"122:51:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"TokenAuthenticated","contractDependencies":[],"contractKind":"contract","documentation":{"id":1405,"nodeType":"StructuredDocumentation","src":"209:102:3","text":" @title TokenAuthenticated\n @dev allow a user to authenticate with a signed english token."},"fullyImplemented":true,"id":1579,"linearizedBaseContracts":[1579],"name":"TokenAuthenticated","nameLocation":"321:18:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"bebc479c","id":1407,"mutability":"mutable","name":"STATEMENT","nameLocation":"360:9:3","nodeType":"VariableDeclaration","scope":1579,"src":"346:23:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1406,"name":"string","nodeType":"ElementaryTypeName","src":"346:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"cb2e6043","id":1410,"mutability":"mutable","name":"lengthOfToken","nameLocation":"391:13:3","nodeType":"VariableDeclaration","scope":1579,"src":"376:33:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1408,"name":"uint256","nodeType":"ElementaryTypeName","src":"376:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3135","id":1409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"407:2:3","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"15"},"visibility":"public"},{"canonicalName":"TokenAuthenticated.TokenRequest","id":1417,"members":[{"constant":false,"id":1412,"mutability":"mutable","name":"owner","nameLocation":"461:5:3","nodeType":"VariableDeclaration","scope":1417,"src":"453:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1411,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1414,"mutability":"mutable","name":"device","nameLocation":"484:6:3","nodeType":"VariableDeclaration","scope":1417,"src":"476:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1413,"name":"address","nodeType":"ElementaryTypeName","src":"476:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1416,"mutability":"mutable","name":"issuedAt","nameLocation":"508:8:3","nodeType":"VariableDeclaration","scope":1417,"src":"500:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1415,"name":"uint256","nodeType":"ElementaryTypeName","src":"500:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"TokenRequest","nameLocation":"430:12:3","nodeType":"StructDefinition","scope":1579,"src":"423:100:3","visibility":"public"},{"body":{"id":1426,"nodeType":"Block","src":"567:39:3","statements":[{"expression":{"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1422,"name":"STATEMENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"577:9:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1423,"name":"_statement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"589:10:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"577:22:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1425,"nodeType":"ExpressionStatement","src":"577:22:3"}]},"id":1427,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1419,"mutability":"mutable","name":"_statement","nameLocation":"555:10:3","nodeType":"VariableDeclaration","scope":1427,"src":"541:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1418,"name":"string","nodeType":"ElementaryTypeName","src":"541:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"540:26:3"},"returnParameters":{"id":1421,"nodeType":"ParameterList","parameters":[],"src":"567:0:3"},"scope":1579,"src":"529:77:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1436,"nodeType":"Block","src":"675:41:3","statements":[{"expression":{"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1432,"name":"STATEMENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"685:9:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1433,"name":"newStatement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1429,"src":"697:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"685:24:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1435,"nodeType":"ExpressionStatement","src":"685:24:3"}]},"id":1437,"implemented":true,"kind":"function","modifiers":[],"name":"_updateStatement","nameLocation":"621:16:3","nodeType":"FunctionDefinition","parameters":{"id":1430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1429,"mutability":"mutable","name":"newStatement","nameLocation":"652:12:3","nodeType":"VariableDeclaration","scope":1437,"src":"638:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1428,"name":"string","nodeType":"ElementaryTypeName","src":"638:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"637:28:3"},"returnParameters":{"id":1431,"nodeType":"ParameterList","parameters":[],"src":"675:0:3"},"scope":1579,"src":"612:104:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1446,"nodeType":"Block","src":"780:42:3","statements":[{"expression":{"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1442,"name":"lengthOfToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"790:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1443,"name":"newLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"806:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"790:25:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1445,"nodeType":"ExpressionStatement","src":"790:25:3"}]},"id":1447,"implemented":true,"kind":"function","modifiers":[],"name":"_updateLengthOfToken","nameLocation":"731:20:3","nodeType":"FunctionDefinition","parameters":{"id":1440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1439,"mutability":"mutable","name":"newLength","nameLocation":"760:9:3","nodeType":"VariableDeclaration","scope":1447,"src":"752:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1438,"name":"uint256","nodeType":"ElementaryTypeName","src":"752:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"751:19:3"},"returnParameters":{"id":1441,"nodeType":"ParameterList","parameters":[],"src":"780:0:3"},"scope":1579,"src":"722:100:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1492,"nodeType":"Block","src":"958:323:3","statements":[{"assignments":[1458],"declarations":[{"constant":false,"id":1458,"mutability":"mutable","name":"msgHash","nameLocation":"976:7:3","nodeType":"VariableDeclaration","scope":1492,"src":"968:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"968:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1462,"initialValue":{"arguments":[{"id":1460,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"999:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}],"id":1459,"name":"hashForToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"986:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_TokenRequest_$1417_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (struct TokenAuthenticated.TokenRequest calldata) view returns (bytes32)"}},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"968:39:3"},{"assignments":[1464],"declarations":[{"constant":false,"id":1464,"mutability":"mutable","name":"signer","nameLocation":"1025:6:3","nodeType":"VariableDeclaration","scope":1492,"src":"1017:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1463,"name":"address","nodeType":"ElementaryTypeName","src":"1017:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1470,"initialValue":{"arguments":[{"id":1467,"name":"msgHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"1048:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1468,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"1057:9:3","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":1465,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"1034:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$535_$","typeString":"type(library ECDSA)"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:7:3","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":301,"src":"1034:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1034:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1017:50:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1472,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"1085:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1473,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"1095:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1103:5:3","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":1412,"src":"1095:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1085:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"696e76616c6964207369676e6174757265","id":1476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1110:19:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a","typeString":"literal_string \"invalid signature\""},"value":"invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a","typeString":"literal_string \"invalid signature\""}],"id":1471,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1077:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1077:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1478,"nodeType":"ExpressionStatement","src":"1077:53:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1480,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"1161:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1169:8:3","memberName":"issuedAt","nodeType":"MemberAccess","referencedDeclaration":1416,"src":"1161:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1482,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1181:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1187:6:3","memberName":"number","nodeType":"MemberAccess","src":"1181:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1484,"name":"lengthOfToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"1196:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1181:28:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1161:48:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265717565737420697320746f6f206f6c64","id":1487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1223:20:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5","typeString":"literal_string \"Request is too old\""},"value":"Request is too old"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5","typeString":"literal_string \"Request is too old\""}],"id":1479,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1140:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1140:113:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1489,"nodeType":"ExpressionStatement","src":"1140:113:3"},{"expression":{"hexValue":"74727565","id":1490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1270:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1456,"id":1491,"nodeType":"Return","src":"1263:11:3"}]},"id":1493,"implemented":true,"kind":"function","modifiers":[],"name":"authenticate","nameLocation":"837:12:3","nodeType":"FunctionDefinition","parameters":{"id":1453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1450,"mutability":"mutable","name":"request","nameLocation":"881:7:3","nodeType":"VariableDeclaration","scope":1493,"src":"859:29:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest"},"typeName":{"id":1449,"nodeType":"UserDefinedTypeName","pathNode":{"id":1448,"name":"TokenRequest","nameLocations":["859:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":1417,"src":"859:12:3"},"referencedDeclaration":1417,"src":"859:12:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_storage_ptr","typeString":"struct TokenAuthenticated.TokenRequest"}},"visibility":"internal"},{"constant":false,"id":1452,"mutability":"mutable","name":"signature","nameLocation":"913:9:3","nodeType":"VariableDeclaration","scope":1493,"src":"898:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1451,"name":"bytes","nodeType":"ElementaryTypeName","src":"898:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:79:3"},"returnParameters":{"id":1456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1493,"src":"952:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1454,"name":"bool","nodeType":"ElementaryTypeName","src":"952:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"951:6:3"},"scope":1579,"src":"828:453:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1522,"nodeType":"Block","src":"1433:194:3","statements":[{"expression":{"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1505,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"1443:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_memory_ptr","typeString":"struct TokenAuthenticated.TokenRequest memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1507,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"1487:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1508,"name":"device","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"1514:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1509,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1544:5:3","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1550:6:3","memberName":"number","nodeType":"MemberAccess","src":"1544:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1559:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1544:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1506,"name":"TokenRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"1453:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_TokenRequest_$1417_storage_ptr_$","typeString":"type(struct TokenAuthenticated.TokenRequest storage pointer)"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1480:5:3","1506:6:3","1534:8:3"],"names":["owner","device","issuedAt"],"nodeType":"FunctionCall","src":"1453:118:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_memory_ptr","typeString":"struct TokenAuthenticated.TokenRequest memory"}},"src":"1443:128:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_memory_ptr","typeString":"struct TokenAuthenticated.TokenRequest memory"}},"id":1515,"nodeType":"ExpressionStatement","src":"1443:128:3"},{"expression":{"components":[{"id":1516,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"1589:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_memory_ptr","typeString":"struct TokenAuthenticated.TokenRequest memory"}},{"arguments":[{"id":1518,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"1611:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_memory_ptr","typeString":"struct TokenAuthenticated.TokenRequest memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_TokenRequest_$1417_memory_ptr","typeString":"struct TokenAuthenticated.TokenRequest memory"}],"id":1517,"name":"stringToSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"1598:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_TokenRequest_$1417_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (struct TokenAuthenticated.TokenRequest memory) view returns (string memory)"}},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1598:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":1520,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1588:32:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_struct$_TokenRequest_$1417_memory_ptr_$_t_string_memory_ptr_$","typeString":"tuple(struct TokenAuthenticated.TokenRequest memory,string memory)"}},"functionReturnParameters":1504,"id":1521,"nodeType":"Return","src":"1581:39:3"}]},"functionSelector":"b6ad16a8","id":1523,"implemented":true,"kind":"function","modifiers":[],"name":"createTokenRequest","nameLocation":"1296:18:3","nodeType":"FunctionDefinition","parameters":{"id":1498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1495,"mutability":"mutable","name":"owner","nameLocation":"1332:5:3","nodeType":"VariableDeclaration","scope":1523,"src":"1324:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1494,"name":"address","nodeType":"ElementaryTypeName","src":"1324:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1497,"mutability":"mutable","name":"device","nameLocation":"1355:6:3","nodeType":"VariableDeclaration","scope":1523,"src":"1347:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1496,"name":"address","nodeType":"ElementaryTypeName","src":"1347:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1314:53:3"},"returnParameters":{"id":1504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1501,"mutability":"mutable","name":"request","nameLocation":"1409:7:3","nodeType":"VariableDeclaration","scope":1523,"src":"1389:27:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_memory_ptr","typeString":"struct TokenAuthenticated.TokenRequest"},"typeName":{"id":1500,"nodeType":"UserDefinedTypeName","pathNode":{"id":1499,"name":"TokenRequest","nameLocations":["1389:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":1417,"src":"1389:12:3"},"referencedDeclaration":1417,"src":"1389:12:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_storage_ptr","typeString":"struct TokenAuthenticated.TokenRequest"}},"visibility":"internal"},{"constant":false,"id":1503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1523,"src":"1418:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1502,"name":"string","nodeType":"ElementaryTypeName","src":"1418:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1388:44:3"},"scope":1579,"src":"1287:340:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1558,"nodeType":"Block","src":"1955:305:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":1536,"name":"STATEMENT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"2009:9:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"hexValue":"0a0a4d653a20","id":1537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2032:10:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262","typeString":"literal_string hex\"0a0a4d653a20\""},"value":"\n\nMe: "},{"arguments":[{"expression":{"id":1540,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"2076:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_memory_ptr","typeString":"struct TokenAuthenticated.TokenRequest memory"}},"id":1541,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2084:5:3","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":1412,"src":"2076:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1538,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"2056:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$174_$","typeString":"type(library Strings)"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2064:11:3","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":173,"src":"2056:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2056:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"0a4465766963653a20","id":1543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2104:12:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60","typeString":"literal_string hex\"0a4465766963653a20\""},"value":"\nDevice: "},{"arguments":[{"expression":{"id":1546,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"2150:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_memory_ptr","typeString":"struct TokenAuthenticated.TokenRequest memory"}},"id":1547,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2158:6:3","memberName":"device","nodeType":"MemberAccess","referencedDeclaration":1414,"src":"2150:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1544,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"2130:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$174_$","typeString":"type(library Strings)"}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2138:11:3","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":173,"src":"2130:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2130:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"0a4973737565642061743a20","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2179:15:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb","typeString":"literal_string hex\"0a4973737565642061743a20\""},"value":"\nIssued at: "},{"arguments":[{"expression":{"id":1552,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"2225:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_memory_ptr","typeString":"struct TokenAuthenticated.TokenRequest memory"}},"id":1553,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2233:8:3","memberName":"issuedAt","nodeType":"MemberAccess","referencedDeclaration":1416,"src":"2225:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1550,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"2208:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$174_$","typeString":"type(library Strings)"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2216:8:3","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":57,"src":"2208:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2208:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"},{"typeIdentifier":"t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262","typeString":"literal_string hex\"0a0a4d653a20\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60","typeString":"literal_string hex\"0a4465766963653a20\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb","typeString":"literal_string hex\"0a4973737565642061743a20\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1534,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1979:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1983:12:3","memberName":"encodePacked","nodeType":"MemberAccess","src":"1979:16:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1979:273:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1972:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1532,"name":"string","nodeType":"ElementaryTypeName","src":"1972:6:3","typeDescriptions":{}}},"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1972:281:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1531,"id":1557,"nodeType":"Return","src":"1965:288:3"}]},"documentation":{"id":1524,"nodeType":"StructuredDocumentation","src":"1634:213:3","text":" @dev Returns the string to sign of the provided WalletCreateRequest.\n @param request The WalletCreateRequest struct containing the owner address, device address, and issuedAt block number."},"id":1559,"implemented":true,"kind":"function","modifiers":[],"name":"stringToSign","nameLocation":"1861:12:3","nodeType":"FunctionDefinition","parameters":{"id":1528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1527,"mutability":"mutable","name":"request","nameLocation":"1903:7:3","nodeType":"VariableDeclaration","scope":1559,"src":"1883:27:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_memory_ptr","typeString":"struct TokenAuthenticated.TokenRequest"},"typeName":{"id":1526,"nodeType":"UserDefinedTypeName","pathNode":{"id":1525,"name":"TokenRequest","nameLocations":["1883:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":1417,"src":"1883:12:3"},"referencedDeclaration":1417,"src":"1883:12:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_storage_ptr","typeString":"struct TokenAuthenticated.TokenRequest"}},"visibility":"internal"}],"src":"1873:43:3"},"returnParameters":{"id":1531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1559,"src":"1940:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1529,"name":"string","nodeType":"ElementaryTypeName","src":"1940:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1939:15:3"},"scope":1579,"src":"1852:408:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1577,"nodeType":"Block","src":"2365:82:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1572,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"2430:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}],"id":1571,"name":"stringToSign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"2417:12:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_TokenRequest_$1417_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (struct TokenAuthenticated.TokenRequest memory) view returns (string memory)"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2417:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2411:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1569,"name":"bytes","nodeType":"ElementaryTypeName","src":"2411:5:3","typeDescriptions":{}}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2411:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1567,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"2382:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$535_$","typeString":"type(library ECDSA)"}},"id":1568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2388:22:3","memberName":"toEthSignedMessageHash","nodeType":"MemberAccess","referencedDeclaration":514,"src":"2382:28:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1566,"id":1576,"nodeType":"Return","src":"2375:65:3"}]},"id":1578,"implemented":true,"kind":"function","modifiers":[],"name":"hashForToken","nameLocation":"2275:12:3","nodeType":"FunctionDefinition","parameters":{"id":1563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1562,"mutability":"mutable","name":"request","nameLocation":"2319:7:3","nodeType":"VariableDeclaration","scope":1578,"src":"2297:29:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest"},"typeName":{"id":1561,"nodeType":"UserDefinedTypeName","pathNode":{"id":1560,"name":"TokenRequest","nameLocations":["2297:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":1417,"src":"2297:12:3"},"referencedDeclaration":1417,"src":"2297:12:3","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_storage_ptr","typeString":"struct TokenAuthenticated.TokenRequest"}},"visibility":"internal"}],"src":"2287:45:3"},"returnParameters":{"id":1566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1578,"src":"2356:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2356:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2355:9:3"},"scope":1579,"src":"2266:181:3","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1580,"src":"312:2137:3","usedErrors":[]}],"src":"33:2416:3"},"id":3},"contracts/WalletDeployer.sol":{"ast":{"absolutePath":"contracts/WalletDeployer.sol","exportedSymbols":{"ECDSA":[535],"Enum":[1809],"GnosisSafe":[1864],"IEnglishOwnerAdder":[1606],"IProxyFactory":[1595],"Math":[1400],"Strings":[174],"TokenAuthenticated":[1579],"WalletDeployer":[1803]},"id":1804,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1581,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"33:24:4"},{"absolutePath":"contracts/TokenAuthenticated.sol","file":"./TokenAuthenticated.sol","id":1582,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1804,"sourceUnit":1580,"src":"59:34:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IGnosisSafe.sol","file":"./interfaces/IGnosisSafe.sol","id":1583,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1804,"sourceUnit":1865,"src":"94:38:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IProxyFactory","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1595,"linearizedBaseContracts":[1595],"name":"IProxyFactory","nameLocation":"178:13:4","nodeType":"ContractDefinition","nodes":[{"functionSelector":"1688f0b9","id":1594,"implemented":false,"kind":"function","modifiers":[],"name":"createProxyWithNonce","nameLocation":"207:20:4","nodeType":"FunctionDefinition","parameters":{"id":1590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1585,"mutability":"mutable","name":"_mastercopy","nameLocation":"245:11:4","nodeType":"VariableDeclaration","scope":1594,"src":"237:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1584,"name":"address","nodeType":"ElementaryTypeName","src":"237:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1587,"mutability":"mutable","name":"initializer","nameLocation":"279:11:4","nodeType":"VariableDeclaration","scope":1594,"src":"266:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1586,"name":"bytes","nodeType":"ElementaryTypeName","src":"266:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1589,"mutability":"mutable","name":"saltNonce","nameLocation":"308:9:4","nodeType":"VariableDeclaration","scope":1594,"src":"300:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1588,"name":"uint256","nodeType":"ElementaryTypeName","src":"300:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"227:96:4"},"returnParameters":{"id":1593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1592,"mutability":"mutable","name":"proxy","nameLocation":"350:5:4","nodeType":"VariableDeclaration","scope":1594,"src":"342:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1591,"name":"address","nodeType":"ElementaryTypeName","src":"342:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"341:15:4"},"scope":1595,"src":"198:159:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1804,"src":"168:191:4","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IEnglishOwnerAdder","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1606,"linearizedBaseContracts":[1606],"name":"IEnglishOwnerAdder","nameLocation":"371:18:4","nodeType":"ContractDefinition","nodes":[{"functionSelector":"724e59c3","id":1605,"implemented":false,"kind":"function","modifiers":[],"name":"addOwner","nameLocation":"405:8:4","nodeType":"FunctionDefinition","parameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1597,"mutability":"mutable","name":"safe","nameLocation":"431:4:4","nodeType":"VariableDeclaration","scope":1605,"src":"423:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1596,"name":"address","nodeType":"ElementaryTypeName","src":"423:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1600,"mutability":"mutable","name":"request","nameLocation":"486:7:4","nodeType":"VariableDeclaration","scope":1605,"src":"445:48:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest"},"typeName":{"id":1599,"nodeType":"UserDefinedTypeName","pathNode":{"id":1598,"name":"TokenAuthenticated.TokenRequest","nameLocations":["445:18:4","464:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":1417,"src":"445:31:4"},"referencedDeclaration":1417,"src":"445:31:4","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_storage_ptr","typeString":"struct TokenAuthenticated.TokenRequest"}},"visibility":"internal"},{"constant":false,"id":1602,"mutability":"mutable","name":"signature","nameLocation":"518:9:4","nodeType":"VariableDeclaration","scope":1605,"src":"503:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1601,"name":"bytes","nodeType":"ElementaryTypeName","src":"503:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"413:120:4"},"returnParameters":{"id":1604,"nodeType":"ParameterList","parameters":[],"src":"542:0:4"},"scope":1606,"src":"396:147:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1804,"src":"361:184:4","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":1608,"name":"TokenAuthenticated","nameLocations":["874:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":1579,"src":"874:18:4"},"id":1609,"nodeType":"InheritanceSpecifier","src":"874:18:4"}],"canonicalName":"WalletDeployer","contractDependencies":[],"contractKind":"contract","documentation":{"id":1607,"nodeType":"StructuredDocumentation","src":"547:299:4","text":" @title WalletDeployer\n @dev A contract that allows a user to create a Gnosis Safe wallet by signing an English message.\n      It sets up a a safe by calling the SafeStetup.sol contract which adds the correct modules and the TokenRequest\n      device and owner as owners to the safe."},"fullyImplemented":true,"id":1803,"linearizedBaseContracts":[1803,1579],"name":"WalletDeployer","nameLocation":"856:14:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"85e1f4d0","id":1611,"mutability":"mutable","name":"CHAIN_ID","nameLocation":"913:8:4","nodeType":"VariableDeclaration","scope":1803,"src":"899:22:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1610,"name":"string","nodeType":"ElementaryTypeName","src":"899:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"id":1613,"mutability":"immutable","name":"_gnosisSafeContract","nameLocation":"954:19:4","nodeType":"VariableDeclaration","scope":1803,"src":"928:45:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1612,"name":"address","nodeType":"ElementaryTypeName","src":"928:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":1615,"mutability":"immutable","name":"_gnosisSafeProxyFactory","nameLocation":"1005:23:4","nodeType":"VariableDeclaration","scope":1803,"src":"979:49:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1614,"name":"address","nodeType":"ElementaryTypeName","src":"979:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":1617,"mutability":"immutable","name":"_defaultFallackhandler","nameLocation":"1060:22:4","nodeType":"VariableDeclaration","scope":1803,"src":"1034:48:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1616,"name":"address","nodeType":"ElementaryTypeName","src":"1034:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":1619,"mutability":"immutable","name":"_setupHandler","nameLocation":"1115:13:4","nodeType":"VariableDeclaration","scope":1803,"src":"1089:39:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1618,"name":"address","nodeType":"ElementaryTypeName","src":"1089:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":true,"id":1627,"mutability":"constant","name":"SETUP_DATA","nameLocation":"1159:10:4","nodeType":"VariableDeclaration","scope":1803,"src":"1135:65:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1620,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1135:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"arguments":[{"arguments":[{"hexValue":"73657475702829","id":1624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1189:9:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba0bba4095ecad0767dabb900dd55e5814c8416ec02c5ddd7e9946fb3c22df0f","typeString":"literal_string \"setup()\""},"value":"setup()"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ba0bba4095ecad0767dabb900dd55e5814c8416ec02c5ddd7e9946fb3c22df0f","typeString":"literal_string \"setup()\""}],"id":1623,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1179:9:4","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1179:20:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1172:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":1621,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1172:6:4","typeDescriptions":{}}},"id":1626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1172:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"private"},{"constant":false,"functionSelector":"5e619a4a","id":1631,"mutability":"mutable","name":"ownerToSafe","nameLocation":"1284:11:4","nodeType":"VariableDeclaration","scope":1803,"src":"1249:46:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":1630,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1628,"name":"address","nodeType":"ElementaryTypeName","src":"1257:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1249:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1629,"name":"address","nodeType":"ElementaryTypeName","src":"1268:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":false,"functionSelector":"06634e88","id":1635,"mutability":"mutable","name":"safeToOwner","nameLocation":"1336:11:4","nodeType":"VariableDeclaration","scope":1803,"src":"1301:46:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":1634,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1632,"name":"address","nodeType":"ElementaryTypeName","src":"1309:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1301:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1633,"name":"address","nodeType":"ElementaryTypeName","src":"1320:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"body":{"id":1673,"nodeType":"Block","src":"1633:262:4","statements":[{"expression":{"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1649,"name":"CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"1643:8:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":1652,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1671:5:4","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1677:7:4","memberName":"chainid","nodeType":"MemberAccess","src":"1671:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1650,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"1654:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$174_$","typeString":"type(library Strings)"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1662:8:4","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":57,"src":"1654:16:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1643:42:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1656,"nodeType":"ExpressionStatement","src":"1643:42:4"},{"expression":{"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1657,"name":"_gnosisSafeContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"1695:19:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1658,"name":"gnosisSafeContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1637,"src":"1717:18:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1695:40:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1660,"nodeType":"ExpressionStatement","src":"1695:40:4"},{"expression":{"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1661,"name":"_gnosisSafeProxyFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"1745:23:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1662,"name":"gnosisSafeProxyFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"1771:22:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1745:48:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1664,"nodeType":"ExpressionStatement","src":"1745:48:4"},{"expression":{"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1665,"name":"_defaultFallackhandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"1803:22:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1666,"name":"defaultFallbackHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"1828:22:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1803:47:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1668,"nodeType":"ExpressionStatement","src":"1803:47:4"},{"expression":{"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1669,"name":"_setupHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"1860:13:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1670,"name":"setupHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1643,"src":"1876:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1860:28:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1672,"nodeType":"ExpressionStatement","src":"1860:28:4"}]},"id":1674,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"4920617574686f72697a6520746869732064657669636520746f2073656e64207472616e73616374696f6e73206f6e206d7920626568616c662e","id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1558:60:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_a7f8dc296605a91e2494b19fe37347ec15a2b43ea8d6a517cb64ff599fc1206c","typeString":"literal_string \"I authorize this device to send transactions on my behalf.\""},"value":"I authorize this device to send transactions on my behalf."}],"id":1647,"kind":"baseConstructorSpecifier","modifierName":{"id":1645,"name":"TokenAuthenticated","nameLocations":["1526:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":1579,"src":"1526:18:4"},"nodeType":"ModifierInvocation","src":"1526:102:4"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1637,"mutability":"mutable","name":"gnosisSafeContract","nameLocation":"1383:18:4","nodeType":"VariableDeclaration","scope":1674,"src":"1375:26:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1636,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1639,"mutability":"mutable","name":"gnosisSafeProxyFactory","nameLocation":"1419:22:4","nodeType":"VariableDeclaration","scope":1674,"src":"1411:30:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1638,"name":"address","nodeType":"ElementaryTypeName","src":"1411:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1641,"mutability":"mutable","name":"defaultFallbackHandler","nameLocation":"1459:22:4","nodeType":"VariableDeclaration","scope":1674,"src":"1451:30:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1640,"name":"address","nodeType":"ElementaryTypeName","src":"1451:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1643,"mutability":"mutable","name":"setupHandler","nameLocation":"1499:12:4","nodeType":"VariableDeclaration","scope":1674,"src":"1491:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1642,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1365:152:4"},"returnParameters":{"id":1648,"nodeType":"ParameterList","parameters":[],"src":"1633:0:4"},"scope":1803,"src":"1354:541:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1801,"nodeType":"Block","src":"2939:1988:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1686,"name":"ownerToSafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"2970:11:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1689,"indexExpression":{"expression":{"id":1687,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2982:7:4","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2990:5:4","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":1412,"src":"2982:13:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2970:26:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3000:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1690,"name":"address","nodeType":"ElementaryTypeName","src":"3000:7:4","typeDescriptions":{}}},"id":1693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3000:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2970:40:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666520616c72656164792065786973747320666f72206f776e6572","id":1695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3024:31:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775","typeString":"literal_string \"Safe already exists for owner\""},"value":"Safe already exists for owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775","typeString":"literal_string \"Safe already exists for owner\""}],"id":1685,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2949:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2949:116:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1697,"nodeType":"ExpressionStatement","src":"2949:116:4"},{"expression":{"arguments":[{"arguments":[{"id":1700,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"3096:7:4","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}},{"id":1701,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"3105:9:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1699,"name":"authenticate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"3083:12:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_TokenRequest_$1417_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bool_$","typeString":"function (struct TokenAuthenticated.TokenRequest calldata,bytes calldata) view returns (bool)"}},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3083:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1698,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3075:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3075:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1704,"nodeType":"ExpressionStatement","src":"3075:41:4"},{"assignments":[1709],"declarations":[{"constant":false,"id":1709,"mutability":"mutable","name":"owners","nameLocation":"3609:6:4","nodeType":"VariableDeclaration","scope":1801,"src":"3592:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1707,"name":"address","nodeType":"ElementaryTypeName","src":"3592:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1708,"nodeType":"ArrayTypeName","src":"3592:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":1715,"initialValue":{"arguments":[{"hexValue":"31","id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3632:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3618:13:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":1710,"name":"address","nodeType":"ElementaryTypeName","src":"3622:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1711,"nodeType":"ArrayTypeName","src":"3622:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":1714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3618:16:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3592:42:4"},{"expression":{"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1716,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1709,"src":"3644:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":1718,"indexExpression":{"hexValue":"30","id":1717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3651:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3644:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1719,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"3656:7:4","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3664:5:4","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":1412,"src":"3656:13:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3644:25:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1722,"nodeType":"ExpressionStatement","src":"3644:25:4"},{"assignments":[1724],"declarations":[{"constant":false,"id":1724,"mutability":"mutable","name":"initializer","nameLocation":"3693:11:4","nodeType":"VariableDeclaration","scope":1801,"src":"3680:24:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1723,"name":"bytes","nodeType":"ElementaryTypeName","src":"3680:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1756,"initialValue":{"arguments":[{"hexValue":"736574757028616464726573735b5d2c75696e743235362c616464726573732c62797465732c616464726573732c616464726573732c75696e743235362c6164647265737329","id":1727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3744:72:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_b63e800d34f56a9238e5b86a8547a23865164bec371bede606e899182da118bf","typeString":"literal_string \"setup(address[],uint256,address,bytes,address,address,uint256,address)\""},"value":"setup(address[],uint256,address,bytes,address,address,uint256,address)"},{"id":1728,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1709,"src":"3830:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"arguments":[{"hexValue":"31","id":1731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3902:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3894:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1729,"name":"uint256","nodeType":"ElementaryTypeName","src":"3894:7:4","typeDescriptions":{}}},"id":1732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1733,"name":"_setupHandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"3980:13:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"73657475702829","id":1736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4055:9:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba0bba4095ecad0767dabb900dd55e5814c8416ec02c5ddd7e9946fb3c22df0f","typeString":"literal_string \"setup()\""},"value":"setup()"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ba0bba4095ecad0767dabb900dd55e5814c8416ec02c5ddd7e9946fb3c22df0f","typeString":"literal_string \"setup()\""}],"expression":{"id":1734,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4031:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4035:19:4","memberName":"encodeWithSignature","nodeType":"MemberAccess","src":"4031:23:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (string memory) pure returns (bytes memory)"}},"id":1737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4031:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1738,"name":"_defaultFallackhandler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"4100:22:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4180:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4172:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1739,"name":"address","nodeType":"ElementaryTypeName","src":"4172:7:4","typeDescriptions":{}}},"id":1742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4172:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4237:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4229:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1743,"name":"address","nodeType":"ElementaryTypeName","src":"4229:7:4","typeDescriptions":{}}},"id":1746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4229:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4294:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1748,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4286:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1747,"name":"uint256","nodeType":"ElementaryTypeName","src":"4286:7:4","typeDescriptions":{}}},"id":1750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4286:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":1753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4349:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1752,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4341:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1751,"name":"address","nodeType":"ElementaryTypeName","src":"4341:7:4","typeDescriptions":{}}},"id":1754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4341:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_b63e800d34f56a9238e5b86a8547a23865164bec371bede606e899182da118bf","typeString":"literal_string \"setup(address[],uint256,address,bytes,address,address,uint256,address)\""},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1725,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3707:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3711:19:4","memberName":"encodeWithSignature","nodeType":"MemberAccess","src":"3707:23:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (string memory) pure returns (bytes memory)"}},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3707:694:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3680:721:4"},{"assignments":[1758],"declarations":[{"constant":false,"id":1758,"mutability":"mutable","name":"proxyAddr","nameLocation":"4420:9:4","nodeType":"VariableDeclaration","scope":1801,"src":"4412:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1757,"name":"address","nodeType":"ElementaryTypeName","src":"4412:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1768,"initialValue":{"arguments":[{"id":1763,"name":"_gnosisSafeContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"4522:19:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1764,"name":"initializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"4559:11:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":1765,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4588:5:4","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:7:4","memberName":"chainid","nodeType":"MemberAccess","src":"4588:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1760,"name":"_gnosisSafeProxyFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"4446:23:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1759,"name":"IProxyFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"4432:13:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IProxyFactory_$1595_$","typeString":"type(contract IProxyFactory)"}},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4432:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProxyFactory_$1595","typeString":"contract IProxyFactory"}},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4484:20:4","memberName":"createProxyWithNonce","nodeType":"MemberAccess","referencedDeclaration":1594,"src":"4432:72:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$","typeString":"function (address,bytes memory,uint256) external returns (address)"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4432:183:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4412:203:4"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1769,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"4630:7:4","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4638:6:4","memberName":"device","nodeType":"MemberAccess","referencedDeclaration":1414,"src":"4630:14:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4656:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4648:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1771,"name":"address","nodeType":"ElementaryTypeName","src":"4648:7:4","typeDescriptions":{}}},"id":1774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4648:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4630:28:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1786,"nodeType":"IfStatement","src":"4626:198:4","trueBody":{"id":1785,"nodeType":"Block","src":"4660:164:4","statements":[{"expression":{"arguments":[{"id":1780,"name":"proxyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"4738:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1781,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"4765:7:4","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}},{"id":1782,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1680,"src":"4790:9:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"id":1777,"name":"englishOwnerAdder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"4693:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1776,"name":"IEnglishOwnerAdder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"4674:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IEnglishOwnerAdder_$1606_$","typeString":"type(contract IEnglishOwnerAdder)"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4674:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEnglishOwnerAdder_$1606","typeString":"contract IEnglishOwnerAdder"}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4712:8:4","memberName":"addOwner","nodeType":"MemberAccess","referencedDeclaration":1605,"src":"4674:46:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_struct$_TokenRequest_$1417_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,struct TokenAuthenticated.TokenRequest memory,bytes memory) external"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4674:139:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1784,"nodeType":"ExpressionStatement","src":"4674:139:4"}]}},{"expression":{"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1787,"name":"ownerToSafe","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1631,"src":"4834:11:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1790,"indexExpression":{"expression":{"id":1788,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"4846:7:4","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4854:5:4","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":1412,"src":"4846:13:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4834:26:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1791,"name":"proxyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"4863:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4834:38:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1793,"nodeType":"ExpressionStatement","src":"4834:38:4"},{"expression":{"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1794,"name":"safeToOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"4882:11:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":1796,"indexExpression":{"id":1795,"name":"proxyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"4894:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4882:22:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1797,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"4907:7:4","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest calldata"}},"id":1798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4915:5:4","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":1412,"src":"4907:13:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4882:38:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1800,"nodeType":"ExpressionStatement","src":"4882:38:4"}]},"documentation":{"id":1675,"nodeType":"StructuredDocumentation","src":"2476:317:4","text":" @dev Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.\n @param request The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.\n @param signature The signature signed by the owner to verify ownership."},"functionSelector":"7a1238a9","id":1802,"implemented":true,"kind":"function","modifiers":[],"name":"createSafe","nameLocation":"2807:10:4","nodeType":"FunctionDefinition","parameters":{"id":1683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1678,"mutability":"mutable","name":"request","nameLocation":"2849:7:4","nodeType":"VariableDeclaration","scope":1802,"src":"2827:29:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_calldata_ptr","typeString":"struct TokenAuthenticated.TokenRequest"},"typeName":{"id":1677,"nodeType":"UserDefinedTypeName","pathNode":{"id":1676,"name":"TokenRequest","nameLocations":["2827:12:4"],"nodeType":"IdentifierPath","referencedDeclaration":1417,"src":"2827:12:4"},"referencedDeclaration":1417,"src":"2827:12:4","typeDescriptions":{"typeIdentifier":"t_struct$_TokenRequest_$1417_storage_ptr","typeString":"struct TokenAuthenticated.TokenRequest"}},"visibility":"internal"},{"constant":false,"id":1680,"mutability":"mutable","name":"signature","nameLocation":"2881:9:4","nodeType":"VariableDeclaration","scope":1802,"src":"2866:24:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1679,"name":"bytes","nodeType":"ElementaryTypeName","src":"2866:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1682,"mutability":"mutable","name":"englishOwnerAdder","nameLocation":"2908:17:4","nodeType":"VariableDeclaration","scope":1802,"src":"2900:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1681,"name":"address","nodeType":"ElementaryTypeName","src":"2900:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2817:114:4"},"returnParameters":{"id":1684,"nodeType":"ParameterList","parameters":[],"src":"2939:0:4"},"scope":1803,"src":"2798:2129:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":1804,"src":"847:4082:4","usedErrors":[]}],"src":"33:5444:4"},"id":4},"contracts/interfaces/IGnosisSafe.sol":{"ast":{"absolutePath":"contracts/interfaces/IGnosisSafe.sol","exportedSymbols":{"Enum":[1809],"GnosisSafe":[1864]},"id":1865,"nodeType":"SourceUnit","nodes":[{"id":1805,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"0:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"Enum","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1809,"linearizedBaseContracts":[1809],"name":"Enum","nameLocation":"35:4:5","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Enum.Operation","id":1808,"members":[{"id":1806,"name":"Call","nameLocation":"71:4:5","nodeType":"EnumValue","src":"71:4:5"},{"id":1807,"name":"DelegateCall","nameLocation":"85:12:5","nodeType":"EnumValue","src":"85:12:5"}],"name":"Operation","nameLocation":"51:9:5","nodeType":"EnumDefinition","src":"46:57:5"}],"scope":1865,"src":"26:79:5","usedErrors":[]},{"abstract":false,"baseContracts":[],"canonicalName":"GnosisSafe","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1864,"linearizedBaseContracts":[1864],"name":"GnosisSafe","nameLocation":"117:10:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"134:325:5","text":"@dev Allows a Module to execute a Safe transaction without any further confirmations.\n @param to Destination address of module transaction.\n @param value Ether value of module transaction.\n @param data Data payload of module transaction.\n @param operation Operation type of module transaction."},"functionSelector":"468721a7","id":1824,"implemented":false,"kind":"function","modifiers":[],"name":"execTransactionFromModule","nameLocation":"473:25:5","nodeType":"FunctionDefinition","parameters":{"id":1820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"to","nameLocation":"516:2:5","nodeType":"VariableDeclaration","scope":1824,"src":"508:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1811,"name":"address","nodeType":"ElementaryTypeName","src":"508:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1814,"mutability":"mutable","name":"value","nameLocation":"536:5:5","nodeType":"VariableDeclaration","scope":1824,"src":"528:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1813,"name":"uint256","nodeType":"ElementaryTypeName","src":"528:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1816,"mutability":"mutable","name":"data","nameLocation":"566:4:5","nodeType":"VariableDeclaration","scope":1824,"src":"551:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1815,"name":"bytes","nodeType":"ElementaryTypeName","src":"551:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1819,"mutability":"mutable","name":"operation","nameLocation":"595:9:5","nodeType":"VariableDeclaration","scope":1824,"src":"580:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$1808","typeString":"enum Enum.Operation"},"typeName":{"id":1818,"nodeType":"UserDefinedTypeName","pathNode":{"id":1817,"name":"Enum.Operation","nameLocations":["580:4:5","585:9:5"],"nodeType":"IdentifierPath","referencedDeclaration":1808,"src":"580:14:5"},"referencedDeclaration":1808,"src":"580:14:5","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$1808","typeString":"enum Enum.Operation"}},"visibility":"internal"}],"src":"498:112:5"},"returnParameters":{"id":1823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1822,"mutability":"mutable","name":"success","nameLocation":"634:7:5","nodeType":"VariableDeclaration","scope":1824,"src":"629:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1821,"name":"bool","nodeType":"ElementaryTypeName","src":"629:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"628:14:5"},"scope":1864,"src":"464:179:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"0d582f13","id":1831,"implemented":false,"kind":"function","modifiers":[],"name":"addOwnerWithThreshold","nameLocation":"658:21:5","nodeType":"FunctionDefinition","parameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"owner","nameLocation":"688:5:5","nodeType":"VariableDeclaration","scope":1831,"src":"680:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1825,"name":"address","nodeType":"ElementaryTypeName","src":"680:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1828,"mutability":"mutable","name":"threshold","nameLocation":"703:9:5","nodeType":"VariableDeclaration","scope":1831,"src":"695:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1827,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"679:34:5"},"returnParameters":{"id":1830,"nodeType":"ParameterList","parameters":[],"src":"722:0:5"},"scope":1864,"src":"649:74:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f8dc5dd9","id":1840,"implemented":false,"kind":"function","modifiers":[],"name":"removeOwner","nameLocation":"737:11:5","nodeType":"FunctionDefinition","parameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"prevOwner","nameLocation":"757:9:5","nodeType":"VariableDeclaration","scope":1840,"src":"749:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1832,"name":"address","nodeType":"ElementaryTypeName","src":"749:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1835,"mutability":"mutable","name":"owner","nameLocation":"776:5:5","nodeType":"VariableDeclaration","scope":1840,"src":"768:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1834,"name":"address","nodeType":"ElementaryTypeName","src":"768:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1837,"mutability":"mutable","name":"threshold","nameLocation":"791:9:5","nodeType":"VariableDeclaration","scope":1840,"src":"783:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1836,"name":"uint256","nodeType":"ElementaryTypeName","src":"783:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"748:53:5"},"returnParameters":{"id":1839,"nodeType":"ParameterList","parameters":[],"src":"810:0:5"},"scope":1864,"src":"728:83:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e75235b8","id":1845,"implemented":false,"kind":"function","modifiers":[],"name":"getThreshold","nameLocation":"826:12:5","nodeType":"FunctionDefinition","parameters":{"id":1841,"nodeType":"ParameterList","parameters":[],"src":"838:2:5"},"returnParameters":{"id":1844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1845,"src":"864:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1842,"name":"uint256","nodeType":"ElementaryTypeName","src":"864:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"863:9:5"},"scope":1864,"src":"817:56:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a0e67e2b","id":1851,"implemented":false,"kind":"function","modifiers":[],"name":"getOwners","nameLocation":"888:9:5","nodeType":"FunctionDefinition","parameters":{"id":1846,"nodeType":"ParameterList","parameters":[],"src":"897:2:5"},"returnParameters":{"id":1850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1849,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1851,"src":"923:16:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1847,"name":"address","nodeType":"ElementaryTypeName","src":"923:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1848,"nodeType":"ArrayTypeName","src":"923:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"922:18:5"},"scope":1864,"src":"879:62:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"2f54bf6e","id":1858,"implemented":false,"kind":"function","modifiers":[],"name":"isOwner","nameLocation":"956:7:5","nodeType":"FunctionDefinition","parameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1853,"mutability":"mutable","name":"owner","nameLocation":"972:5:5","nodeType":"VariableDeclaration","scope":1858,"src":"964:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1852,"name":"address","nodeType":"ElementaryTypeName","src":"964:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"963:15:5"},"returnParameters":{"id":1857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1858,"src":"1002:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1855,"name":"bool","nodeType":"ElementaryTypeName","src":"1002:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1001:6:5"},"scope":1864,"src":"947:61:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"610b5925","id":1863,"implemented":false,"kind":"function","modifiers":[],"name":"enableModule","nameLocation":"1023:12:5","nodeType":"FunctionDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1860,"mutability":"mutable","name":"module","nameLocation":"1044:6:5","nodeType":"VariableDeclaration","scope":1863,"src":"1036:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1859,"name":"address","nodeType":"ElementaryTypeName","src":"1036:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1035:16:5"},"returnParameters":{"id":1862,"nodeType":"ParameterList","parameters":[],"src":"1060:0:5"},"scope":1864,"src":"1014:47:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1865,"src":"107:956:5","usedErrors":[]}],"src":"0:1064:5"},"id":5}},"contracts":{"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204f6fcee844cee868fddc553ea683831fa0f88e7627b0f1ed53b85758ca9e079a64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F PUSH16 0xCEE844CEE868FDDC553EA683831FA0F8 DUP15 PUSH23 0x27B0F1ED53B85758CA9E079A64736F6C63430008130033 ","sourceMap":"188:2065:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204f6fcee844cee868fddc553ea683831fa0f88e7627b0f1ed53b85758ca9e079a64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4F PUSH16 0xCEE844CEE868FDDC553EA683831FA0F8 DUP15 PUSH23 0x27B0F1ED53B85758CA9E079A64736F6C63430008130033 ","sourceMap":"188:2065:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220626297f92319ab765fc10da58dc547990232a88d8350755c83d2a6e841525c8064736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0x6297F9 0x23 NOT 0xAB PUSH23 0x5FC10DA58DC547990232A88D8350755C83D2A6E841525C DUP1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"369:8168:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220626297f92319ab765fc10da58dc547990232a88d8350755c83d2a6e841525c8064736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH3 0x6297F9 0x23 NOT 0xAB PUSH23 0x5FC10DA58DC547990232A88D8350755C83D2A6E841525C DUP1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"369:8168:1:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9ed6dd1d6acc358b17594139318d95fb346b7a26ec39b0f5f81e943601d4bc364736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 0xED PUSH14 0xD1D6ACC358B17594139318D95FB3 CHAINID 0xB7 LOG2 PUSH15 0xC39B0F5F81E943601D4BC364736F6C PUSH4 0x43000813 STOP CALLER ","sourceMap":"202:12302:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9ed6dd1d6acc358b17594139318d95fb346b7a26ec39b0f5f81e943601d4bc364736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 0xED PUSH14 0xD1D6ACC358B17594139318D95FB3 CHAINID 0xB7 LOG2 PUSH15 0xC39B0F5F81E943601D4BC364736F6C PUSH4 0x43000813 STOP CALLER ","sourceMap":"202:12302:2:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/TokenAuthenticated.sol":{"TokenAuthenticated":{"abi":[{"inputs":[{"internalType":"string","name":"_statement","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"STATEMENT","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"device","type":"address"}],"name":"createTokenRequest","outputs":[{"components":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"device","type":"address"},{"internalType":"uint256","name":"issuedAt","type":"uint256"}],"internalType":"struct TokenAuthenticated.TokenRequest","name":"request","type":"tuple"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lengthOfToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"allow a user to authenticate with a signed english token.","kind":"dev","methods":{},"title":"TokenAuthenticated","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1427":{"entryPoint":null,"id":1427,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":362,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":437,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":488,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":233,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":85,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":264,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":680,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":569,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1001,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":816,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":962,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":836,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1156,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":318,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":701,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":627,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1126,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":179,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":826,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1094,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":580,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":132,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":876,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":105,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":110,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":100,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":95,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":115,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":717,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1081,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":934,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":730,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":886,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":929,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8245:6","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:6","statements":[{"nodeType":"YulAssignment","src":"57:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:6"},"nodeType":"YulFunctionCall","src":"67:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:6"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:6","type":""}],"src":"7:75:6"},{"body":{"nodeType":"YulBlock","src":"177:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:6"},"nodeType":"YulFunctionCall","src":"187:12:6"},"nodeType":"YulExpressionStatement","src":"187:12:6"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:6"},{"body":{"nodeType":"YulBlock","src":"300:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:6"},"nodeType":"YulFunctionCall","src":"310:12:6"},"nodeType":"YulExpressionStatement","src":"310:12:6"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:6"},{"body":{"nodeType":"YulBlock","src":"423:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:6"},"nodeType":"YulFunctionCall","src":"433:12:6"},"nodeType":"YulExpressionStatement","src":"433:12:6"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:6"},{"body":{"nodeType":"YulBlock","src":"546:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:6"},"nodeType":"YulFunctionCall","src":"556:12:6"},"nodeType":"YulExpressionStatement","src":"556:12:6"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:6"},{"body":{"nodeType":"YulBlock","src":"628:54:6","statements":[{"nodeType":"YulAssignment","src":"638:38:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:6"},"nodeType":"YulFunctionCall","src":"652:14:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:6","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:6"},"nodeType":"YulFunctionCall","src":"668:7:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:6"},"nodeType":"YulFunctionCall","src":"648:28:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:6"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:6","type":""}],"src":"580:102:6"},{"body":{"nodeType":"YulBlock","src":"716:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:6"},"nodeType":"YulFunctionCall","src":"726:88:6"},"nodeType":"YulExpressionStatement","src":"726:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:6","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:6"},"nodeType":"YulFunctionCall","src":"823:15:6"},"nodeType":"YulExpressionStatement","src":"823:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:6"},"nodeType":"YulFunctionCall","src":"847:15:6"},"nodeType":"YulExpressionStatement","src":"847:15:6"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:6"},{"body":{"nodeType":"YulBlock","src":"917:238:6","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:6","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:6"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:6"},"nodeType":"YulFunctionCall","src":"957:27:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:6"},"nodeType":"YulFunctionCall","src":"945:40:6"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:6"},"nodeType":"YulFunctionCall","src":"1098:18:6"},"nodeType":"YulExpressionStatement","src":"1098:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:6"},"nodeType":"YulFunctionCall","src":"1036:34:6"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:6"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:6"},"nodeType":"YulFunctionCall","src":"1072:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:6"},"nodeType":"YulFunctionCall","src":"1033:62:6"},"nodeType":"YulIf","src":"1030:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:6","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:6"},"nodeType":"YulFunctionCall","src":"1127:22:6"},"nodeType":"YulExpressionStatement","src":"1127:22:6"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:6","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:6","type":""}],"src":"874:281:6"},{"body":{"nodeType":"YulBlock","src":"1202:88:6","statements":[{"nodeType":"YulAssignment","src":"1212:30:6","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:6"},"nodeType":"YulFunctionCall","src":"1222:20:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:6"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:6"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:6"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:6"},"nodeType":"YulFunctionCall","src":"1251:33:6"},"nodeType":"YulExpressionStatement","src":"1251:33:6"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:6","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:6","type":""}],"src":"1161:129:6"},{"body":{"nodeType":"YulBlock","src":"1363:241:6","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:6"},"nodeType":"YulFunctionCall","src":"1470:18:6"},"nodeType":"YulExpressionStatement","src":"1470:18:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:6"},"nodeType":"YulFunctionCall","src":"1437:30:6"},"nodeType":"YulIf","src":"1434:56:6"},{"nodeType":"YulAssignment","src":"1500:37:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:6"},"nodeType":"YulFunctionCall","src":"1508:29:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:6"}]},{"nodeType":"YulAssignment","src":"1574:23:6","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:6"},"nodeType":"YulFunctionCall","src":"1582:15:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:6"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:6","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:6","type":""}],"src":"1296:308:6"},{"body":{"nodeType":"YulBlock","src":"1672:184:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1682:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1691:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1686:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"1751:63:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1776:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"1781:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:6"},"nodeType":"YulFunctionCall","src":"1772:11:6"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1795:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"1800:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1791:3:6"},"nodeType":"YulFunctionCall","src":"1791:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1785:5:6"},"nodeType":"YulFunctionCall","src":"1785:18:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1765:6:6"},"nodeType":"YulFunctionCall","src":"1765:39:6"},"nodeType":"YulExpressionStatement","src":"1765:39:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"1715:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1709:2:6"},"nodeType":"YulFunctionCall","src":"1709:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1723:19:6","statements":[{"nodeType":"YulAssignment","src":"1725:15:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1734:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"1737:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1730:3:6"},"nodeType":"YulFunctionCall","src":"1730:10:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1725:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"1705:3:6","statements":[]},"src":"1701:113:6"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1834:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"1839:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1830:3:6"},"nodeType":"YulFunctionCall","src":"1830:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"1848:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1823:6:6"},"nodeType":"YulFunctionCall","src":"1823:27:6"},"nodeType":"YulExpressionStatement","src":"1823:27:6"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1654:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1659:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"1664:6:6","type":""}],"src":"1610:246:6"},{"body":{"nodeType":"YulBlock","src":"1957:339:6","statements":[{"nodeType":"YulAssignment","src":"1967:75:6","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2034:6:6"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1992:41:6"},"nodeType":"YulFunctionCall","src":"1992:49:6"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1976:15:6"},"nodeType":"YulFunctionCall","src":"1976:66:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1967:5:6"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2058:5:6"},{"name":"length","nodeType":"YulIdentifier","src":"2065:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2051:6:6"},"nodeType":"YulFunctionCall","src":"2051:21:6"},"nodeType":"YulExpressionStatement","src":"2051:21:6"},{"nodeType":"YulVariableDeclaration","src":"2081:27:6","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2096:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"2103:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2092:3:6"},"nodeType":"YulFunctionCall","src":"2092:16:6"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2085:3:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2146:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2148:77:6"},"nodeType":"YulFunctionCall","src":"2148:79:6"},"nodeType":"YulExpressionStatement","src":"2148:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2127:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"2132:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2123:3:6"},"nodeType":"YulFunctionCall","src":"2123:16:6"},{"name":"end","nodeType":"YulIdentifier","src":"2141:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2120:2:6"},"nodeType":"YulFunctionCall","src":"2120:25:6"},"nodeType":"YulIf","src":"2117:112:6"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2273:3:6"},{"name":"dst","nodeType":"YulIdentifier","src":"2278:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"2283:6:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2238:34:6"},"nodeType":"YulFunctionCall","src":"2238:52:6"},"nodeType":"YulExpressionStatement","src":"2238:52:6"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1930:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"1935:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1943:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1951:5:6","type":""}],"src":"1862:434:6"},{"body":{"nodeType":"YulBlock","src":"2389:282:6","statements":[{"body":{"nodeType":"YulBlock","src":"2438:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2440:77:6"},"nodeType":"YulFunctionCall","src":"2440:79:6"},"nodeType":"YulExpressionStatement","src":"2440:79:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2417:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2425:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2413:3:6"},"nodeType":"YulFunctionCall","src":"2413:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"2432:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2409:3:6"},"nodeType":"YulFunctionCall","src":"2409:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2402:6:6"},"nodeType":"YulFunctionCall","src":"2402:35:6"},"nodeType":"YulIf","src":"2399:122:6"},{"nodeType":"YulVariableDeclaration","src":"2530:27:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2550:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2544:5:6"},"nodeType":"YulFunctionCall","src":"2544:13:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2534:6:6","type":""}]},{"nodeType":"YulAssignment","src":"2566:99:6","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2638:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2646:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2634:3:6"},"nodeType":"YulFunctionCall","src":"2634:17:6"},{"name":"length","nodeType":"YulIdentifier","src":"2653:6:6"},{"name":"end","nodeType":"YulIdentifier","src":"2661:3:6"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2575:58:6"},"nodeType":"YulFunctionCall","src":"2575:90:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2566:5:6"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2367:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"2375:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2383:5:6","type":""}],"src":"2316:355:6"},{"body":{"nodeType":"YulBlock","src":"2764:437:6","statements":[{"body":{"nodeType":"YulBlock","src":"2810:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2812:77:6"},"nodeType":"YulFunctionCall","src":"2812:79:6"},"nodeType":"YulExpressionStatement","src":"2812:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2785:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"2794:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2781:3:6"},"nodeType":"YulFunctionCall","src":"2781:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"2806:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2777:3:6"},"nodeType":"YulFunctionCall","src":"2777:32:6"},"nodeType":"YulIf","src":"2774:119:6"},{"nodeType":"YulBlock","src":"2903:291:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2918:38:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2942:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2953:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2938:3:6"},"nodeType":"YulFunctionCall","src":"2938:17:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2932:5:6"},"nodeType":"YulFunctionCall","src":"2932:24:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2922:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"3003:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3005:77:6"},"nodeType":"YulFunctionCall","src":"3005:79:6"},"nodeType":"YulExpressionStatement","src":"3005:79:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2975:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2983:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2972:2:6"},"nodeType":"YulFunctionCall","src":"2972:30:6"},"nodeType":"YulIf","src":"2969:117:6"},{"nodeType":"YulAssignment","src":"3100:84:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3156:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3167:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3152:3:6"},"nodeType":"YulFunctionCall","src":"3152:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3176:7:6"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3110:41:6"},"nodeType":"YulFunctionCall","src":"3110:74:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3100:6:6"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2734:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2745:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2757:6:6","type":""}],"src":"2677:524:6"},{"body":{"nodeType":"YulBlock","src":"3266:40:6","statements":[{"nodeType":"YulAssignment","src":"3277:22:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3293:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3287:5:6"},"nodeType":"YulFunctionCall","src":"3287:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3277:6:6"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3249:5:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3259:6:6","type":""}],"src":"3207:99:6"},{"body":{"nodeType":"YulBlock","src":"3340:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3357:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3360:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3350:6:6"},"nodeType":"YulFunctionCall","src":"3350:88:6"},"nodeType":"YulExpressionStatement","src":"3350:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3454:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3457:4:6","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3447:6:6"},"nodeType":"YulFunctionCall","src":"3447:15:6"},"nodeType":"YulExpressionStatement","src":"3447:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3478:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3481:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3471:6:6"},"nodeType":"YulFunctionCall","src":"3471:15:6"},"nodeType":"YulExpressionStatement","src":"3471:15:6"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3312:180:6"},{"body":{"nodeType":"YulBlock","src":"3549:269:6","statements":[{"nodeType":"YulAssignment","src":"3559:22:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3573:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"3579:1:6","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3569:3:6"},"nodeType":"YulFunctionCall","src":"3569:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3559:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"3590:38:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3620:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"3626:1:6","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3616:3:6"},"nodeType":"YulFunctionCall","src":"3616:12:6"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3594:18:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"3667:51:6","statements":[{"nodeType":"YulAssignment","src":"3681:27:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3695:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"3703:4:6","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3691:3:6"},"nodeType":"YulFunctionCall","src":"3691:17:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3681:6:6"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3647:18:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3640:6:6"},"nodeType":"YulFunctionCall","src":"3640:26:6"},"nodeType":"YulIf","src":"3637:81:6"},{"body":{"nodeType":"YulBlock","src":"3770:42:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"3784:16:6"},"nodeType":"YulFunctionCall","src":"3784:18:6"},"nodeType":"YulExpressionStatement","src":"3784:18:6"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3734:18:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3757:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"3765:2:6","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3754:2:6"},"nodeType":"YulFunctionCall","src":"3754:14:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3731:2:6"},"nodeType":"YulFunctionCall","src":"3731:38:6"},"nodeType":"YulIf","src":"3728:84:6"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3533:4:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3542:6:6","type":""}],"src":"3498:320:6"},{"body":{"nodeType":"YulBlock","src":"3878:87:6","statements":[{"nodeType":"YulAssignment","src":"3888:11:6","value":{"name":"ptr","nodeType":"YulIdentifier","src":"3896:3:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3888:4:6"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3916:1:6","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"3919:3:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3909:6:6"},"nodeType":"YulFunctionCall","src":"3909:14:6"},"nodeType":"YulExpressionStatement","src":"3909:14:6"},{"nodeType":"YulAssignment","src":"3932:26:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3950:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3953:4:6","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3940:9:6"},"nodeType":"YulFunctionCall","src":"3940:18:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3932:4:6"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"3865:3:6","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"3873:4:6","type":""}],"src":"3824:141:6"},{"body":{"nodeType":"YulBlock","src":"4015:49:6","statements":[{"nodeType":"YulAssignment","src":"4025:33:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4043:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"4050:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4039:3:6"},"nodeType":"YulFunctionCall","src":"4039:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"4055:2:6","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4035:3:6"},"nodeType":"YulFunctionCall","src":"4035:23:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4025:6:6"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3998:5:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4008:6:6","type":""}],"src":"3971:93:6"},{"body":{"nodeType":"YulBlock","src":"4123:54:6","statements":[{"nodeType":"YulAssignment","src":"4133:37:6","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"4158:4:6"},{"name":"value","nodeType":"YulIdentifier","src":"4164:5:6"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4154:3:6"},"nodeType":"YulFunctionCall","src":"4154:16:6"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"4133:8:6"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"4098:4:6","type":""},{"name":"value","nodeType":"YulTypedName","src":"4104:5:6","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"4114:8:6","type":""}],"src":"4070:107:6"},{"body":{"nodeType":"YulBlock","src":"4259:317:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4269:35:6","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"4290:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"4302:1:6","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4286:3:6"},"nodeType":"YulFunctionCall","src":"4286:18:6"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"4273:9:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4313:109:6","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4344:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4355:66:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4325:18:6"},"nodeType":"YulFunctionCall","src":"4325:97:6"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"4317:4:6","type":""}]},{"nodeType":"YulAssignment","src":"4431:51:6","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4462:9:6"},{"name":"toInsert","nodeType":"YulIdentifier","src":"4473:8:6"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4443:18:6"},"nodeType":"YulFunctionCall","src":"4443:39:6"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4431:8:6"}]},{"nodeType":"YulAssignment","src":"4491:30:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4504:5:6"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"4515:4:6"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4511:3:6"},"nodeType":"YulFunctionCall","src":"4511:9:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4500:3:6"},"nodeType":"YulFunctionCall","src":"4500:21:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4491:5:6"}]},{"nodeType":"YulAssignment","src":"4530:40:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4543:5:6"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4554:8:6"},{"name":"mask","nodeType":"YulIdentifier","src":"4564:4:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4550:3:6"},"nodeType":"YulFunctionCall","src":"4550:19:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4540:2:6"},"nodeType":"YulFunctionCall","src":"4540:30:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4530:6:6"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4220:5:6","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"4227:10:6","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"4239:8:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4252:6:6","type":""}],"src":"4183:393:6"},{"body":{"nodeType":"YulBlock","src":"4627:32:6","statements":[{"nodeType":"YulAssignment","src":"4637:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"4648:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4637:7:6"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4609:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4619:7:6","type":""}],"src":"4582:77:6"},{"body":{"nodeType":"YulBlock","src":"4697:28:6","statements":[{"nodeType":"YulAssignment","src":"4707:12:6","value":{"name":"value","nodeType":"YulIdentifier","src":"4714:5:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"4707:3:6"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4683:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"4693:3:6","type":""}],"src":"4665:60:6"},{"body":{"nodeType":"YulBlock","src":"4791:82:6","statements":[{"nodeType":"YulAssignment","src":"4801:66:6","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4859:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4841:17:6"},"nodeType":"YulFunctionCall","src":"4841:24:6"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"4832:8:6"},"nodeType":"YulFunctionCall","src":"4832:34:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4814:17:6"},"nodeType":"YulFunctionCall","src":"4814:53:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"4801:9:6"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4771:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"4781:9:6","type":""}],"src":"4731:142:6"},{"body":{"nodeType":"YulBlock","src":"4926:28:6","statements":[{"nodeType":"YulAssignment","src":"4936:12:6","value":{"name":"value","nodeType":"YulIdentifier","src":"4943:5:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"4936:3:6"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4912:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"4922:3:6","type":""}],"src":"4879:75:6"},{"body":{"nodeType":"YulBlock","src":"5036:193:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5046:63:6","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"5101:7:6"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5070:30:6"},"nodeType":"YulFunctionCall","src":"5070:39:6"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"5050:16:6","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5125:4:6"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5165:4:6"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"5159:5:6"},"nodeType":"YulFunctionCall","src":"5159:11:6"},{"name":"offset","nodeType":"YulIdentifier","src":"5172:6:6"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"5204:16:6"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"5180:23:6"},"nodeType":"YulFunctionCall","src":"5180:41:6"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"5131:27:6"},"nodeType":"YulFunctionCall","src":"5131:91:6"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5118:6:6"},"nodeType":"YulFunctionCall","src":"5118:105:6"},"nodeType":"YulExpressionStatement","src":"5118:105:6"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5013:4:6","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5019:6:6","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"5027:7:6","type":""}],"src":"4960:269:6"},{"body":{"nodeType":"YulBlock","src":"5284:24:6","statements":[{"nodeType":"YulAssignment","src":"5294:8:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5301:1:6","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5294:3:6"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5280:3:6","type":""}],"src":"5235:73:6"},{"body":{"nodeType":"YulBlock","src":"5367:136:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5377:46:6","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"5391:30:6"},"nodeType":"YulFunctionCall","src":"5391:32:6"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"5381:6:6","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5476:4:6"},{"name":"offset","nodeType":"YulIdentifier","src":"5482:6:6"},{"name":"zero_0","nodeType":"YulIdentifier","src":"5490:6:6"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5432:43:6"},"nodeType":"YulFunctionCall","src":"5432:65:6"},"nodeType":"YulExpressionStatement","src":"5432:65:6"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5353:4:6","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5359:6:6","type":""}],"src":"5314:189:6"},{"body":{"nodeType":"YulBlock","src":"5559:136:6","statements":[{"body":{"nodeType":"YulBlock","src":"5626:63:6","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5670:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"5677:1:6","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"5640:29:6"},"nodeType":"YulFunctionCall","src":"5640:39:6"},"nodeType":"YulExpressionStatement","src":"5640:39:6"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5579:5:6"},{"name":"end","nodeType":"YulIdentifier","src":"5586:3:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5576:2:6"},"nodeType":"YulFunctionCall","src":"5576:14:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5591:26:6","statements":[{"nodeType":"YulAssignment","src":"5593:22:6","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5606:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"5613:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5602:3:6"},"nodeType":"YulFunctionCall","src":"5602:13:6"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"5593:5:6"}]}]},"pre":{"nodeType":"YulBlock","src":"5573:2:6","statements":[]},"src":"5569:120:6"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"5547:5:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"5554:3:6","type":""}],"src":"5509:186:6"},{"body":{"nodeType":"YulBlock","src":"5780:464:6","statements":[{"body":{"nodeType":"YulBlock","src":"5806:431:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5820:54:6","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"5868:5:6"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"5836:31:6"},"nodeType":"YulFunctionCall","src":"5836:38:6"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"5824:8:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5887:63:6","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"5910:8:6"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"5938:10:6"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"5920:17:6"},"nodeType":"YulFunctionCall","src":"5920:29:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5906:3:6"},"nodeType":"YulFunctionCall","src":"5906:44:6"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"5891:11:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"6107:27:6","statements":[{"nodeType":"YulAssignment","src":"6109:23:6","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"6124:8:6"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6109:11:6"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6091:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"6103:2:6","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6088:2:6"},"nodeType":"YulFunctionCall","src":"6088:18:6"},"nodeType":"YulIf","src":"6085:49:6"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6176:11:6"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6193:8:6"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6221:3:6"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6203:17:6"},"nodeType":"YulFunctionCall","src":"6203:22:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6189:3:6"},"nodeType":"YulFunctionCall","src":"6189:37:6"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"6147:28:6"},"nodeType":"YulFunctionCall","src":"6147:80:6"},"nodeType":"YulExpressionStatement","src":"6147:80:6"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"5797:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"5802:2:6","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5794:2:6"},"nodeType":"YulFunctionCall","src":"5794:11:6"},"nodeType":"YulIf","src":"5791:446:6"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"5756:5:6","type":""},{"name":"len","nodeType":"YulTypedName","src":"5763:3:6","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"5768:10:6","type":""}],"src":"5701:543:6"},{"body":{"nodeType":"YulBlock","src":"6313:54:6","statements":[{"nodeType":"YulAssignment","src":"6323:37:6","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"6348:4:6"},{"name":"value","nodeType":"YulIdentifier","src":"6354:5:6"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6344:3:6"},"nodeType":"YulFunctionCall","src":"6344:16:6"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"6323:8:6"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"6288:4:6","type":""},{"name":"value","nodeType":"YulTypedName","src":"6294:5:6","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"6304:8:6","type":""}],"src":"6250:117:6"},{"body":{"nodeType":"YulBlock","src":"6424:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6434:68:6","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6483:1:6","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"6486:5:6"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6479:3:6"},"nodeType":"YulFunctionCall","src":"6479:13:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6498:1:6","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6494:3:6"},"nodeType":"YulFunctionCall","src":"6494:6:6"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"6450:28:6"},"nodeType":"YulFunctionCall","src":"6450:51:6"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6446:3:6"},"nodeType":"YulFunctionCall","src":"6446:56:6"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"6438:4:6","type":""}]},{"nodeType":"YulAssignment","src":"6511:25:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6525:4:6"},{"name":"mask","nodeType":"YulIdentifier","src":"6531:4:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6521:3:6"},"nodeType":"YulFunctionCall","src":"6521:15:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"6511:6:6"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6401:4:6","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"6407:5:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"6417:6:6","type":""}],"src":"6373:169:6"},{"body":{"nodeType":"YulBlock","src":"6628:214:6","statements":[{"nodeType":"YulAssignment","src":"6761:37:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6788:4:6"},{"name":"len","nodeType":"YulIdentifier","src":"6794:3:6"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"6769:18:6"},"nodeType":"YulFunctionCall","src":"6769:29:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"6761:4:6"}]},{"nodeType":"YulAssignment","src":"6807:29:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6818:4:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6828:1:6","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"6831:3:6"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6824:3:6"},"nodeType":"YulFunctionCall","src":"6824:11:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6815:2:6"},"nodeType":"YulFunctionCall","src":"6815:21:6"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"6807:4:6"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6609:4:6","type":""},{"name":"len","nodeType":"YulTypedName","src":"6615:3:6","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"6623:4:6","type":""}],"src":"6547:295:6"},{"body":{"nodeType":"YulBlock","src":"6939:1303:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6950:51:6","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6997:3:6"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6964:32:6"},"nodeType":"YulFunctionCall","src":"6964:37:6"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"6954:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"7086:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7088:16:6"},"nodeType":"YulFunctionCall","src":"7088:18:6"},"nodeType":"YulExpressionStatement","src":"7088:18:6"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7058:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"7066:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7055:2:6"},"nodeType":"YulFunctionCall","src":"7055:30:6"},"nodeType":"YulIf","src":"7052:56:6"},{"nodeType":"YulVariableDeclaration","src":"7118:52:6","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7164:4:6"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"7158:5:6"},"nodeType":"YulFunctionCall","src":"7158:11:6"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"7132:25:6"},"nodeType":"YulFunctionCall","src":"7132:38:6"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"7122:6:6","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7263:4:6"},{"name":"oldLen","nodeType":"YulIdentifier","src":"7269:6:6"},{"name":"newLen","nodeType":"YulIdentifier","src":"7277:6:6"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"7217:45:6"},"nodeType":"YulFunctionCall","src":"7217:67:6"},"nodeType":"YulExpressionStatement","src":"7217:67:6"},{"nodeType":"YulVariableDeclaration","src":"7294:18:6","value":{"kind":"number","nodeType":"YulLiteral","src":"7311:1:6","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"7298:9:6","type":""}]},{"nodeType":"YulAssignment","src":"7322:17:6","value":{"kind":"number","nodeType":"YulLiteral","src":"7335:4:6","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"7322:9:6"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"7386:611:6","statements":[{"nodeType":"YulVariableDeclaration","src":"7400:37:6","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7419:6:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7431:4:6","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7427:3:6"},"nodeType":"YulFunctionCall","src":"7427:9:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7415:3:6"},"nodeType":"YulFunctionCall","src":"7415:22:6"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"7404:7:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7451:51:6","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7497:4:6"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"7465:31:6"},"nodeType":"YulFunctionCall","src":"7465:37:6"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"7455:6:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7515:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"7524:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7519:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"7583:163:6","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7608:6:6"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7626:3:6"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"7631:9:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7622:3:6"},"nodeType":"YulFunctionCall","src":"7622:19:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7616:5:6"},"nodeType":"YulFunctionCall","src":"7616:26:6"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7601:6:6"},"nodeType":"YulFunctionCall","src":"7601:42:6"},"nodeType":"YulExpressionStatement","src":"7601:42:6"},{"nodeType":"YulAssignment","src":"7660:24:6","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7674:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"7682:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7670:3:6"},"nodeType":"YulFunctionCall","src":"7670:14:6"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7660:6:6"}]},{"nodeType":"YulAssignment","src":"7701:31:6","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"7718:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7729:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7714:3:6"},"nodeType":"YulFunctionCall","src":"7714:18:6"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"7701:9:6"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7549:1:6"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"7552:7:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7546:2:6"},"nodeType":"YulFunctionCall","src":"7546:14:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7561:21:6","statements":[{"nodeType":"YulAssignment","src":"7563:17:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7572:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"7575:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7568:3:6"},"nodeType":"YulFunctionCall","src":"7568:12:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7563:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"7542:3:6","statements":[]},"src":"7538:208:6"},{"body":{"nodeType":"YulBlock","src":"7782:156:6","statements":[{"nodeType":"YulVariableDeclaration","src":"7800:43:6","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7827:3:6"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"7832:9:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7823:3:6"},"nodeType":"YulFunctionCall","src":"7823:19:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7817:5:6"},"nodeType":"YulFunctionCall","src":"7817:26:6"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"7804:9:6","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7867:6:6"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"7894:9:6"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7909:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"7917:4:6","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7905:3:6"},"nodeType":"YulFunctionCall","src":"7905:17:6"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"7875:18:6"},"nodeType":"YulFunctionCall","src":"7875:48:6"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7860:6:6"},"nodeType":"YulFunctionCall","src":"7860:64:6"},"nodeType":"YulExpressionStatement","src":"7860:64:6"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"7765:7:6"},{"name":"newLen","nodeType":"YulIdentifier","src":"7774:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7762:2:6"},"nodeType":"YulFunctionCall","src":"7762:19:6"},"nodeType":"YulIf","src":"7759:179:6"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7958:4:6"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7972:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"7980:1:6","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7968:3:6"},"nodeType":"YulFunctionCall","src":"7968:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"7984:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7964:3:6"},"nodeType":"YulFunctionCall","src":"7964:22:6"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7951:6:6"},"nodeType":"YulFunctionCall","src":"7951:36:6"},"nodeType":"YulExpressionStatement","src":"7951:36:6"}]},"nodeType":"YulCase","src":"7379:618:6","value":{"kind":"number","nodeType":"YulLiteral","src":"7384:1:6","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"8014:222:6","statements":[{"nodeType":"YulVariableDeclaration","src":"8028:14:6","value":{"kind":"number","nodeType":"YulLiteral","src":"8041:1:6","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8032:5:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"8065:67:6","statements":[{"nodeType":"YulAssignment","src":"8083:35:6","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8102:3:6"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8107:9:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8098:3:6"},"nodeType":"YulFunctionCall","src":"8098:19:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8092:5:6"},"nodeType":"YulFunctionCall","src":"8092:26:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8083:5:6"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"8058:6:6"},"nodeType":"YulIf","src":"8055:77:6"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8152:4:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8211:5:6"},{"name":"newLen","nodeType":"YulIdentifier","src":"8218:6:6"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"8158:52:6"},"nodeType":"YulFunctionCall","src":"8158:67:6"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8145:6:6"},"nodeType":"YulFunctionCall","src":"8145:81:6"},"nodeType":"YulExpressionStatement","src":"8145:81:6"}]},"nodeType":"YulCase","src":"8006:230:6","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7359:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"7367:2:6","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7356:2:6"},"nodeType":"YulFunctionCall","src":"7356:14:6"},"nodeType":"YulSwitch","src":"7349:887:6"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"6928:4:6","type":""},{"name":"src","nodeType":"YulTypedName","src":"6934:3:6","type":""}],"src":"6847:1395:6"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":6,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xF PUSH1 0x1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1322 CODESIZE SUB DUP1 PUSH3 0x1322 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x3C SWAP2 SWAP1 PUSH3 0x1E8 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x4D SWAP2 SWAP1 PUSH3 0x484 JUMP JUMPDEST POP POP PUSH3 0x56B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0xBE DUP3 PUSH3 0x73 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0xE0 JUMPI PUSH3 0xDF PUSH3 0x84 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF5 PUSH3 0x55 JUMP JUMPDEST SWAP1 POP PUSH3 0x103 DUP3 DUP3 PUSH3 0xB3 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x126 JUMPI PUSH3 0x125 PUSH3 0x84 JUMP JUMPDEST JUMPDEST PUSH3 0x131 DUP3 PUSH3 0x73 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x15E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x141 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x181 PUSH3 0x17B DUP5 PUSH3 0x108 JUMP JUMPDEST PUSH3 0xE9 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x1A0 JUMPI PUSH3 0x19F PUSH3 0x6E JUMP JUMPDEST JUMPDEST PUSH3 0x1AD DUP5 DUP3 DUP6 PUSH3 0x13E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1CD JUMPI PUSH3 0x1CC PUSH3 0x69 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x1DF DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x16A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x201 JUMPI PUSH3 0x200 PUSH3 0x5F JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x222 JUMPI PUSH3 0x221 PUSH3 0x64 JUMP JUMPDEST JUMPDEST PUSH3 0x230 DUP5 DUP3 DUP6 ADD PUSH3 0x1B5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x28C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2A2 JUMPI PUSH3 0x2A1 PUSH3 0x244 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x30C PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x2CD JUMP JUMPDEST PUSH3 0x318 DUP7 DUP4 PUSH3 0x2CD JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x365 PUSH3 0x35F PUSH3 0x359 DUP5 PUSH3 0x330 JUMP JUMPDEST PUSH3 0x33A JUMP JUMPDEST PUSH3 0x330 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x381 DUP4 PUSH3 0x344 JUMP JUMPDEST PUSH3 0x399 PUSH3 0x390 DUP3 PUSH3 0x36C JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x2DA JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x3B0 PUSH3 0x3A1 JUMP JUMPDEST PUSH3 0x3BD DUP2 DUP5 DUP5 PUSH3 0x376 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x3E5 JUMPI PUSH3 0x3D9 PUSH1 0x0 DUP3 PUSH3 0x3A6 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x3C3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x434 JUMPI PUSH3 0x3FE DUP2 PUSH3 0x2A8 JUMP JUMPDEST PUSH3 0x409 DUP5 PUSH3 0x2BD JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x419 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x431 PUSH3 0x428 DUP6 PUSH3 0x2BD JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x3C2 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x459 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x439 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x474 DUP4 DUP4 PUSH3 0x446 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x48F DUP3 PUSH3 0x239 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4AB JUMPI PUSH3 0x4AA PUSH3 0x84 JUMP JUMPDEST JUMPDEST PUSH3 0x4B7 DUP3 SLOAD PUSH3 0x273 JUMP JUMPDEST PUSH3 0x4C4 DUP3 DUP3 DUP6 PUSH3 0x3E9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x4FC JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x4E7 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x4F3 DUP6 DUP3 PUSH3 0x466 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x563 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x50C DUP7 PUSH3 0x2A8 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x536 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x50F JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x556 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x552 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x446 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDA7 DUP1 PUSH3 0x57B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB6AD16A8 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xBEBC479C EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0xCB2E6043 EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x749 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6E SWAP3 SWAP2 SWAP1 PUSH2 0x883 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7F PUSH2 0x127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9D PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP2 SWAP1 PUSH2 0x8E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBB PUSH2 0x699 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 NUMBER PUSH2 0x10D SWAP2 SWAP1 PUSH2 0x92E JUMP JUMPDEST DUP2 MSTORE POP SWAP2 POP DUP2 PUSH2 0x11C DUP4 PUSH2 0x1BB JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x134 SWAP1 PUSH2 0x991 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x160 SWAP1 PUSH2 0x991 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1AD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x182 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1AD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x190 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1CC DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x20F JUMP JUMPDEST PUSH2 0x1D9 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x20F JUMP JUMPDEST PUSH2 0x1E6 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x23C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1F9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x235 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x30A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x24B DUP5 PUSH2 0x546 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26A JUMPI PUSH2 0x269 PUSH2 0xBD9 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x29C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x2FF JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2F3 JUMPI PUSH2 0x2F2 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x2AA JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x31D SWAP2 SWAP1 PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x327 SWAP2 SWAP1 PUSH2 0xC79 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x340 JUMPI PUSH2 0x33F PUSH2 0xBD9 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x372 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3AA JUMPI PUSH2 0x3A9 PUSH2 0xCAD JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x40E JUMPI PUSH2 0x40D PUSH2 0xCAD JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x44E SWAP2 SWAP1 PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x458 SWAP2 SWAP1 PUSH2 0xC79 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4F8 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x49A JUMPI PUSH2 0x499 PUSH2 0xCAD JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4B1 JUMPI PUSH2 0x4B0 PUSH2 0xCAD JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x4F1 SWAP1 PUSH2 0xCDC JUMP JUMPDEST SWAP1 POP PUSH2 0x45B JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x53C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x533 SWAP1 PUSH2 0xD51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x5A4 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x59A JUMPI PUSH2 0x599 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x5E1 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x5D7 JUMPI PUSH2 0x5D6 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x610 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x606 JUMPI PUSH2 0x605 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x639 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x62F JUMPI PUSH2 0x62E PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x65E JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x654 JUMPI PUSH2 0x653 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x681 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x677 JUMPI PUSH2 0x676 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x690 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x716 DUP3 PUSH2 0x6EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x726 DUP2 PUSH2 0x70B JUMP JUMPDEST DUP2 EQ PUSH2 0x731 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x743 DUP2 PUSH2 0x71D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x760 JUMPI PUSH2 0x75F PUSH2 0x6E6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x76E DUP6 DUP3 DUP7 ADD PUSH2 0x734 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x77F DUP6 DUP3 DUP7 ADD PUSH2 0x734 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x792 DUP2 PUSH2 0x70B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7AB DUP2 PUSH2 0x798 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x7C7 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x789 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x7DA PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x789 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x7ED PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x7A2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x82D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x812 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x855 DUP3 PUSH2 0x7F3 JUMP JUMPDEST PUSH2 0x85F DUP2 DUP6 PUSH2 0x7FE JUMP JUMPDEST SWAP4 POP PUSH2 0x86F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x80F JUMP JUMPDEST PUSH2 0x878 DUP2 PUSH2 0x839 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x898 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x7B1 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x8AA DUP2 DUP5 PUSH2 0x84A JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x8CD DUP2 DUP5 PUSH2 0x84A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x8DE DUP2 PUSH2 0x798 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8F9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x939 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH2 0x944 DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x95C JUMPI PUSH2 0x95B PUSH2 0x8FF JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x9A9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x9BC JUMPI PUSH2 0x9BB PUSH2 0x962 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x9EF DUP2 PUSH2 0x991 JUMP JUMPDEST PUSH2 0x9F9 DUP2 DUP7 PUSH2 0x9C2 JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0xA14 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0xA29 JUMPI PUSH2 0xA5C JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 ISZERO ISZERO DUP3 MUL DUP7 ADD SWAP4 POP PUSH2 0xA5C JUMP JUMPDEST PUSH2 0xA32 DUP6 PUSH2 0x9CD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA54 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA35 JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xA0A4D653A200000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA9B PUSH1 0x6 DUP4 PUSH2 0x9C2 JUMP JUMPDEST SWAP2 POP PUSH2 0xAA6 DUP3 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x6 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xABC DUP3 PUSH2 0x7F3 JUMP JUMPDEST PUSH2 0xAC6 DUP2 DUP6 PUSH2 0x9C2 JUMP JUMPDEST SWAP4 POP PUSH2 0xAD6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x80F JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xA4465766963653A200000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB18 PUSH1 0x9 DUP4 PUSH2 0x9C2 JUMP JUMPDEST SWAP2 POP PUSH2 0xB23 DUP3 PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x9 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xA4973737565642061743A200000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB64 PUSH1 0xC DUP4 PUSH2 0x9C2 JUMP JUMPDEST SWAP2 POP PUSH2 0xB6F DUP3 PUSH2 0xB2E JUMP JUMPDEST PUSH1 0xC DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB86 DUP3 DUP8 PUSH2 0x9E2 JUMP JUMPDEST SWAP2 POP PUSH2 0xB91 DUP3 PUSH2 0xA8E JUMP JUMPDEST SWAP2 POP PUSH2 0xB9D DUP3 DUP7 PUSH2 0xAB1 JUMP JUMPDEST SWAP2 POP PUSH2 0xBA8 DUP3 PUSH2 0xB0B JUMP JUMPDEST SWAP2 POP PUSH2 0xBB4 DUP3 DUP6 PUSH2 0xAB1 JUMP JUMPDEST SWAP2 POP PUSH2 0xBBF DUP3 PUSH2 0xB57 JUMP JUMPDEST SWAP2 POP PUSH2 0xBCB DUP3 DUP5 PUSH2 0xAB1 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC42 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH2 0xC4D DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xC5B DUP2 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xC72 JUMPI PUSH2 0xC71 PUSH2 0x8FF JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC84 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH2 0xC8F DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA6 PUSH2 0x8FF JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCE7 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0xCFA JUMPI PUSH2 0xCF9 PUSH2 0x8FF JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD3B PUSH1 0x20 DUP4 PUSH2 0x7FE JUMP JUMPDEST SWAP2 POP PUSH2 0xD46 DUP3 PUSH2 0xD05 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD6A DUP2 PUSH2 0xD2E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xDE DUP1 SGT PUSH22 0xE2768B8981495412ED4FD9B296A1C822289D1BADAAC6 DUP12 0xDC PUSH25 0x164264736F6C63430008130033000000000000000000000000 ","sourceMap":"312:2137:3:-:0;;;407:2;376:33;;529:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;589:10;577:9;:22;;;;;;:::i;:::-;;529:77;312:2137;;7:75:6;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:246::-;1691:1;1701:113;1715:6;1712:1;1709:13;1701:113;;;1800:1;1795:3;1791:11;1785:18;1781:1;1776:3;1772:11;1765:39;1737:2;1734:1;1730:10;1725:15;;1701:113;;;1848:1;1839:6;1834:3;1830:16;1823:27;1672:184;1610:246;;;:::o;1862:434::-;1951:5;1976:66;1992:49;2034:6;1992:49;:::i;:::-;1976:66;:::i;:::-;1967:75;;2065:6;2058:5;2051:21;2103:4;2096:5;2092:16;2141:3;2132:6;2127:3;2123:16;2120:25;2117:112;;;2148:79;;:::i;:::-;2117:112;2238:52;2283:6;2278:3;2273;2238:52;:::i;:::-;1957:339;1862:434;;;;;:::o;2316:355::-;2383:5;2432:3;2425:4;2417:6;2413:17;2409:27;2399:122;;2440:79;;:::i;:::-;2399:122;2550:6;2544:13;2575:90;2661:3;2653:6;2646:4;2638:6;2634:17;2575:90;:::i;:::-;2566:99;;2389:282;2316:355;;;;:::o;2677:524::-;2757:6;2806:2;2794:9;2785:7;2781:23;2777:32;2774:119;;;2812:79;;:::i;:::-;2774:119;2953:1;2942:9;2938:17;2932:24;2983:18;2975:6;2972:30;2969:117;;;3005:79;;:::i;:::-;2969:117;3110:74;3176:7;3167:6;3156:9;3152:22;3110:74;:::i;:::-;3100:84;;2903:291;2677:524;;;;:::o;3207:99::-;3259:6;3293:5;3287:12;3277:22;;3207:99;;;:::o;3312:180::-;3360:77;3357:1;3350:88;3457:4;3454:1;3447:15;3481:4;3478:1;3471:15;3498:320;3542:6;3579:1;3573:4;3569:12;3559:22;;3626:1;3620:4;3616:12;3647:18;3637:81;;3703:4;3695:6;3691:17;3681:27;;3637:81;3765:2;3757:6;3754:14;3734:18;3731:38;3728:84;;3784:18;;:::i;:::-;3728:84;3549:269;3498:320;;;:::o;3824:141::-;3873:4;3896:3;3888:11;;3919:3;3916:1;3909:14;3953:4;3950:1;3940:18;3932:26;;3824:141;;;:::o;3971:93::-;4008:6;4055:2;4050;4043:5;4039:14;4035:23;4025:33;;3971:93;;;:::o;4070:107::-;4114:8;4164:5;4158:4;4154:16;4133:37;;4070:107;;;;:::o;4183:393::-;4252:6;4302:1;4290:10;4286:18;4325:97;4355:66;4344:9;4325:97;:::i;:::-;4443:39;4473:8;4462:9;4443:39;:::i;:::-;4431:51;;4515:4;4511:9;4504:5;4500:21;4491:30;;4564:4;4554:8;4550:19;4543:5;4540:30;4530:40;;4259:317;;4183:393;;;;;:::o;4582:77::-;4619:7;4648:5;4637:16;;4582:77;;;:::o;4665:60::-;4693:3;4714:5;4707:12;;4665:60;;;:::o;4731:142::-;4781:9;4814:53;4832:34;4841:24;4859:5;4841:24;:::i;:::-;4832:34;:::i;:::-;4814:53;:::i;:::-;4801:66;;4731:142;;;:::o;4879:75::-;4922:3;4943:5;4936:12;;4879:75;;;:::o;4960:269::-;5070:39;5101:7;5070:39;:::i;:::-;5131:91;5180:41;5204:16;5180:41;:::i;:::-;5172:6;5165:4;5159:11;5131:91;:::i;:::-;5125:4;5118:105;5036:193;4960:269;;;:::o;5235:73::-;5280:3;5235:73;:::o;5314:189::-;5391:32;;:::i;:::-;5432:65;5490:6;5482;5476:4;5432:65;:::i;:::-;5367:136;5314:189;;:::o;5509:186::-;5569:120;5586:3;5579:5;5576:14;5569:120;;;5640:39;5677:1;5670:5;5640:39;:::i;:::-;5613:1;5606:5;5602:13;5593:22;;5569:120;;;5509:186;;:::o;5701:543::-;5802:2;5797:3;5794:11;5791:446;;;5836:38;5868:5;5836:38;:::i;:::-;5920:29;5938:10;5920:29;:::i;:::-;5910:8;5906:44;6103:2;6091:10;6088:18;6085:49;;;6124:8;6109:23;;6085:49;6147:80;6203:22;6221:3;6203:22;:::i;:::-;6193:8;6189:37;6176:11;6147:80;:::i;:::-;5806:431;;5791:446;5701:543;;;:::o;6250:117::-;6304:8;6354:5;6348:4;6344:16;6323:37;;6250:117;;;;:::o;6373:169::-;6417:6;6450:51;6498:1;6494:6;6486:5;6483:1;6479:13;6450:51;:::i;:::-;6446:56;6531:4;6525;6521:15;6511:25;;6424:118;6373:169;;;;:::o;6547:295::-;6623:4;6769:29;6794:3;6788:4;6769:29;:::i;:::-;6761:37;;6831:3;6828:1;6824:11;6818:4;6815:21;6807:29;;6547:295;;;;:::o;6847:1395::-;6964:37;6997:3;6964:37;:::i;:::-;7066:18;7058:6;7055:30;7052:56;;;7088:18;;:::i;:::-;7052:56;7132:38;7164:4;7158:11;7132:38;:::i;:::-;7217:67;7277:6;7269;7263:4;7217:67;:::i;:::-;7311:1;7335:4;7322:17;;7367:2;7359:6;7356:14;7384:1;7379:618;;;;8041:1;8058:6;8055:77;;;8107:9;8102:3;8098:19;8092:26;8083:35;;8055:77;8158:67;8218:6;8211:5;8158:67;:::i;:::-;8152:4;8145:81;8014:222;7349:887;;7379:618;7431:4;7427:9;7419:6;7415:22;7465:37;7497:4;7465:37;:::i;:::-;7524:1;7538:208;7552:7;7549:1;7546:14;7538:208;;;7631:9;7626:3;7622:19;7616:26;7608:6;7601:42;7682:1;7674:6;7670:14;7660:24;;7729:2;7718:9;7714:18;7701:31;;7575:4;7572:1;7568:12;7563:17;;7538:208;;;7774:6;7765:7;7762:19;7759:179;;;7832:9;7827:3;7823:19;7817:26;7875:48;7917:4;7909:6;7905:17;7894:9;7875:48;:::i;:::-;7867:6;7860:64;7782:156;7759:179;7984:1;7980;7972:6;7968:14;7964:22;7958:4;7951:36;7386:611;;;7349:887;;6939:1303;;;6847:1395;;:::o;312:2137:3:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@STATEMENT_1407":{"entryPoint":295,"id":1407,"parameterSlots":0,"returnSlots":0},"@createTokenRequest_1523":{"entryPoint":179,"id":1523,"parameterSlots":2,"returnSlots":2},"@lengthOfToken_1410":{"entryPoint":437,"id":1410,"parameterSlots":0,"returnSlots":0},"@log10_1237":{"entryPoint":1350,"id":1237,"parameterSlots":1,"returnSlots":1},"@stringToSign_1559":{"entryPoint":443,"id":1559,"parameterSlots":1,"returnSlots":1},"@toHexString_153":{"entryPoint":778,"id":153,"parameterSlots":2,"returnSlots":1},"@toHexString_173":{"entryPoint":527,"id":173,"parameterSlots":1,"returnSlots":1},"@toString_57":{"entryPoint":572,"id":57,"parameterSlots":1,"returnSlots":1},"abi_decode_t_address":{"entryPoint":1844,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":1865,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address":{"entryPoint":1929,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":2122,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2737,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2530,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":3374,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2903,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2827,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2702,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_TokenRequest_$1417_memory_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack":{"entryPoint":1969,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":1954,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":2261,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_storage_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_t_string_memory_ptr_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_t_string_memory_ptr_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":2938,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2227,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3409,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__to_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2179,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":2276,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":2509,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":2035,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2046,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":2498,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3193,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":3127,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2350,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1803,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1771,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1944,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2063,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":3292,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":2449,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":2303,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":3080,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":2402,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3245,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3033,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1766,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2105,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":3333,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb":{"entryPoint":2862,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60":{"entryPoint":2786,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262":{"entryPoint":2661,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":1821,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12930:6","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:6","statements":[{"nodeType":"YulAssignment","src":"57:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:6"},"nodeType":"YulFunctionCall","src":"67:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:6"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:6","type":""}],"src":"7:75:6"},{"body":{"nodeType":"YulBlock","src":"177:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:6"},"nodeType":"YulFunctionCall","src":"187:12:6"},"nodeType":"YulExpressionStatement","src":"187:12:6"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:6"},{"body":{"nodeType":"YulBlock","src":"300:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:6"},"nodeType":"YulFunctionCall","src":"310:12:6"},"nodeType":"YulExpressionStatement","src":"310:12:6"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:6"},{"body":{"nodeType":"YulBlock","src":"379:81:6","statements":[{"nodeType":"YulAssignment","src":"389:65:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:6"},"nodeType":"YulFunctionCall","src":"400:54:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:6"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:6","type":""}],"src":"334:126:6"},{"body":{"nodeType":"YulBlock","src":"511:51:6","statements":[{"nodeType":"YulAssignment","src":"521:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:6"},"nodeType":"YulFunctionCall","src":"532:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:6"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:6","type":""}],"src":"466:96:6"},{"body":{"nodeType":"YulBlock","src":"611:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:6"},"nodeType":"YulFunctionCall","src":"670:12:6"},"nodeType":"YulExpressionStatement","src":"670:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:6"},"nodeType":"YulFunctionCall","src":"641:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:6"},"nodeType":"YulFunctionCall","src":"631:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:6"},"nodeType":"YulFunctionCall","src":"624:43:6"},"nodeType":"YulIf","src":"621:63:6"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:6","type":""}],"src":"568:122:6"},{"body":{"nodeType":"YulBlock","src":"748:87:6","statements":[{"nodeType":"YulAssignment","src":"758:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"780:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"767:12:6"},"nodeType":"YulFunctionCall","src":"767:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"758:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"823:5:6"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"796:26:6"},"nodeType":"YulFunctionCall","src":"796:33:6"},"nodeType":"YulExpressionStatement","src":"796:33:6"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"726:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"734:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"742:5:6","type":""}],"src":"696:139:6"},{"body":{"nodeType":"YulBlock","src":"924:391:6","statements":[{"body":{"nodeType":"YulBlock","src":"970:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"972:77:6"},"nodeType":"YulFunctionCall","src":"972:79:6"},"nodeType":"YulExpressionStatement","src":"972:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"945:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"954:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"941:3:6"},"nodeType":"YulFunctionCall","src":"941:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"966:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"937:3:6"},"nodeType":"YulFunctionCall","src":"937:32:6"},"nodeType":"YulIf","src":"934:119:6"},{"nodeType":"YulBlock","src":"1063:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1078:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1092:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1082:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1107:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1142:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1153:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1138:3:6"},"nodeType":"YulFunctionCall","src":"1138:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1162:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1117:20:6"},"nodeType":"YulFunctionCall","src":"1117:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1107:6:6"}]}]},{"nodeType":"YulBlock","src":"1190:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1205:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1219:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1209:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1235:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1270:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1281:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1266:3:6"},"nodeType":"YulFunctionCall","src":"1266:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1290:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1245:20:6"},"nodeType":"YulFunctionCall","src":"1245:53:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1235:6:6"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"886:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"897:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"909:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"917:6:6","type":""}],"src":"841:474:6"},{"body":{"nodeType":"YulBlock","src":"1376:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1393:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1416:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1398:17:6"},"nodeType":"YulFunctionCall","src":"1398:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1386:6:6"},"nodeType":"YulFunctionCall","src":"1386:37:6"},"nodeType":"YulExpressionStatement","src":"1386:37:6"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1364:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1371:3:6","type":""}],"src":"1321:108:6"},{"body":{"nodeType":"YulBlock","src":"1480:32:6","statements":[{"nodeType":"YulAssignment","src":"1490:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"1501:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1490:7:6"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1462:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1472:7:6","type":""}],"src":"1435:77:6"},{"body":{"nodeType":"YulBlock","src":"1573:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1590:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1613:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1595:17:6"},"nodeType":"YulFunctionCall","src":"1595:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1583:6:6"},"nodeType":"YulFunctionCall","src":"1583:37:6"},"nodeType":"YulExpressionStatement","src":"1583:37:6"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1561:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1568:3:6","type":""}],"src":"1518:108:6"},{"body":{"nodeType":"YulBlock","src":"1846:572:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1856:26:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1872:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"1877:4:6","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1868:3:6"},"nodeType":"YulFunctionCall","src":"1868:14:6"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"1860:4:6","type":""}]},{"nodeType":"YulBlock","src":"1892:165:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1928:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1958:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"1965:4:6","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1954:3:6"},"nodeType":"YulFunctionCall","src":"1954:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1948:5:6"},"nodeType":"YulFunctionCall","src":"1948:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"1932:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2018:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2036:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"2041:4:6","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2032:3:6"},"nodeType":"YulFunctionCall","src":"2032:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"1984:33:6"},"nodeType":"YulFunctionCall","src":"1984:63:6"},"nodeType":"YulExpressionStatement","src":"1984:63:6"}]},{"nodeType":"YulBlock","src":"2067:166:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2104:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2134:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"2141:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2130:3:6"},"nodeType":"YulFunctionCall","src":"2130:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2124:5:6"},"nodeType":"YulFunctionCall","src":"2124:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"2108:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2194:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2212:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"2217:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2208:3:6"},"nodeType":"YulFunctionCall","src":"2208:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"2160:33:6"},"nodeType":"YulFunctionCall","src":"2160:63:6"},"nodeType":"YulExpressionStatement","src":"2160:63:6"}]},{"nodeType":"YulBlock","src":"2243:168:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2282:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2312:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"2319:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2308:3:6"},"nodeType":"YulFunctionCall","src":"2308:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2302:5:6"},"nodeType":"YulFunctionCall","src":"2302:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"2286:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2372:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2390:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"2395:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2386:3:6"},"nodeType":"YulFunctionCall","src":"2386:14:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2338:33:6"},"nodeType":"YulFunctionCall","src":"2338:63:6"},"nodeType":"YulExpressionStatement","src":"2338:63:6"}]}]},"name":"abi_encode_t_struct$_TokenRequest_$1417_memory_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1833:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1840:3:6","type":""}],"src":"1720:698:6"},{"body":{"nodeType":"YulBlock","src":"2483:40:6","statements":[{"nodeType":"YulAssignment","src":"2494:22:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2510:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2504:5:6"},"nodeType":"YulFunctionCall","src":"2504:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2494:6:6"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2466:5:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2476:6:6","type":""}],"src":"2424:99:6"},{"body":{"nodeType":"YulBlock","src":"2625:73:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2642:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"2647:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2635:6:6"},"nodeType":"YulFunctionCall","src":"2635:19:6"},"nodeType":"YulExpressionStatement","src":"2635:19:6"},{"nodeType":"YulAssignment","src":"2663:29:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2682:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"2687:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2678:3:6"},"nodeType":"YulFunctionCall","src":"2678:14:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"2663:11:6"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2597:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"2602:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"2613:11:6","type":""}],"src":"2529:169:6"},{"body":{"nodeType":"YulBlock","src":"2766:184:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2776:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"2785:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2780:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2845:63:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2870:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"2875:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2866:3:6"},"nodeType":"YulFunctionCall","src":"2866:11:6"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2889:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"2894:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2885:3:6"},"nodeType":"YulFunctionCall","src":"2885:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2879:5:6"},"nodeType":"YulFunctionCall","src":"2879:18:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2859:6:6"},"nodeType":"YulFunctionCall","src":"2859:39:6"},"nodeType":"YulExpressionStatement","src":"2859:39:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2806:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"2809:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2803:2:6"},"nodeType":"YulFunctionCall","src":"2803:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2817:19:6","statements":[{"nodeType":"YulAssignment","src":"2819:15:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2828:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"2831:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2824:3:6"},"nodeType":"YulFunctionCall","src":"2824:10:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2819:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"2799:3:6","statements":[]},"src":"2795:113:6"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2928:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"2933:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2924:3:6"},"nodeType":"YulFunctionCall","src":"2924:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"2942:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2917:6:6"},"nodeType":"YulFunctionCall","src":"2917:27:6"},"nodeType":"YulExpressionStatement","src":"2917:27:6"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2748:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2753:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"2758:6:6","type":""}],"src":"2704:246:6"},{"body":{"nodeType":"YulBlock","src":"3004:54:6","statements":[{"nodeType":"YulAssignment","src":"3014:38:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3032:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"3039:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3028:3:6"},"nodeType":"YulFunctionCall","src":"3028:14:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3048:2:6","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3044:3:6"},"nodeType":"YulFunctionCall","src":"3044:7:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3024:3:6"},"nodeType":"YulFunctionCall","src":"3024:28:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3014:6:6"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2987:5:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2997:6:6","type":""}],"src":"2956:102:6"},{"body":{"nodeType":"YulBlock","src":"3156:285:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3166:53:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3213:5:6"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3180:32:6"},"nodeType":"YulFunctionCall","src":"3180:39:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3170:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3228:78:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3294:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"3299:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3235:58:6"},"nodeType":"YulFunctionCall","src":"3235:71:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3228:3:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3354:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"3361:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3350:3:6"},"nodeType":"YulFunctionCall","src":"3350:16:6"},{"name":"pos","nodeType":"YulIdentifier","src":"3368:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"3373:6:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"3315:34:6"},"nodeType":"YulFunctionCall","src":"3315:65:6"},"nodeType":"YulExpressionStatement","src":"3315:65:6"},{"nodeType":"YulAssignment","src":"3389:46:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3400:3:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3427:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"3405:21:6"},"nodeType":"YulFunctionCall","src":"3405:29:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3396:3:6"},"nodeType":"YulFunctionCall","src":"3396:39:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3389:3:6"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3137:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3144:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3152:3:6","type":""}],"src":"3064:377:6"},{"body":{"nodeType":"YulBlock","src":"3653:338:6","statements":[{"nodeType":"YulAssignment","src":"3663:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3675:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3686:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3671:3:6"},"nodeType":"YulFunctionCall","src":"3671:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3663:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3804:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3817:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3828:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3813:3:6"},"nodeType":"YulFunctionCall","src":"3813:17:6"}],"functionName":{"name":"abi_encode_t_struct$_TokenRequest_$1417_memory_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3700:103:6"},"nodeType":"YulFunctionCall","src":"3700:131:6"},"nodeType":"YulExpressionStatement","src":"3700:131:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3852:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3863:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3848:3:6"},"nodeType":"YulFunctionCall","src":"3848:18:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3872:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"3878:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3868:3:6"},"nodeType":"YulFunctionCall","src":"3868:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3841:6:6"},"nodeType":"YulFunctionCall","src":"3841:48:6"},"nodeType":"YulExpressionStatement","src":"3841:48:6"},{"nodeType":"YulAssignment","src":"3898:86:6","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3970:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"3979:4:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3906:63:6"},"nodeType":"YulFunctionCall","src":"3906:78:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3898:4:6"}]}]},"name":"abi_encode_tuple_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__to_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3617:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3629:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3637:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3648:4:6","type":""}],"src":"3447:544:6"},{"body":{"nodeType":"YulBlock","src":"4115:195:6","statements":[{"nodeType":"YulAssignment","src":"4125:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4137:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4148:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4133:3:6"},"nodeType":"YulFunctionCall","src":"4133:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4125:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4172:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4183:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4168:3:6"},"nodeType":"YulFunctionCall","src":"4168:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4191:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"4197:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4187:3:6"},"nodeType":"YulFunctionCall","src":"4187:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4161:6:6"},"nodeType":"YulFunctionCall","src":"4161:47:6"},"nodeType":"YulExpressionStatement","src":"4161:47:6"},{"nodeType":"YulAssignment","src":"4217:86:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4289:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"4298:4:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4225:63:6"},"nodeType":"YulFunctionCall","src":"4225:78:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4217:4:6"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4087:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4099:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4110:4:6","type":""}],"src":"3997:313:6"},{"body":{"nodeType":"YulBlock","src":"4381:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4398:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4421:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4403:17:6"},"nodeType":"YulFunctionCall","src":"4403:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4391:6:6"},"nodeType":"YulFunctionCall","src":"4391:37:6"},"nodeType":"YulExpressionStatement","src":"4391:37:6"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4369:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4376:3:6","type":""}],"src":"4316:118:6"},{"body":{"nodeType":"YulBlock","src":"4538:124:6","statements":[{"nodeType":"YulAssignment","src":"4548:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4560:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4571:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4556:3:6"},"nodeType":"YulFunctionCall","src":"4556:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4548:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4628:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4641:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4652:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4637:3:6"},"nodeType":"YulFunctionCall","src":"4637:17:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4584:43:6"},"nodeType":"YulFunctionCall","src":"4584:71:6"},"nodeType":"YulExpressionStatement","src":"4584:71:6"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4510:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4522:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4533:4:6","type":""}],"src":"4440:222:6"},{"body":{"nodeType":"YulBlock","src":"4696:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4713:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4716:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4706:6:6"},"nodeType":"YulFunctionCall","src":"4706:88:6"},"nodeType":"YulExpressionStatement","src":"4706:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4810:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4813:4:6","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4803:6:6"},"nodeType":"YulFunctionCall","src":"4803:15:6"},"nodeType":"YulExpressionStatement","src":"4803:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4834:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4837:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4827:6:6"},"nodeType":"YulFunctionCall","src":"4827:15:6"},"nodeType":"YulExpressionStatement","src":"4827:15:6"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4668:180:6"},{"body":{"nodeType":"YulBlock","src":"4899:149:6","statements":[{"nodeType":"YulAssignment","src":"4909:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4932:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4914:17:6"},"nodeType":"YulFunctionCall","src":"4914:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"4909:1:6"}]},{"nodeType":"YulAssignment","src":"4943:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4966:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4948:17:6"},"nodeType":"YulFunctionCall","src":"4948:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"4943:1:6"}]},{"nodeType":"YulAssignment","src":"4977:17:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4989:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"4992:1:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4985:3:6"},"nodeType":"YulFunctionCall","src":"4985:9:6"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"4977:4:6"}]},{"body":{"nodeType":"YulBlock","src":"5019:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5021:16:6"},"nodeType":"YulFunctionCall","src":"5021:18:6"},"nodeType":"YulExpressionStatement","src":"5021:18:6"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"5010:4:6"},{"name":"x","nodeType":"YulIdentifier","src":"5016:1:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5007:2:6"},"nodeType":"YulFunctionCall","src":"5007:11:6"},"nodeType":"YulIf","src":"5004:37:6"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4885:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"4888:1:6","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"4894:4:6","type":""}],"src":"4854:194:6"},{"body":{"nodeType":"YulBlock","src":"5082:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5099:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5102:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5092:6:6"},"nodeType":"YulFunctionCall","src":"5092:88:6"},"nodeType":"YulExpressionStatement","src":"5092:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5196:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5199:4:6","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5189:6:6"},"nodeType":"YulFunctionCall","src":"5189:15:6"},"nodeType":"YulExpressionStatement","src":"5189:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5220:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5223:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5213:6:6"},"nodeType":"YulFunctionCall","src":"5213:15:6"},"nodeType":"YulExpressionStatement","src":"5213:15:6"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"5054:180:6"},{"body":{"nodeType":"YulBlock","src":"5291:269:6","statements":[{"nodeType":"YulAssignment","src":"5301:22:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5315:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"5321:1:6","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5311:3:6"},"nodeType":"YulFunctionCall","src":"5311:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5301:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"5332:38:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5362:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"5368:1:6","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5358:3:6"},"nodeType":"YulFunctionCall","src":"5358:12:6"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5336:18:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"5409:51:6","statements":[{"nodeType":"YulAssignment","src":"5423:27:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5437:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"5445:4:6","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5433:3:6"},"nodeType":"YulFunctionCall","src":"5433:17:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5423:6:6"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5389:18:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5382:6:6"},"nodeType":"YulFunctionCall","src":"5382:26:6"},"nodeType":"YulIf","src":"5379:81:6"},{"body":{"nodeType":"YulBlock","src":"5512:42:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"5526:16:6"},"nodeType":"YulFunctionCall","src":"5526:18:6"},"nodeType":"YulExpressionStatement","src":"5526:18:6"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5476:18:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5499:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"5507:2:6","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5496:2:6"},"nodeType":"YulFunctionCall","src":"5496:14:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5473:2:6"},"nodeType":"YulFunctionCall","src":"5473:38:6"},"nodeType":"YulIf","src":"5470:84:6"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5275:4:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5284:6:6","type":""}],"src":"5240:320:6"},{"body":{"nodeType":"YulBlock","src":"5680:34:6","statements":[{"nodeType":"YulAssignment","src":"5690:18:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"5705:3:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"5690:11:6"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5652:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"5657:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"5668:11:6","type":""}],"src":"5566:148:6"},{"body":{"nodeType":"YulBlock","src":"5774:87:6","statements":[{"nodeType":"YulAssignment","src":"5784:11:6","value":{"name":"ptr","nodeType":"YulIdentifier","src":"5792:3:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"5784:4:6"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5812:1:6","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"5815:3:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5805:6:6"},"nodeType":"YulFunctionCall","src":"5805:14:6"},"nodeType":"YulExpressionStatement","src":"5805:14:6"},{"nodeType":"YulAssignment","src":"5828:26:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5846:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5849:4:6","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"5836:9:6"},"nodeType":"YulFunctionCall","src":"5836:18:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"5828:4:6"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"5761:3:6","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"5769:4:6","type":""}],"src":"5720:141:6"},{"body":{"nodeType":"YulBlock","src":"5998:767:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6008:29:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6031:5:6"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"6025:5:6"},"nodeType":"YulFunctionCall","src":"6025:12:6"},"variables":[{"name":"slotValue","nodeType":"YulTypedName","src":"6012:9:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6046:50:6","value":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"6086:9:6"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"6060:25:6"},"nodeType":"YulFunctionCall","src":"6060:36:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6050:6:6","type":""}]},{"nodeType":"YulAssignment","src":"6105:96:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6189:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"6194:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6112:76:6"},"nodeType":"YulFunctionCall","src":"6112:89:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6105:3:6"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"6250:159:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6303:3:6"},{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"6312:9:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6327:4:6","type":"","value":"0xff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6323:3:6"},"nodeType":"YulFunctionCall","src":"6323:9:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6308:3:6"},"nodeType":"YulFunctionCall","src":"6308:25:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6296:6:6"},"nodeType":"YulFunctionCall","src":"6296:38:6"},"nodeType":"YulExpressionStatement","src":"6296:38:6"},{"nodeType":"YulAssignment","src":"6347:52:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6358:3:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6367:6:6"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6389:6:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6382:6:6"},"nodeType":"YulFunctionCall","src":"6382:14:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6375:6:6"},"nodeType":"YulFunctionCall","src":"6375:22:6"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6363:3:6"},"nodeType":"YulFunctionCall","src":"6363:35:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6354:3:6"},"nodeType":"YulFunctionCall","src":"6354:45:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6347:3:6"}]}]},"nodeType":"YulCase","src":"6243:166:6","value":{"kind":"number","nodeType":"YulLiteral","src":"6248:1:6","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"6425:334:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6470:53:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6517:5:6"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"6485:31:6"},"nodeType":"YulFunctionCall","src":"6485:38:6"},"variables":[{"name":"dataPos","nodeType":"YulTypedName","src":"6474:7:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6536:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"6545:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6540:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"6603:110:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6632:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"6637:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6628:3:6"},"nodeType":"YulFunctionCall","src":"6628:11:6"},{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"6647:7:6"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"6641:5:6"},"nodeType":"YulFunctionCall","src":"6641:14:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6621:6:6"},"nodeType":"YulFunctionCall","src":"6621:35:6"},"nodeType":"YulExpressionStatement","src":"6621:35:6"},{"nodeType":"YulAssignment","src":"6673:26:6","value":{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"6688:7:6"},{"kind":"number","nodeType":"YulLiteral","src":"6697:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6684:3:6"},"nodeType":"YulFunctionCall","src":"6684:15:6"},"variableNames":[{"name":"dataPos","nodeType":"YulIdentifier","src":"6673:7:6"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6570:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"6573:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6567:2:6"},"nodeType":"YulFunctionCall","src":"6567:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6581:21:6","statements":[{"nodeType":"YulAssignment","src":"6583:17:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6592:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"6595:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6588:3:6"},"nodeType":"YulFunctionCall","src":"6588:12:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6583:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"6563:3:6","statements":[]},"src":"6559:154:6"},{"nodeType":"YulAssignment","src":"6726:23:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6737:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"6742:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6733:3:6"},"nodeType":"YulFunctionCall","src":"6733:16:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6726:3:6"}]}]},"nodeType":"YulCase","src":"6418:341:6","value":{"kind":"number","nodeType":"YulLiteral","src":"6423:1:6","type":"","value":"1"}}],"expression":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"6221:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6232:1:6","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6217:3:6"},"nodeType":"YulFunctionCall","src":"6217:17:6"},"nodeType":"YulSwitch","src":"6210:549:6"}]},"name":"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5979:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5986:3:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5994:3:6","type":""}],"src":"5891:874:6"},{"body":{"nodeType":"YulBlock","src":"6877:108:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6899:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"6907:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6895:3:6"},"nodeType":"YulFunctionCall","src":"6895:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"6911:66:6","type":"","value":"0x0a0a4d653a200000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6888:6:6"},"nodeType":"YulFunctionCall","src":"6888:90:6"},"nodeType":"YulExpressionStatement","src":"6888:90:6"}]},"name":"store_literal_in_memory_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6869:6:6","type":""}],"src":"6771:214:6"},{"body":{"nodeType":"YulBlock","src":"7155:236:6","statements":[{"nodeType":"YulAssignment","src":"7165:91:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7249:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"7254:1:6","type":"","value":"6"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7172:76:6"},"nodeType":"YulFunctionCall","src":"7172:84:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7165:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7354:3:6"}],"functionName":{"name":"store_literal_in_memory_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262","nodeType":"YulIdentifier","src":"7265:88:6"},"nodeType":"YulFunctionCall","src":"7265:93:6"},"nodeType":"YulExpressionStatement","src":"7265:93:6"},{"nodeType":"YulAssignment","src":"7367:18:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7378:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"7383:1:6","type":"","value":"6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7374:3:6"},"nodeType":"YulFunctionCall","src":"7374:11:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7367:3:6"}]}]},"name":"abi_encode_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7143:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7151:3:6","type":""}],"src":"6991:400:6"},{"body":{"nodeType":"YulBlock","src":"7507:280:6","statements":[{"nodeType":"YulVariableDeclaration","src":"7517:53:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7564:5:6"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7531:32:6"},"nodeType":"YulFunctionCall","src":"7531:39:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7521:6:6","type":""}]},{"nodeType":"YulAssignment","src":"7579:96:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7663:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"7668:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7586:76:6"},"nodeType":"YulFunctionCall","src":"7586:89:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7579:3:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7723:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"7730:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7719:3:6"},"nodeType":"YulFunctionCall","src":"7719:16:6"},{"name":"pos","nodeType":"YulIdentifier","src":"7737:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"7742:6:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7684:34:6"},"nodeType":"YulFunctionCall","src":"7684:65:6"},"nodeType":"YulExpressionStatement","src":"7684:65:6"},{"nodeType":"YulAssignment","src":"7758:23:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7769:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"7774:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7765:3:6"},"nodeType":"YulFunctionCall","src":"7765:16:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7758:3:6"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7488:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7495:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7503:3:6","type":""}],"src":"7397:390:6"},{"body":{"nodeType":"YulBlock","src":"7899:108:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7921:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"7929:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7917:3:6"},"nodeType":"YulFunctionCall","src":"7917:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"7933:66:6","type":"","value":"0x0a4465766963653a200000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7910:6:6"},"nodeType":"YulFunctionCall","src":"7910:90:6"},"nodeType":"YulExpressionStatement","src":"7910:90:6"}]},"name":"store_literal_in_memory_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7891:6:6","type":""}],"src":"7793:214:6"},{"body":{"nodeType":"YulBlock","src":"8177:236:6","statements":[{"nodeType":"YulAssignment","src":"8187:91:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8271:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8276:1:6","type":"","value":"9"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8194:76:6"},"nodeType":"YulFunctionCall","src":"8194:84:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8187:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8376:3:6"}],"functionName":{"name":"store_literal_in_memory_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60","nodeType":"YulIdentifier","src":"8287:88:6"},"nodeType":"YulFunctionCall","src":"8287:93:6"},"nodeType":"YulExpressionStatement","src":"8287:93:6"},{"nodeType":"YulAssignment","src":"8389:18:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8400:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8405:1:6","type":"","value":"9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8396:3:6"},"nodeType":"YulFunctionCall","src":"8396:11:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8389:3:6"}]}]},"name":"abi_encode_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8165:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8173:3:6","type":""}],"src":"8013:400:6"},{"body":{"nodeType":"YulBlock","src":"8525:108:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8547:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"8555:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8543:3:6"},"nodeType":"YulFunctionCall","src":"8543:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"8559:66:6","type":"","value":"0x0a4973737565642061743a200000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8536:6:6"},"nodeType":"YulFunctionCall","src":"8536:90:6"},"nodeType":"YulExpressionStatement","src":"8536:90:6"}]},"name":"store_literal_in_memory_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8517:6:6","type":""}],"src":"8419:214:6"},{"body":{"nodeType":"YulBlock","src":"8803:238:6","statements":[{"nodeType":"YulAssignment","src":"8813:92:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8897:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8902:2:6","type":"","value":"12"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"8820:76:6"},"nodeType":"YulFunctionCall","src":"8820:85:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8813:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9003:3:6"}],"functionName":{"name":"store_literal_in_memory_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb","nodeType":"YulIdentifier","src":"8914:88:6"},"nodeType":"YulFunctionCall","src":"8914:93:6"},"nodeType":"YulExpressionStatement","src":"8914:93:6"},{"nodeType":"YulAssignment","src":"9016:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9027:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9032:2:6","type":"","value":"12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9023:3:6"},"nodeType":"YulFunctionCall","src":"9023:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9016:3:6"}]}]},"name":"abi_encode_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8791:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8799:3:6","type":""}],"src":"8639:402:6"},{"body":{"nodeType":"YulBlock","src":"9627:967:6","statements":[{"nodeType":"YulAssignment","src":"9638:99:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9724:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"9733:3:6"}],"functionName":{"name":"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"9645:78:6"},"nodeType":"YulFunctionCall","src":"9645:92:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9638:3:6"}]},{"nodeType":"YulAssignment","src":"9747:155:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9898:3:6"}],"functionName":{"name":"abi_encode_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"9754:142:6"},"nodeType":"YulFunctionCall","src":"9754:148:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9747:3:6"}]},{"nodeType":"YulAssignment","src":"9912:102:6","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10001:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"10010:3:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"9919:81:6"},"nodeType":"YulFunctionCall","src":"9919:95:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9912:3:6"}]},{"nodeType":"YulAssignment","src":"10024:155:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10175:3:6"}],"functionName":{"name":"abi_encode_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10031:142:6"},"nodeType":"YulFunctionCall","src":"10031:148:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10024:3:6"}]},{"nodeType":"YulAssignment","src":"10189:102:6","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"10278:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"10287:3:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10196:81:6"},"nodeType":"YulFunctionCall","src":"10196:95:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10189:3:6"}]},{"nodeType":"YulAssignment","src":"10301:155:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10452:3:6"}],"functionName":{"name":"abi_encode_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10308:142:6"},"nodeType":"YulFunctionCall","src":"10308:148:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10301:3:6"}]},{"nodeType":"YulAssignment","src":"10466:102:6","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"10555:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"10564:3:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10473:81:6"},"nodeType":"YulFunctionCall","src":"10473:95:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10466:3:6"}]},{"nodeType":"YulAssignment","src":"10578:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"10585:3:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10578:3:6"}]}]},"name":"abi_encode_tuple_packed_t_string_storage_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_t_string_memory_ptr_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_t_string_memory_ptr_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9582:3:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9588:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9596:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9604:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9612:6:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9623:3:6","type":""}],"src":"9047:1547:6"},{"body":{"nodeType":"YulBlock","src":"10628:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10645:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10648:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10638:6:6"},"nodeType":"YulFunctionCall","src":"10638:88:6"},"nodeType":"YulExpressionStatement","src":"10638:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10742:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10745:4:6","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10735:6:6"},"nodeType":"YulFunctionCall","src":"10735:15:6"},"nodeType":"YulExpressionStatement","src":"10735:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10766:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10769:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10759:6:6"},"nodeType":"YulFunctionCall","src":"10759:15:6"},"nodeType":"YulExpressionStatement","src":"10759:15:6"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"10600:180:6"},{"body":{"nodeType":"YulBlock","src":"10814:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10831:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10834:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10824:6:6"},"nodeType":"YulFunctionCall","src":"10824:88:6"},"nodeType":"YulExpressionStatement","src":"10824:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10928:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10931:4:6","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10921:6:6"},"nodeType":"YulFunctionCall","src":"10921:15:6"},"nodeType":"YulExpressionStatement","src":"10921:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10952:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10955:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10945:6:6"},"nodeType":"YulFunctionCall","src":"10945:15:6"},"nodeType":"YulExpressionStatement","src":"10945:15:6"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"10786:180:6"},{"body":{"nodeType":"YulBlock","src":"11020:362:6","statements":[{"nodeType":"YulAssignment","src":"11030:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11053:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11035:17:6"},"nodeType":"YulFunctionCall","src":"11035:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"11030:1:6"}]},{"nodeType":"YulAssignment","src":"11064:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11087:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11069:17:6"},"nodeType":"YulFunctionCall","src":"11069:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"11064:1:6"}]},{"nodeType":"YulVariableDeclaration","src":"11098:28:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11121:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"11124:1:6"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11117:3:6"},"nodeType":"YulFunctionCall","src":"11117:9:6"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"11102:11:6","type":""}]},{"nodeType":"YulAssignment","src":"11135:41:6","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"11164:11:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11146:17:6"},"nodeType":"YulFunctionCall","src":"11146:30:6"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"11135:7:6"}]},{"body":{"nodeType":"YulBlock","src":"11353:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11355:16:6"},"nodeType":"YulFunctionCall","src":"11355:18:6"},"nodeType":"YulExpressionStatement","src":"11355:18:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11286:1:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11279:6:6"},"nodeType":"YulFunctionCall","src":"11279:9:6"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11309:1:6"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"11316:7:6"},{"name":"x","nodeType":"YulIdentifier","src":"11325:1:6"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"11312:3:6"},"nodeType":"YulFunctionCall","src":"11312:15:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11306:2:6"},"nodeType":"YulFunctionCall","src":"11306:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"11259:2:6"},"nodeType":"YulFunctionCall","src":"11259:83:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11239:6:6"},"nodeType":"YulFunctionCall","src":"11239:113:6"},"nodeType":"YulIf","src":"11236:139:6"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11003:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"11006:1:6","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"11012:7:6","type":""}],"src":"10972:410:6"},{"body":{"nodeType":"YulBlock","src":"11432:147:6","statements":[{"nodeType":"YulAssignment","src":"11442:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11465:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11447:17:6"},"nodeType":"YulFunctionCall","src":"11447:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"11442:1:6"}]},{"nodeType":"YulAssignment","src":"11476:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11499:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11481:17:6"},"nodeType":"YulFunctionCall","src":"11481:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"11476:1:6"}]},{"nodeType":"YulAssignment","src":"11510:16:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11521:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"11524:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11517:3:6"},"nodeType":"YulFunctionCall","src":"11517:9:6"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11510:3:6"}]},{"body":{"nodeType":"YulBlock","src":"11550:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11552:16:6"},"nodeType":"YulFunctionCall","src":"11552:18:6"},"nodeType":"YulExpressionStatement","src":"11552:18:6"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11542:1:6"},{"name":"sum","nodeType":"YulIdentifier","src":"11545:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11539:2:6"},"nodeType":"YulFunctionCall","src":"11539:10:6"},"nodeType":"YulIf","src":"11536:36:6"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11419:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"11422:1:6","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11428:3:6","type":""}],"src":"11388:191:6"},{"body":{"nodeType":"YulBlock","src":"11613:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11630:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11633:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11623:6:6"},"nodeType":"YulFunctionCall","src":"11623:88:6"},"nodeType":"YulExpressionStatement","src":"11623:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11727:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11730:4:6","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11720:6:6"},"nodeType":"YulFunctionCall","src":"11720:15:6"},"nodeType":"YulExpressionStatement","src":"11720:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11751:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11754:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11744:6:6"},"nodeType":"YulFunctionCall","src":"11744:15:6"},"nodeType":"YulExpressionStatement","src":"11744:15:6"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"11585:180:6"},{"body":{"nodeType":"YulBlock","src":"11814:128:6","statements":[{"nodeType":"YulAssignment","src":"11824:33:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11851:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11833:17:6"},"nodeType":"YulFunctionCall","src":"11833:24:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11824:5:6"}]},{"body":{"nodeType":"YulBlock","src":"11885:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11887:16:6"},"nodeType":"YulFunctionCall","src":"11887:18:6"},"nodeType":"YulExpressionStatement","src":"11887:18:6"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11872:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"11879:4:6","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11869:2:6"},"nodeType":"YulFunctionCall","src":"11869:15:6"},"nodeType":"YulIf","src":"11866:41:6"},{"nodeType":"YulAssignment","src":"11916:20:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11927:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"11934:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11923:3:6"},"nodeType":"YulFunctionCall","src":"11923:13:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"11916:3:6"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11800:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"11810:3:6","type":""}],"src":"11771:171:6"},{"body":{"nodeType":"YulBlock","src":"12054:76:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12076:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"12084:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12072:3:6"},"nodeType":"YulFunctionCall","src":"12072:14:6"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"12088:34:6","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12065:6:6"},"nodeType":"YulFunctionCall","src":"12065:58:6"},"nodeType":"YulExpressionStatement","src":"12065:58:6"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12046:6:6","type":""}],"src":"11948:182:6"},{"body":{"nodeType":"YulBlock","src":"12282:220:6","statements":[{"nodeType":"YulAssignment","src":"12292:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12358:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"12363:2:6","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12299:58:6"},"nodeType":"YulFunctionCall","src":"12299:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12292:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12464:3:6"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"12375:88:6"},"nodeType":"YulFunctionCall","src":"12375:93:6"},"nodeType":"YulExpressionStatement","src":"12375:93:6"},{"nodeType":"YulAssignment","src":"12477:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12488:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"12493:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12484:3:6"},"nodeType":"YulFunctionCall","src":"12484:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12477:3:6"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12270:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12278:3:6","type":""}],"src":"12136:366:6"},{"body":{"nodeType":"YulBlock","src":"12679:248:6","statements":[{"nodeType":"YulAssignment","src":"12689:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12701:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12712:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12697:3:6"},"nodeType":"YulFunctionCall","src":"12697:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12689:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12736:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12747:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12732:3:6"},"nodeType":"YulFunctionCall","src":"12732:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12755:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"12761:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12751:3:6"},"nodeType":"YulFunctionCall","src":"12751:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12725:6:6"},"nodeType":"YulFunctionCall","src":"12725:47:6"},"nodeType":"YulExpressionStatement","src":"12725:47:6"},{"nodeType":"YulAssignment","src":"12781:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12915:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12789:124:6"},"nodeType":"YulFunctionCall","src":"12789:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12781:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12659:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12674:4:6","type":""}],"src":"12508:419:6"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    // struct TokenAuthenticated.TokenRequest -> struct TokenAuthenticated.TokenRequest\n    function abi_encode_t_struct$_TokenRequest_$1417_memory_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x60)\n\n        {\n            // owner\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // device\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // issuedAt\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x40))\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__to_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_struct$_TokenRequest_$1417_memory_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    // string -> string\n    function abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> ret {\n        let slotValue := sload(value)\n        let length := extract_byte_array_length(slotValue)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        switch and(slotValue, 1)\n        case 0 {\n            // short byte array\n            mstore(pos, and(slotValue, not(0xff)))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            // long byte array\n            let dataPos := array_dataslot_t_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, 0x20) } {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, 1)\n            }\n            ret := add(pos, length)\n        }\n    }\n\n    function store_literal_in_memory_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262(memPtr) {\n\n        mstore(add(memPtr, 0), 0x0a0a4d653a200000000000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 6)\n        store_literal_in_memory_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262(pos)\n        end := add(pos, 6)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60(memPtr) {\n\n        mstore(add(memPtr, 0), 0x0a4465766963653a200000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 9)\n        store_literal_in_memory_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60(pos)\n        end := add(pos, 9)\n    }\n\n    function store_literal_in_memory_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb(memPtr) {\n\n        mstore(add(memPtr, 0), 0x0a4973737565642061743a200000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 12)\n        store_literal_in_memory_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb(pos)\n        end := add(pos, 12)\n    }\n\n    function abi_encode_tuple_packed_t_string_storage_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_t_string_memory_ptr_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_t_string_memory_ptr_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value3, value2, value1, value0) -> end {\n\n        pos := abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        pos := abi_encode_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)\n\n        pos := abi_encode_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value3,  pos)\n\n        end := pos\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c8063b6ad16a814610046578063bebc479c14610077578063cb2e604314610095575b600080fd5b610060600480360381019061005b9190610749565b6100b3565b60405161006e929190610883565b60405180910390f35b61007f610127565b60405161008c91906108b3565b60405180910390f35b61009d6101b5565b6040516100aa91906108e4565b60405180910390f35b6100bb610699565b606060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200160014361010d919061092e565b81525091508161011c836101bb565b915091509250929050565b6000805461013490610991565b80601f016020809104026020016040519081016040528092919081815260200182805461016090610991565b80156101ad5780601f10610182576101008083540402835291602001916101ad565b820191906000526020600020905b81548152906001019060200180831161019057829003601f168201915b505050505081565b60015481565b606060006101cc836000015161020f565b6101d9846020015161020f565b6101e6856040015161023c565b6040516020016101f99493929190610b7a565b6040516020818303038152906040529050919050565b60606102358273ffffffffffffffffffffffffffffffffffffffff16601460ff1661030a565b9050919050565b60606000600161024b84610546565b01905060008167ffffffffffffffff81111561026a57610269610bd9565b5b6040519080825280601f01601f19166020018201604052801561029c5781602001600182028036833780820191505090505b509050600082602001820190505b6001156102ff578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816102f3576102f2610c08565b5b049450600085036102aa575b819350505050919050565b60606000600283600261031d9190610c37565b6103279190610c79565b67ffffffffffffffff8111156103405761033f610bd9565b5b6040519080825280601f01601f1916602001820160405280156103725781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106103aa576103a9610cad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061040e5761040d610cad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261044e9190610c37565b6104589190610c79565b90505b60018111156104f8577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061049a57610499610cad565b5b1a60f81b8282815181106104b1576104b0610cad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806104f190610cdc565b905061045b565b506000841461053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390610d51565b60405180910390fd5b8091505092915050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105a4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161059a57610599610c08565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106105e1576d04ee2d6d415b85acef810000000083816105d7576105d6610c08565b5b0492506020810190505b662386f26fc10000831061061057662386f26fc10000838161060657610605610c08565b5b0492506010810190505b6305f5e1008310610639576305f5e100838161062f5761062e610c08565b5b0492506008810190505b612710831061065e57612710838161065457610653610c08565b5b0492506004810190505b60648310610681576064838161067757610676610c08565b5b0492506002810190505b600a8310610690576001810190505b80915050919050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610716826106eb565b9050919050565b6107268161070b565b811461073157600080fd5b50565b6000813590506107438161071d565b92915050565b600080604083850312156107605761075f6106e6565b5b600061076e85828601610734565b925050602061077f85828601610734565b9150509250929050565b6107928161070b565b82525050565b6000819050919050565b6107ab81610798565b82525050565b6060820160008201516107c76000850182610789565b5060208201516107da6020850182610789565b5060408201516107ed60408501826107a2565b50505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561082d578082015181840152602081019050610812565b60008484015250505050565b6000601f19601f8301169050919050565b6000610855826107f3565b61085f81856107fe565b935061086f81856020860161080f565b61087881610839565b840191505092915050565b600060808201905061089860008301856107b1565b81810360608301526108aa818461084a565b90509392505050565b600060208201905081810360008301526108cd818461084a565b905092915050565b6108de81610798565b82525050565b60006020820190506108f960008301846108d5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061093982610798565b915061094483610798565b925082820390508181111561095c5761095b6108ff565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806109a957607f821691505b6020821081036109bc576109bb610962565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b600081546109ef81610991565b6109f981866109c2565b94506001821660008114610a145760018114610a2957610a5c565b60ff1983168652811515820286019350610a5c565b610a32856109cd565b60005b83811015610a5457815481890152600182019150602081019050610a35565b838801955050505b50505092915050565b7f0a0a4d653a200000000000000000000000000000000000000000000000000000600082015250565b6000610a9b6006836109c2565b9150610aa682610a65565b600682019050919050565b6000610abc826107f3565b610ac681856109c2565b9350610ad681856020860161080f565b80840191505092915050565b7f0a4465766963653a200000000000000000000000000000000000000000000000600082015250565b6000610b186009836109c2565b9150610b2382610ae2565b600982019050919050565b7f0a4973737565642061743a200000000000000000000000000000000000000000600082015250565b6000610b64600c836109c2565b9150610b6f82610b2e565b600c82019050919050565b6000610b8682876109e2565b9150610b9182610a8e565b9150610b9d8286610ab1565b9150610ba882610b0b565b9150610bb48285610ab1565b9150610bbf82610b57565b9150610bcb8284610ab1565b915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c4282610798565b9150610c4d83610798565b9250828202610c5b81610798565b91508282048414831517610c7257610c716108ff565b5b5092915050565b6000610c8482610798565b9150610c8f83610798565b9250828201905080821115610ca757610ca66108ff565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ce782610798565b915060008203610cfa57610cf96108ff565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000610d3b6020836107fe565b9150610d4682610d05565b602082019050919050565b60006020820190508181036000830152610d6a81610d2e565b905091905056fea26469706673582212200ade801375e2768b8981495412ed4fd9b296a1c822289d1badaac68bdc78164264736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB6AD16A8 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xBEBC479C EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0xCB2E6043 EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x749 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6E SWAP3 SWAP2 SWAP1 PUSH2 0x883 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7F PUSH2 0x127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x8B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9D PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP2 SWAP1 PUSH2 0x8E4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBB PUSH2 0x699 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 NUMBER PUSH2 0x10D SWAP2 SWAP1 PUSH2 0x92E JUMP JUMPDEST DUP2 MSTORE POP SWAP2 POP DUP2 PUSH2 0x11C DUP4 PUSH2 0x1BB JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x134 SWAP1 PUSH2 0x991 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x160 SWAP1 PUSH2 0x991 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1AD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x182 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1AD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x190 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1CC DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x20F JUMP JUMPDEST PUSH2 0x1D9 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x20F JUMP JUMPDEST PUSH2 0x1E6 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x23C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1F9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB7A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x235 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0x30A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x24B DUP5 PUSH2 0x546 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26A JUMPI PUSH2 0x269 PUSH2 0xBD9 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x29C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x2FF JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2F3 JUMPI PUSH2 0x2F2 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x2AA JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0x31D SWAP2 SWAP1 PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x327 SWAP2 SWAP1 PUSH2 0xC79 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x340 JUMPI PUSH2 0x33F PUSH2 0xBD9 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x372 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3AA JUMPI PUSH2 0x3A9 PUSH2 0xCAD JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x40E JUMPI PUSH2 0x40D PUSH2 0xCAD JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0x44E SWAP2 SWAP1 PUSH2 0xC37 JUMP JUMPDEST PUSH2 0x458 SWAP2 SWAP1 PUSH2 0xC79 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x4F8 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0x49A JUMPI PUSH2 0x499 PUSH2 0xCAD JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4B1 JUMPI PUSH2 0x4B0 PUSH2 0xCAD JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0x4F1 SWAP1 PUSH2 0xCDC JUMP JUMPDEST SWAP1 POP PUSH2 0x45B JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x53C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x533 SWAP1 PUSH2 0xD51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x5A4 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x59A JUMPI PUSH2 0x599 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x5E1 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x5D7 JUMPI PUSH2 0x5D6 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x610 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x606 JUMPI PUSH2 0x605 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x639 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x62F JUMPI PUSH2 0x62E PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x65E JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x654 JUMPI PUSH2 0x653 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x681 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x677 JUMPI PUSH2 0x676 PUSH2 0xC08 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x690 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x716 DUP3 PUSH2 0x6EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x726 DUP2 PUSH2 0x70B JUMP JUMPDEST DUP2 EQ PUSH2 0x731 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x743 DUP2 PUSH2 0x71D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x760 JUMPI PUSH2 0x75F PUSH2 0x6E6 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x76E DUP6 DUP3 DUP7 ADD PUSH2 0x734 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x77F DUP6 DUP3 DUP7 ADD PUSH2 0x734 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x792 DUP2 PUSH2 0x70B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7AB DUP2 PUSH2 0x798 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x7C7 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x789 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x7DA PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x789 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x7ED PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x7A2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x82D JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x812 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x855 DUP3 PUSH2 0x7F3 JUMP JUMPDEST PUSH2 0x85F DUP2 DUP6 PUSH2 0x7FE JUMP JUMPDEST SWAP4 POP PUSH2 0x86F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x80F JUMP JUMPDEST PUSH2 0x878 DUP2 PUSH2 0x839 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x898 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x7B1 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x8AA DUP2 DUP5 PUSH2 0x84A JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x8CD DUP2 DUP5 PUSH2 0x84A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x8DE DUP2 PUSH2 0x798 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8F9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x8D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x939 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH2 0x944 DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x95C JUMPI PUSH2 0x95B PUSH2 0x8FF JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x9A9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x9BC JUMPI PUSH2 0x9BB PUSH2 0x962 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x9EF DUP2 PUSH2 0x991 JUMP JUMPDEST PUSH2 0x9F9 DUP2 DUP7 PUSH2 0x9C2 JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0xA14 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0xA29 JUMPI PUSH2 0xA5C JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 ISZERO ISZERO DUP3 MUL DUP7 ADD SWAP4 POP PUSH2 0xA5C JUMP JUMPDEST PUSH2 0xA32 DUP6 PUSH2 0x9CD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA54 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA35 JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xA0A4D653A200000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA9B PUSH1 0x6 DUP4 PUSH2 0x9C2 JUMP JUMPDEST SWAP2 POP PUSH2 0xAA6 DUP3 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x6 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xABC DUP3 PUSH2 0x7F3 JUMP JUMPDEST PUSH2 0xAC6 DUP2 DUP6 PUSH2 0x9C2 JUMP JUMPDEST SWAP4 POP PUSH2 0xAD6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x80F JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xA4465766963653A200000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB18 PUSH1 0x9 DUP4 PUSH2 0x9C2 JUMP JUMPDEST SWAP2 POP PUSH2 0xB23 DUP3 PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x9 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xA4973737565642061743A200000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB64 PUSH1 0xC DUP4 PUSH2 0x9C2 JUMP JUMPDEST SWAP2 POP PUSH2 0xB6F DUP3 PUSH2 0xB2E JUMP JUMPDEST PUSH1 0xC DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB86 DUP3 DUP8 PUSH2 0x9E2 JUMP JUMPDEST SWAP2 POP PUSH2 0xB91 DUP3 PUSH2 0xA8E JUMP JUMPDEST SWAP2 POP PUSH2 0xB9D DUP3 DUP7 PUSH2 0xAB1 JUMP JUMPDEST SWAP2 POP PUSH2 0xBA8 DUP3 PUSH2 0xB0B JUMP JUMPDEST SWAP2 POP PUSH2 0xBB4 DUP3 DUP6 PUSH2 0xAB1 JUMP JUMPDEST SWAP2 POP PUSH2 0xBBF DUP3 PUSH2 0xB57 JUMP JUMPDEST SWAP2 POP PUSH2 0xBCB DUP3 DUP5 PUSH2 0xAB1 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xC42 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH2 0xC4D DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0xC5B DUP2 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0xC72 JUMPI PUSH2 0xC71 PUSH2 0x8FF JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC84 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH2 0xC8F DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xCA7 JUMPI PUSH2 0xCA6 PUSH2 0x8FF JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCE7 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0xCFA JUMPI PUSH2 0xCF9 PUSH2 0x8FF JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD3B PUSH1 0x20 DUP4 PUSH2 0x7FE JUMP JUMPDEST SWAP2 POP PUSH2 0xD46 DUP3 PUSH2 0xD05 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD6A DUP2 PUSH2 0xD2E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP 0xDE DUP1 SGT PUSH22 0xE2768B8981495412ED4FD9B296A1C822289D1BADAAC6 DUP12 0xDC PUSH25 0x164264736F6C63430008130033000000000000000000000000 ","sourceMap":"312:2137:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1287:340;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;346:23;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;376:33;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1287:340;1389:27;;:::i;:::-;1418:13;1453:118;;;;;;;;1487:5;1453:118;;;;;;1514:6;1453:118;;;;;;1559:1;1544:12;:16;;;;:::i;:::-;1453:118;;;1443:128;;1589:7;1598:21;1611:7;1598:12;:21::i;:::-;1581:39;;;;1287:340;;;;;:::o;346:23::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;376:33::-;;;;:::o;1852:408::-;1940:13;2009:9;2056:34;2076:7;:13;;;2056:19;:34::i;:::-;2130:35;2150:7;:14;;;2130:19;:35::i;:::-;2208:34;2225:7;:16;;;2208;:34::i;:::-;1979:273;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1965:288;;1852:408;;;:::o;2102:149:0:-;2160:13;2192:52;2220:4;2204:22;;311:2;2192:52;;:11;:52::i;:::-;2185:59;;2102:149;;;:::o;415:696::-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;788:280;1032:21;788:280;1088:6;1081:13;;;;;415:696;;;:::o;1513:437::-;1588:13;1613:19;1658:1;1649:6;1645:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1635:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1613:47;;1670:15;:6;1677:1;1670:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1695;:6;1702:1;1695:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1725:9;1750:1;1741:6;1737:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1725:26;;1720:128;1757:1;1753;:5;1720:128;;;1791:8;1808:3;1800:5;:11;1791:21;;;;;;;:::i;:::-;;;;;1779:6;1786:1;1779:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1836:1;1826:11;;;;;1760:3;;;;:::i;:::-;;;1720:128;;;;1874:1;1865:5;:10;1857:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1936:6;1922:21;;;1513:437;;;;:::o;9889:890:2:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;88:117:6:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:474::-;909:6;917;966:2;954:9;945:7;941:23;937:32;934:119;;;972:79;;:::i;:::-;934:119;1092:1;1117:53;1162:7;1153:6;1142:9;1138:22;1117:53;:::i;:::-;1107:63;;1063:117;1219:2;1245:53;1290:7;1281:6;1270:9;1266:22;1245:53;:::i;:::-;1235:63;;1190:118;841:474;;;;;:::o;1321:108::-;1398:24;1416:5;1398:24;:::i;:::-;1393:3;1386:37;1321:108;;:::o;1435:77::-;1472:7;1501:5;1490:16;;1435:77;;;:::o;1518:108::-;1595:24;1613:5;1595:24;:::i;:::-;1590:3;1583:37;1518:108;;:::o;1720:698::-;1877:4;1872:3;1868:14;1965:4;1958:5;1954:16;1948:23;1984:63;2041:4;2036:3;2032:14;2018:12;1984:63;:::i;:::-;1892:165;2141:4;2134:5;2130:16;2124:23;2160:63;2217:4;2212:3;2208:14;2194:12;2160:63;:::i;:::-;2067:166;2319:4;2312:5;2308:16;2302:23;2338:63;2395:4;2390:3;2386:14;2372:12;2338:63;:::i;:::-;2243:168;1846:572;1720:698;;:::o;2424:99::-;2476:6;2510:5;2504:12;2494:22;;2424:99;;;:::o;2529:169::-;2613:11;2647:6;2642:3;2635:19;2687:4;2682:3;2678:14;2663:29;;2529:169;;;;:::o;2704:246::-;2785:1;2795:113;2809:6;2806:1;2803:13;2795:113;;;2894:1;2889:3;2885:11;2879:18;2875:1;2870:3;2866:11;2859:39;2831:2;2828:1;2824:10;2819:15;;2795:113;;;2942:1;2933:6;2928:3;2924:16;2917:27;2766:184;2704:246;;;:::o;2956:102::-;2997:6;3048:2;3044:7;3039:2;3032:5;3028:14;3024:28;3014:38;;2956:102;;;:::o;3064:377::-;3152:3;3180:39;3213:5;3180:39;:::i;:::-;3235:71;3299:6;3294:3;3235:71;:::i;:::-;3228:78;;3315:65;3373:6;3368:3;3361:4;3354:5;3350:16;3315:65;:::i;:::-;3405:29;3427:6;3405:29;:::i;:::-;3400:3;3396:39;3389:46;;3156:285;3064:377;;;;:::o;3447:544::-;3648:4;3686:3;3675:9;3671:19;3663:27;;3700:131;3828:1;3817:9;3813:17;3804:6;3700:131;:::i;:::-;3878:9;3872:4;3868:20;3863:2;3852:9;3848:18;3841:48;3906:78;3979:4;3970:6;3906:78;:::i;:::-;3898:86;;3447:544;;;;;:::o;3997:313::-;4110:4;4148:2;4137:9;4133:18;4125:26;;4197:9;4191:4;4187:20;4183:1;4172:9;4168:17;4161:47;4225:78;4298:4;4289:6;4225:78;:::i;:::-;4217:86;;3997:313;;;;:::o;4316:118::-;4403:24;4421:5;4403:24;:::i;:::-;4398:3;4391:37;4316:118;;:::o;4440:222::-;4533:4;4571:2;4560:9;4556:18;4548:26;;4584:71;4652:1;4641:9;4637:17;4628:6;4584:71;:::i;:::-;4440:222;;;;:::o;4668:180::-;4716:77;4713:1;4706:88;4813:4;4810:1;4803:15;4837:4;4834:1;4827:15;4854:194;4894:4;4914:20;4932:1;4914:20;:::i;:::-;4909:25;;4948:20;4966:1;4948:20;:::i;:::-;4943:25;;4992:1;4989;4985:9;4977:17;;5016:1;5010:4;5007:11;5004:37;;;5021:18;;:::i;:::-;5004:37;4854:194;;;;:::o;5054:180::-;5102:77;5099:1;5092:88;5199:4;5196:1;5189:15;5223:4;5220:1;5213:15;5240:320;5284:6;5321:1;5315:4;5311:12;5301:22;;5368:1;5362:4;5358:12;5389:18;5379:81;;5445:4;5437:6;5433:17;5423:27;;5379:81;5507:2;5499:6;5496:14;5476:18;5473:38;5470:84;;5526:18;;:::i;:::-;5470:84;5291:269;5240:320;;;:::o;5566:148::-;5668:11;5705:3;5690:18;;5566:148;;;;:::o;5720:141::-;5769:4;5792:3;5784:11;;5815:3;5812:1;5805:14;5849:4;5846:1;5836:18;5828:26;;5720:141;;;:::o;5891:874::-;5994:3;6031:5;6025:12;6060:36;6086:9;6060:36;:::i;:::-;6112:89;6194:6;6189:3;6112:89;:::i;:::-;6105:96;;6232:1;6221:9;6217:17;6248:1;6243:166;;;;6423:1;6418:341;;;;6210:549;;6243:166;6327:4;6323:9;6312;6308:25;6303:3;6296:38;6389:6;6382:14;6375:22;6367:6;6363:35;6358:3;6354:45;6347:52;;6243:166;;6418:341;6485:38;6517:5;6485:38;:::i;:::-;6545:1;6559:154;6573:6;6570:1;6567:13;6559:154;;;6647:7;6641:14;6637:1;6632:3;6628:11;6621:35;6697:1;6688:7;6684:15;6673:26;;6595:4;6592:1;6588:12;6583:17;;6559:154;;;6742:6;6737:3;6733:16;6726:23;;6425:334;;6210:549;;5998:767;;5891:874;;;;:::o;6771:214::-;6911:66;6907:1;6899:6;6895:14;6888:90;6771:214;:::o;6991:400::-;7151:3;7172:84;7254:1;7249:3;7172:84;:::i;:::-;7165:91;;7265:93;7354:3;7265:93;:::i;:::-;7383:1;7378:3;7374:11;7367:18;;6991:400;;;:::o;7397:390::-;7503:3;7531:39;7564:5;7531:39;:::i;:::-;7586:89;7668:6;7663:3;7586:89;:::i;:::-;7579:96;;7684:65;7742:6;7737:3;7730:4;7723:5;7719:16;7684:65;:::i;:::-;7774:6;7769:3;7765:16;7758:23;;7507:280;7397:390;;;;:::o;7793:214::-;7933:66;7929:1;7921:6;7917:14;7910:90;7793:214;:::o;8013:400::-;8173:3;8194:84;8276:1;8271:3;8194:84;:::i;:::-;8187:91;;8287:93;8376:3;8287:93;:::i;:::-;8405:1;8400:3;8396:11;8389:18;;8013:400;;;:::o;8419:214::-;8559:66;8555:1;8547:6;8543:14;8536:90;8419:214;:::o;8639:402::-;8799:3;8820:85;8902:2;8897:3;8820:85;:::i;:::-;8813:92;;8914:93;9003:3;8914:93;:::i;:::-;9032:2;9027:3;9023:12;9016:19;;8639:402;;;:::o;9047:1547::-;9623:3;9645:92;9733:3;9724:6;9645:92;:::i;:::-;9638:99;;9754:148;9898:3;9754:148;:::i;:::-;9747:155;;9919:95;10010:3;10001:6;9919:95;:::i;:::-;9912:102;;10031:148;10175:3;10031:148;:::i;:::-;10024:155;;10196:95;10287:3;10278:6;10196:95;:::i;:::-;10189:102;;10308:148;10452:3;10308:148;:::i;:::-;10301:155;;10473:95;10564:3;10555:6;10473:95;:::i;:::-;10466:102;;10585:3;10578:10;;9047:1547;;;;;;;:::o;10600:180::-;10648:77;10645:1;10638:88;10745:4;10742:1;10735:15;10769:4;10766:1;10759:15;10786:180;10834:77;10831:1;10824:88;10931:4;10928:1;10921:15;10955:4;10952:1;10945:15;10972:410;11012:7;11035:20;11053:1;11035:20;:::i;:::-;11030:25;;11069:20;11087:1;11069:20;:::i;:::-;11064:25;;11124:1;11121;11117:9;11146:30;11164:11;11146:30;:::i;:::-;11135:41;;11325:1;11316:7;11312:15;11309:1;11306:22;11286:1;11279:9;11259:83;11236:139;;11355:18;;:::i;:::-;11236:139;11020:362;10972:410;;;;:::o;11388:191::-;11428:3;11447:20;11465:1;11447:20;:::i;:::-;11442:25;;11481:20;11499:1;11481:20;:::i;:::-;11476:25;;11524:1;11521;11517:9;11510:16;;11545:3;11542:1;11539:10;11536:36;;;11552:18;;:::i;:::-;11536:36;11388:191;;;;:::o;11585:180::-;11633:77;11630:1;11623:88;11730:4;11727:1;11720:15;11754:4;11751:1;11744:15;11771:171;11810:3;11833:24;11851:5;11833:24;:::i;:::-;11824:33;;11879:4;11872:5;11869:15;11866:41;;11887:18;;:::i;:::-;11866:41;11934:1;11927:5;11923:13;11916:20;;11771:171;;;:::o;11948:182::-;12088:34;12084:1;12076:6;12072:14;12065:58;11948:182;:::o;12136:366::-;12278:3;12299:67;12363:2;12358:3;12299:67;:::i;:::-;12292:74;;12375:93;12464:3;12375:93;:::i;:::-;12493:2;12488:3;12484:12;12477:19;;12136:366;;;:::o;12508:419::-;12674:4;12712:2;12701:9;12697:18;12689:26;;12761:9;12755:4;12751:20;12747:1;12736:9;12732:17;12725:47;12789:131;12915:4;12789:131;:::i;:::-;12781:139;;12508:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"699000","executionCost":"infinite","totalCost":"infinite"},"external":{"STATEMENT()":"infinite","createTokenRequest(address,address)":"infinite","lengthOfToken()":"2451"},"internal":{"_updateLengthOfToken(uint256)":"infinite","_updateStatement(string memory)":"infinite","authenticate(struct TokenAuthenticated.TokenRequest calldata,bytes calldata)":"infinite","hashForToken(struct TokenAuthenticated.TokenRequest calldata)":"infinite","stringToSign(struct TokenAuthenticated.TokenRequest memory)":"infinite"}},"methodIdentifiers":{"STATEMENT()":"bebc479c","createTokenRequest(address,address)":"b6ad16a8","lengthOfToken()":"cb2e6043"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_statement\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"STATEMENT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"}],\"name\":\"createTokenRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenAuthenticated.TokenRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lengthOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"allow a user to authenticate with a signed english token.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"TokenAuthenticated\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenAuthenticated.sol\":\"TokenAuthenticated\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/TokenAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title TokenAuthenticated\\n * @dev allow a user to authenticate with a signed english token.\\n */\\ncontract TokenAuthenticated {\\n    string public STATEMENT;\\n\\n    uint256 public lengthOfToken = 15;\\n       \\n    struct TokenRequest {\\n        address owner;\\n        address device;\\n        uint256 issuedAt;\\n    }\\n\\n    constructor(string memory _statement) {\\n        STATEMENT = _statement;\\n    }\\n\\n    function _updateStatement(string memory newStatement) internal {\\n        STATEMENT = newStatement;\\n    }\\n\\n    function _updateLengthOfToken(uint256 newLength) internal {\\n        lengthOfToken = newLength;\\n    }\\n\\n    function authenticate(\\n        TokenRequest calldata request,\\n        bytes calldata signature\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = hashForToken(request);\\n        address signer = ECDSA.recover(msgHash, signature);\\n        require(signer == request.owner, \\\"invalid signature\\\");\\n        require(\\n            request.issuedAt >= block.number - lengthOfToken,\\n            \\\"Request is too old\\\"\\n        );\\n        return true;\\n    }\\n\\n    function createTokenRequest(\\n        address owner,\\n        address device\\n    ) public view returns (TokenRequest memory request, string memory) {\\n        request = TokenRequest({\\n            owner: owner,\\n            device: device,\\n            issuedAt: block.number - 1\\n        });\\n        return (request, stringToSign(request));\\n    }\\n\\n\\n    /**\\n     * @dev Returns the string to sign of the provided WalletCreateRequest.\\n     * @param request The WalletCreateRequest struct containing the owner address, device address, and issuedAt block number.\\n     */\\n    function stringToSign(\\n        TokenRequest memory request\\n    ) internal view returns (string memory) {\\n        return string(abi.encodePacked(\\n            STATEMENT,\\n            \\\"\\\\n\\\\nMe: \\\",\\n            Strings.toHexString(request.owner),\\n            \\\"\\\\nDevice: \\\",\\n            Strings.toHexString(request.device),\\n            \\\"\\\\nIssued at: \\\",\\n            Strings.toString(request.issuedAt)\\n        ));\\n    }\\n\\n    function hashForToken(\\n        TokenRequest calldata request\\n    ) internal view returns (bytes32) {\\n        return ECDSA.toEthSignedMessageHash(bytes(stringToSign(request)));\\n    }\\n}\",\"keccak256\":\"0x46bcf484ada1e1d321fd73afe7060e7e0b3930ba844bc32599fe88b7860715ce\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1407,"contract":"contracts/TokenAuthenticated.sol:TokenAuthenticated","label":"STATEMENT","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1410,"contract":"contracts/TokenAuthenticated.sol:TokenAuthenticated","label":"lengthOfToken","offset":0,"slot":"1","type":"t_uint256"}],"types":{"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/WalletDeployer.sol":{"IEnglishOwnerAdder":{"abi":[{"inputs":[{"internalType":"address","name":"safe","type":"address"},{"components":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"device","type":"address"},{"internalType":"uint256","name":"issuedAt","type":"uint256"}],"internalType":"struct TokenAuthenticated.TokenRequest","name":"request","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"addOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addOwner(address,(address,address,uint256),bytes)":"724e59c3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenAuthenticated.TokenRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WalletDeployer.sol\":\"IEnglishOwnerAdder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/TokenAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title TokenAuthenticated\\n * @dev allow a user to authenticate with a signed english token.\\n */\\ncontract TokenAuthenticated {\\n    string public STATEMENT;\\n\\n    uint256 public lengthOfToken = 15;\\n       \\n    struct TokenRequest {\\n        address owner;\\n        address device;\\n        uint256 issuedAt;\\n    }\\n\\n    constructor(string memory _statement) {\\n        STATEMENT = _statement;\\n    }\\n\\n    function _updateStatement(string memory newStatement) internal {\\n        STATEMENT = newStatement;\\n    }\\n\\n    function _updateLengthOfToken(uint256 newLength) internal {\\n        lengthOfToken = newLength;\\n    }\\n\\n    function authenticate(\\n        TokenRequest calldata request,\\n        bytes calldata signature\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = hashForToken(request);\\n        address signer = ECDSA.recover(msgHash, signature);\\n        require(signer == request.owner, \\\"invalid signature\\\");\\n        require(\\n            request.issuedAt >= block.number - lengthOfToken,\\n            \\\"Request is too old\\\"\\n        );\\n        return true;\\n    }\\n\\n    function createTokenRequest(\\n        address owner,\\n        address device\\n    ) public view returns (TokenRequest memory request, string memory) {\\n        request = TokenRequest({\\n            owner: owner,\\n            device: device,\\n            issuedAt: block.number - 1\\n        });\\n        return (request, stringToSign(request));\\n    }\\n\\n\\n    /**\\n     * @dev Returns the string to sign of the provided WalletCreateRequest.\\n     * @param request The WalletCreateRequest struct containing the owner address, device address, and issuedAt block number.\\n     */\\n    function stringToSign(\\n        TokenRequest memory request\\n    ) internal view returns (string memory) {\\n        return string(abi.encodePacked(\\n            STATEMENT,\\n            \\\"\\\\n\\\\nMe: \\\",\\n            Strings.toHexString(request.owner),\\n            \\\"\\\\nDevice: \\\",\\n            Strings.toHexString(request.device),\\n            \\\"\\\\nIssued at: \\\",\\n            Strings.toString(request.issuedAt)\\n        ));\\n    }\\n\\n    function hashForToken(\\n        TokenRequest calldata request\\n    ) internal view returns (bytes32) {\\n        return ECDSA.toEthSignedMessageHash(bytes(stringToSign(request)));\\n    }\\n}\",\"keccak256\":\"0x46bcf484ada1e1d321fd73afe7060e7e0b3930ba844bc32599fe88b7860715ce\",\"license\":\"MIT\"},\"contracts/WalletDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./TokenAuthenticated.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IProxyFactory {\\n    function createProxyWithNonce(\\n        address _mastercopy,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) external returns (address proxy);\\n}\\n\\ninterface IEnglishOwnerAdder {\\n    function addOwner(\\n        address safe,\\n        TokenAuthenticated.TokenRequest calldata request,\\n        bytes calldata signature\\n    ) external;\\n}\\n\\n/**\\n * @title WalletDeployer\\n * @dev A contract that allows a user to create a Gnosis Safe wallet by signing an English message.\\n *      It sets up a a safe by calling the SafeStetup.sol contract which adds the correct modules and the TokenRequest\\n *      device and owner as owners to the safe.\\n */\\ncontract WalletDeployer is TokenAuthenticated {\\n    string public CHAIN_ID;\\n\\n    address private immutable _gnosisSafeContract;\\n    address private immutable _gnosisSafeProxyFactory;\\n    address private immutable _defaultFallackhandler;\\n\\n    address private immutable _setupHandler;\\n\\n    bytes4 private constant SETUP_DATA = bytes4(keccak256(\\\"setup()\\\"));\\n\\n    // a mapping of owner to safe address\\n    mapping(address => address) public ownerToSafe;\\n    mapping(address => address) public safeToOwner;\\n\\n    constructor(\\n        address gnosisSafeContract,\\n        address gnosisSafeProxyFactory,\\n        address defaultFallbackHandler,\\n        address setupHandler\\n    )\\n        TokenAuthenticated(\\n            \\\"I authorize this device to send transactions on my behalf.\\\"\\n        )\\n    {\\n        CHAIN_ID = Strings.toString(block.chainid);\\n        _gnosisSafeContract = gnosisSafeContract;\\n        _gnosisSafeProxyFactory = gnosisSafeProxyFactory;\\n        _defaultFallackhandler = defaultFallbackHandler;\\n        _setupHandler = setupHandler;\\n    }\\n\\n    // async walletAddressForUser(user:Address):Promise<Address> {\\n    //     const setupData = await setupDataForUser(user)\\n\\n    //     const salt = utils.keccak256(utils.solidityPack(['bytes', 'uint256'], [utils.keccak256(setupData), this.chainId]))\\n    //     const initCode = utils.solidityKeccak256(['bytes', 'bytes'], [await this.proxyFactory.proxyCreationCode(), utils.defaultAbiCoder.encode(['address'], [MASTER_COPY_ADDR])])\\n\\n    //     const addr = utils.getCreate2Address(this.proxyFactory.address, salt, initCode)\\n    //     return addr.toLowerCase()\\n    //   }\\n\\n    /**\\n     * @dev Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.\\n     * @param request The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.\\n     * @param signature The signature signed by the owner to verify ownership.\\n     */\\n    function createSafe(\\n        TokenRequest calldata request,\\n        bytes calldata signature,\\n        address englishOwnerAdder\\n    ) public {\\n        require(\\n            ownerToSafe[request.owner] == address(0),\\n            \\\"Safe already exists for owner\\\"\\n        );\\n        require(authenticate(request, signature));\\n\\n        // // not sure exactly why, but it's important that this array is a memory address[] so that the initializer is encoded properly\\n        // address[] memory owners;\\n        // if (request.device == address(0)) {\\n        //     owners = new address[](1);\\n        //     owners[0] = request.owner;\\n        // } else {\\n        //     owners = new address[](2);\\n        //     owners[0] = request.owner;\\n        //     owners[1] = request.device;\\n        // }\\n\\n        address[] memory owners = new address[](1);\\n        owners[0] = request.owner;\\n\\n        bytes memory initializer = abi.encodeWithSignature(\\n            \\\"setup(address[],uint256,address,bytes,address,address,uint256,address)\\\",\\n            owners, // set the owner and first device addresses\\n            uint256(1), // set the number of required confirmations (threshhold) to 1\\n            _setupHandler, // setupModules address\\n            abi.encodeWithSignature(\\\"setup()\\\"), // setupModules data\\n            _defaultFallackhandler, // set the default fallback handler\\n            address(0), // set the payment token address\\n            address(0), // set the payment token address\\n            uint256(0), // set the payment amount to 0\\n            address(0) // set the payment fee receiver address\\n        );\\n\\n        address proxyAddr = IProxyFactory(_gnosisSafeProxyFactory)\\n            .createProxyWithNonce(\\n                _gnosisSafeContract,\\n                initializer,\\n                block.chainid\\n            );\\n\\n        if (request.device != address(0)) {\\n            IEnglishOwnerAdder(englishOwnerAdder).addOwner(\\n                proxyAddr,\\n                request,\\n                signature\\n            );\\n        }\\n\\n        ownerToSafe[request.owner] = proxyAddr;\\n        safeToOwner[proxyAddr] = request.owner;\\n    }\\n}\\n\\n// async walletAddressForUser(user:Address):Promise<Address> {\\n//     const setupData = await setupDataForUser(user)\\n\\n//     const salt = utils.keccak256(utils.solidityPack(['bytes', 'uint256'], [utils.keccak256(setupData), this.chainId]))\\n//     const initCode = utils.solidityKeccak256(['bytes', 'bytes'], [await this.proxyFactory.proxyCreationCode(), utils.defaultAbiCoder.encode(['address'], [MASTER_COPY_ADDR])])\\n\\n//     const addr = utils.getCreate2Address(this.proxyFactory.address, salt, initCode)\\n//     return addr.toLowerCase()\\n//   }\\n\",\"keccak256\":\"0x5c8858873f4f8f3dbc24afc1f12d0e99c688ddd33c1980db251dcd7ed9b80d38\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity ^0.8.19;\\n\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\\ninterface GnosisSafe {\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    function addOwnerWithThreshold(address owner, uint256 threshold) external;\\n    function removeOwner(address prevOwner, address owner, uint256 threshold) external;\\n\\n    function getThreshold() external view returns (uint256);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function enableModule(address module) external;\\n}\\n\",\"keccak256\":\"0x6d5d793890962a6c0a2811940a21425aeb03b72a70f398367d2ff3d260f0ae4c\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IProxyFactory":{"abi":[{"inputs":[{"internalType":"address","name":"_mastercopy","type":"address"},{"internalType":"bytes","name":"initializer","type":"bytes"},{"internalType":"uint256","name":"saltNonce","type":"uint256"}],"name":"createProxyWithNonce","outputs":[{"internalType":"address","name":"proxy","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createProxyWithNonce(address,bytes,uint256)":"1688f0b9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mastercopy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initializer\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"saltNonce\",\"type\":\"uint256\"}],\"name\":\"createProxyWithNonce\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WalletDeployer.sol\":\"IProxyFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/TokenAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title TokenAuthenticated\\n * @dev allow a user to authenticate with a signed english token.\\n */\\ncontract TokenAuthenticated {\\n    string public STATEMENT;\\n\\n    uint256 public lengthOfToken = 15;\\n       \\n    struct TokenRequest {\\n        address owner;\\n        address device;\\n        uint256 issuedAt;\\n    }\\n\\n    constructor(string memory _statement) {\\n        STATEMENT = _statement;\\n    }\\n\\n    function _updateStatement(string memory newStatement) internal {\\n        STATEMENT = newStatement;\\n    }\\n\\n    function _updateLengthOfToken(uint256 newLength) internal {\\n        lengthOfToken = newLength;\\n    }\\n\\n    function authenticate(\\n        TokenRequest calldata request,\\n        bytes calldata signature\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = hashForToken(request);\\n        address signer = ECDSA.recover(msgHash, signature);\\n        require(signer == request.owner, \\\"invalid signature\\\");\\n        require(\\n            request.issuedAt >= block.number - lengthOfToken,\\n            \\\"Request is too old\\\"\\n        );\\n        return true;\\n    }\\n\\n    function createTokenRequest(\\n        address owner,\\n        address device\\n    ) public view returns (TokenRequest memory request, string memory) {\\n        request = TokenRequest({\\n            owner: owner,\\n            device: device,\\n            issuedAt: block.number - 1\\n        });\\n        return (request, stringToSign(request));\\n    }\\n\\n\\n    /**\\n     * @dev Returns the string to sign of the provided WalletCreateRequest.\\n     * @param request The WalletCreateRequest struct containing the owner address, device address, and issuedAt block number.\\n     */\\n    function stringToSign(\\n        TokenRequest memory request\\n    ) internal view returns (string memory) {\\n        return string(abi.encodePacked(\\n            STATEMENT,\\n            \\\"\\\\n\\\\nMe: \\\",\\n            Strings.toHexString(request.owner),\\n            \\\"\\\\nDevice: \\\",\\n            Strings.toHexString(request.device),\\n            \\\"\\\\nIssued at: \\\",\\n            Strings.toString(request.issuedAt)\\n        ));\\n    }\\n\\n    function hashForToken(\\n        TokenRequest calldata request\\n    ) internal view returns (bytes32) {\\n        return ECDSA.toEthSignedMessageHash(bytes(stringToSign(request)));\\n    }\\n}\",\"keccak256\":\"0x46bcf484ada1e1d321fd73afe7060e7e0b3930ba844bc32599fe88b7860715ce\",\"license\":\"MIT\"},\"contracts/WalletDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./TokenAuthenticated.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IProxyFactory {\\n    function createProxyWithNonce(\\n        address _mastercopy,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) external returns (address proxy);\\n}\\n\\ninterface IEnglishOwnerAdder {\\n    function addOwner(\\n        address safe,\\n        TokenAuthenticated.TokenRequest calldata request,\\n        bytes calldata signature\\n    ) external;\\n}\\n\\n/**\\n * @title WalletDeployer\\n * @dev A contract that allows a user to create a Gnosis Safe wallet by signing an English message.\\n *      It sets up a a safe by calling the SafeStetup.sol contract which adds the correct modules and the TokenRequest\\n *      device and owner as owners to the safe.\\n */\\ncontract WalletDeployer is TokenAuthenticated {\\n    string public CHAIN_ID;\\n\\n    address private immutable _gnosisSafeContract;\\n    address private immutable _gnosisSafeProxyFactory;\\n    address private immutable _defaultFallackhandler;\\n\\n    address private immutable _setupHandler;\\n\\n    bytes4 private constant SETUP_DATA = bytes4(keccak256(\\\"setup()\\\"));\\n\\n    // a mapping of owner to safe address\\n    mapping(address => address) public ownerToSafe;\\n    mapping(address => address) public safeToOwner;\\n\\n    constructor(\\n        address gnosisSafeContract,\\n        address gnosisSafeProxyFactory,\\n        address defaultFallbackHandler,\\n        address setupHandler\\n    )\\n        TokenAuthenticated(\\n            \\\"I authorize this device to send transactions on my behalf.\\\"\\n        )\\n    {\\n        CHAIN_ID = Strings.toString(block.chainid);\\n        _gnosisSafeContract = gnosisSafeContract;\\n        _gnosisSafeProxyFactory = gnosisSafeProxyFactory;\\n        _defaultFallackhandler = defaultFallbackHandler;\\n        _setupHandler = setupHandler;\\n    }\\n\\n    // async walletAddressForUser(user:Address):Promise<Address> {\\n    //     const setupData = await setupDataForUser(user)\\n\\n    //     const salt = utils.keccak256(utils.solidityPack(['bytes', 'uint256'], [utils.keccak256(setupData), this.chainId]))\\n    //     const initCode = utils.solidityKeccak256(['bytes', 'bytes'], [await this.proxyFactory.proxyCreationCode(), utils.defaultAbiCoder.encode(['address'], [MASTER_COPY_ADDR])])\\n\\n    //     const addr = utils.getCreate2Address(this.proxyFactory.address, salt, initCode)\\n    //     return addr.toLowerCase()\\n    //   }\\n\\n    /**\\n     * @dev Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.\\n     * @param request The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.\\n     * @param signature The signature signed by the owner to verify ownership.\\n     */\\n    function createSafe(\\n        TokenRequest calldata request,\\n        bytes calldata signature,\\n        address englishOwnerAdder\\n    ) public {\\n        require(\\n            ownerToSafe[request.owner] == address(0),\\n            \\\"Safe already exists for owner\\\"\\n        );\\n        require(authenticate(request, signature));\\n\\n        // // not sure exactly why, but it's important that this array is a memory address[] so that the initializer is encoded properly\\n        // address[] memory owners;\\n        // if (request.device == address(0)) {\\n        //     owners = new address[](1);\\n        //     owners[0] = request.owner;\\n        // } else {\\n        //     owners = new address[](2);\\n        //     owners[0] = request.owner;\\n        //     owners[1] = request.device;\\n        // }\\n\\n        address[] memory owners = new address[](1);\\n        owners[0] = request.owner;\\n\\n        bytes memory initializer = abi.encodeWithSignature(\\n            \\\"setup(address[],uint256,address,bytes,address,address,uint256,address)\\\",\\n            owners, // set the owner and first device addresses\\n            uint256(1), // set the number of required confirmations (threshhold) to 1\\n            _setupHandler, // setupModules address\\n            abi.encodeWithSignature(\\\"setup()\\\"), // setupModules data\\n            _defaultFallackhandler, // set the default fallback handler\\n            address(0), // set the payment token address\\n            address(0), // set the payment token address\\n            uint256(0), // set the payment amount to 0\\n            address(0) // set the payment fee receiver address\\n        );\\n\\n        address proxyAddr = IProxyFactory(_gnosisSafeProxyFactory)\\n            .createProxyWithNonce(\\n                _gnosisSafeContract,\\n                initializer,\\n                block.chainid\\n            );\\n\\n        if (request.device != address(0)) {\\n            IEnglishOwnerAdder(englishOwnerAdder).addOwner(\\n                proxyAddr,\\n                request,\\n                signature\\n            );\\n        }\\n\\n        ownerToSafe[request.owner] = proxyAddr;\\n        safeToOwner[proxyAddr] = request.owner;\\n    }\\n}\\n\\n// async walletAddressForUser(user:Address):Promise<Address> {\\n//     const setupData = await setupDataForUser(user)\\n\\n//     const salt = utils.keccak256(utils.solidityPack(['bytes', 'uint256'], [utils.keccak256(setupData), this.chainId]))\\n//     const initCode = utils.solidityKeccak256(['bytes', 'bytes'], [await this.proxyFactory.proxyCreationCode(), utils.defaultAbiCoder.encode(['address'], [MASTER_COPY_ADDR])])\\n\\n//     const addr = utils.getCreate2Address(this.proxyFactory.address, salt, initCode)\\n//     return addr.toLowerCase()\\n//   }\\n\",\"keccak256\":\"0x5c8858873f4f8f3dbc24afc1f12d0e99c688ddd33c1980db251dcd7ed9b80d38\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity ^0.8.19;\\n\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\\ninterface GnosisSafe {\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    function addOwnerWithThreshold(address owner, uint256 threshold) external;\\n    function removeOwner(address prevOwner, address owner, uint256 threshold) external;\\n\\n    function getThreshold() external view returns (uint256);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function enableModule(address module) external;\\n}\\n\",\"keccak256\":\"0x6d5d793890962a6c0a2811940a21425aeb03b72a70f398367d2ff3d260f0ae4c\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"WalletDeployer":{"abi":[{"inputs":[{"internalType":"address","name":"gnosisSafeContract","type":"address"},{"internalType":"address","name":"gnosisSafeProxyFactory","type":"address"},{"internalType":"address","name":"defaultFallbackHandler","type":"address"},{"internalType":"address","name":"setupHandler","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CHAIN_ID","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STATEMENT","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"device","type":"address"},{"internalType":"uint256","name":"issuedAt","type":"uint256"}],"internalType":"struct TokenAuthenticated.TokenRequest","name":"request","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"address","name":"englishOwnerAdder","type":"address"}],"name":"createSafe","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"device","type":"address"}],"name":"createTokenRequest","outputs":[{"components":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"device","type":"address"},{"internalType":"uint256","name":"issuedAt","type":"uint256"}],"internalType":"struct TokenAuthenticated.TokenRequest","name":"request","type":"tuple"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lengthOfToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"ownerToSafe","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"safeToOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"A contract that allows a user to create a Gnosis Safe wallet by signing an English message.      It sets up a a safe by calling the SafeStetup.sol contract which adds the correct modules and the TokenRequest      device and owner as owners to the safe.","kind":"dev","methods":{"createSafe((address,address,uint256),bytes,address)":{"details":"Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.","params":{"request":"The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.","signature":"The signature signed by the owner to verify ownership."}}},"title":"WalletDeployer","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1427":{"entryPoint":null,"id":1427,"parameterSlots":1,"returnSlots":0},"@_1674":{"entryPoint":null,"id":1674,"parameterSlots":4,"returnSlots":0},"@log10_1237":{"entryPoint":581,"id":1237,"parameterSlots":1,"returnSlots":1},"@toString_57":{"entryPoint":358,"id":57,"parameterSlots":1,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":1028,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_addresst_address_fromMemory":{"entryPoint":1051,"id":null,"parameterSlots":2,"returnSlots":4},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":1323,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":1165,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1644,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":982,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":950,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1459,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1605,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":1479,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1799,"id":null,"parameterSlots":2,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":1344,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1270,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1769,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":1469,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1737,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x12":{"entryPoint":2030,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":1223,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1176,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":1519,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":945,"id":null,"parameterSlots":0,"returnSlots":0},"shift_left_dynamic":{"entryPoint":1360,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1724,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1577,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":1373,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":1529,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":1002,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":1572,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:7081:6","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:6","statements":[{"nodeType":"YulAssignment","src":"57:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:6"},"nodeType":"YulFunctionCall","src":"67:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:6"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:6","type":""}],"src":"7:75:6"},{"body":{"nodeType":"YulBlock","src":"177:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:6"},"nodeType":"YulFunctionCall","src":"187:12:6"},"nodeType":"YulExpressionStatement","src":"187:12:6"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:6"},{"body":{"nodeType":"YulBlock","src":"300:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:6"},"nodeType":"YulFunctionCall","src":"310:12:6"},"nodeType":"YulExpressionStatement","src":"310:12:6"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:6"},{"body":{"nodeType":"YulBlock","src":"379:81:6","statements":[{"nodeType":"YulAssignment","src":"389:65:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:6"},"nodeType":"YulFunctionCall","src":"400:54:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:6"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:6","type":""}],"src":"334:126:6"},{"body":{"nodeType":"YulBlock","src":"511:51:6","statements":[{"nodeType":"YulAssignment","src":"521:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:6"},"nodeType":"YulFunctionCall","src":"532:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:6"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:6","type":""}],"src":"466:96:6"},{"body":{"nodeType":"YulBlock","src":"611:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:6"},"nodeType":"YulFunctionCall","src":"670:12:6"},"nodeType":"YulExpressionStatement","src":"670:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:6"},"nodeType":"YulFunctionCall","src":"641:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:6"},"nodeType":"YulFunctionCall","src":"631:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:6"},"nodeType":"YulFunctionCall","src":"624:43:6"},"nodeType":"YulIf","src":"621:63:6"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:6","type":""}],"src":"568:122:6"},{"body":{"nodeType":"YulBlock","src":"759:80:6","statements":[{"nodeType":"YulAssignment","src":"769:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:6"},"nodeType":"YulFunctionCall","src":"778:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:6"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:6"},"nodeType":"YulFunctionCall","src":"800:33:6"},"nodeType":"YulExpressionStatement","src":"800:33:6"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:6","type":""}],"src":"696:143:6"},{"body":{"nodeType":"YulBlock","src":"973:692:6","statements":[{"body":{"nodeType":"YulBlock","src":"1020:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1022:77:6"},"nodeType":"YulFunctionCall","src":"1022:79:6"},"nodeType":"YulExpressionStatement","src":"1022:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"1003:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"990:3:6"},"nodeType":"YulFunctionCall","src":"990:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"1015:3:6","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"986:3:6"},"nodeType":"YulFunctionCall","src":"986:33:6"},"nodeType":"YulIf","src":"983:120:6"},{"nodeType":"YulBlock","src":"1113:128:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1128:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1142:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1132:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1157:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1203:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1214:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1199:3:6"},"nodeType":"YulFunctionCall","src":"1199:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1223:7:6"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1167:31:6"},"nodeType":"YulFunctionCall","src":"1167:64:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1157:6:6"}]}]},{"nodeType":"YulBlock","src":"1251:129:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1266:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1280:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1270:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1296:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1353:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:6"},"nodeType":"YulFunctionCall","src":"1338:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1362:7:6"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1306:31:6"},"nodeType":"YulFunctionCall","src":"1306:64:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1296:6:6"}]}]},{"nodeType":"YulBlock","src":"1390:129:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1405:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1419:2:6","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1409:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1435:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1481:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1492:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1477:3:6"},"nodeType":"YulFunctionCall","src":"1477:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1501:7:6"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1445:31:6"},"nodeType":"YulFunctionCall","src":"1445:64:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1435:6:6"}]}]},{"nodeType":"YulBlock","src":"1529:129:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1544:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1558:2:6","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1548:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1574:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1620:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1631:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1616:3:6"},"nodeType":"YulFunctionCall","src":"1616:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1640:7:6"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1584:31:6"},"nodeType":"YulFunctionCall","src":"1584:64:6"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1574:6:6"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"919:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"930:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"942:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"950:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"958:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"966:6:6","type":""}],"src":"845:820:6"},{"body":{"nodeType":"YulBlock","src":"1730:40:6","statements":[{"nodeType":"YulAssignment","src":"1741:22:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1757:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1751:5:6"},"nodeType":"YulFunctionCall","src":"1751:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1741:6:6"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1713:5:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1723:6:6","type":""}],"src":"1671:99:6"},{"body":{"nodeType":"YulBlock","src":"1804:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1821:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1824:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1814:6:6"},"nodeType":"YulFunctionCall","src":"1814:88:6"},"nodeType":"YulExpressionStatement","src":"1814:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1918:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1921:4:6","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1911:6:6"},"nodeType":"YulFunctionCall","src":"1911:15:6"},"nodeType":"YulExpressionStatement","src":"1911:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1942:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1945:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1935:6:6"},"nodeType":"YulFunctionCall","src":"1935:15:6"},"nodeType":"YulExpressionStatement","src":"1935:15:6"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1776:180:6"},{"body":{"nodeType":"YulBlock","src":"1990:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2007:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2010:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2000:6:6"},"nodeType":"YulFunctionCall","src":"2000:88:6"},"nodeType":"YulExpressionStatement","src":"2000:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2104:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2107:4:6","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2097:6:6"},"nodeType":"YulFunctionCall","src":"2097:15:6"},"nodeType":"YulExpressionStatement","src":"2097:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2128:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2131:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2121:6:6"},"nodeType":"YulFunctionCall","src":"2121:15:6"},"nodeType":"YulExpressionStatement","src":"2121:15:6"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"1962:180:6"},{"body":{"nodeType":"YulBlock","src":"2199:269:6","statements":[{"nodeType":"YulAssignment","src":"2209:22:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2223:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"2229:1:6","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2219:3:6"},"nodeType":"YulFunctionCall","src":"2219:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2209:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"2240:38:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2270:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"2276:1:6","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2266:3:6"},"nodeType":"YulFunctionCall","src":"2266:12:6"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2244:18:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2317:51:6","statements":[{"nodeType":"YulAssignment","src":"2331:27:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2345:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2353:4:6","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2341:3:6"},"nodeType":"YulFunctionCall","src":"2341:17:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2331:6:6"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2297:18:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2290:6:6"},"nodeType":"YulFunctionCall","src":"2290:26:6"},"nodeType":"YulIf","src":"2287:81:6"},{"body":{"nodeType":"YulBlock","src":"2420:42:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"2434:16:6"},"nodeType":"YulFunctionCall","src":"2434:18:6"},"nodeType":"YulExpressionStatement","src":"2434:18:6"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2384:18:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2407:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2415:2:6","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2404:2:6"},"nodeType":"YulFunctionCall","src":"2404:14:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2381:2:6"},"nodeType":"YulFunctionCall","src":"2381:38:6"},"nodeType":"YulIf","src":"2378:84:6"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2183:4:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2192:6:6","type":""}],"src":"2148:320:6"},{"body":{"nodeType":"YulBlock","src":"2528:87:6","statements":[{"nodeType":"YulAssignment","src":"2538:11:6","value":{"name":"ptr","nodeType":"YulIdentifier","src":"2546:3:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2538:4:6"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2566:1:6","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2569:3:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2559:6:6"},"nodeType":"YulFunctionCall","src":"2559:14:6"},"nodeType":"YulExpressionStatement","src":"2559:14:6"},{"nodeType":"YulAssignment","src":"2582:26:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2600:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2603:4:6","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2590:9:6"},"nodeType":"YulFunctionCall","src":"2590:18:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2582:4:6"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2515:3:6","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"2523:4:6","type":""}],"src":"2474:141:6"},{"body":{"nodeType":"YulBlock","src":"2665:49:6","statements":[{"nodeType":"YulAssignment","src":"2675:33:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2693:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"2700:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2689:3:6"},"nodeType":"YulFunctionCall","src":"2689:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"2705:2:6","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2685:3:6"},"nodeType":"YulFunctionCall","src":"2685:23:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2675:6:6"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2648:5:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2658:6:6","type":""}],"src":"2621:93:6"},{"body":{"nodeType":"YulBlock","src":"2773:54:6","statements":[{"nodeType":"YulAssignment","src":"2783:37:6","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"2808:4:6"},{"name":"value","nodeType":"YulIdentifier","src":"2814:5:6"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2804:3:6"},"nodeType":"YulFunctionCall","src":"2804:16:6"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"2783:8:6"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"2748:4:6","type":""},{"name":"value","nodeType":"YulTypedName","src":"2754:5:6","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"2764:8:6","type":""}],"src":"2720:107:6"},{"body":{"nodeType":"YulBlock","src":"2909:317:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2919:35:6","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"2940:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"2952:1:6","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2936:3:6"},"nodeType":"YulFunctionCall","src":"2936:18:6"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"2923:9:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2963:109:6","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"2994:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3005:66:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"2975:18:6"},"nodeType":"YulFunctionCall","src":"2975:97:6"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"2967:4:6","type":""}]},{"nodeType":"YulAssignment","src":"3081:51:6","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"3112:9:6"},{"name":"toInsert","nodeType":"YulIdentifier","src":"3123:8:6"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"3093:18:6"},"nodeType":"YulFunctionCall","src":"3093:39:6"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"3081:8:6"}]},{"nodeType":"YulAssignment","src":"3141:30:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3154:5:6"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"3165:4:6"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3161:3:6"},"nodeType":"YulFunctionCall","src":"3161:9:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3150:3:6"},"nodeType":"YulFunctionCall","src":"3150:21:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3141:5:6"}]},{"nodeType":"YulAssignment","src":"3180:40:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3193:5:6"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"3204:8:6"},{"name":"mask","nodeType":"YulIdentifier","src":"3214:4:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3200:3:6"},"nodeType":"YulFunctionCall","src":"3200:19:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3190:2:6"},"nodeType":"YulFunctionCall","src":"3190:30:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3180:6:6"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2870:5:6","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"2877:10:6","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"2889:8:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2902:6:6","type":""}],"src":"2833:393:6"},{"body":{"nodeType":"YulBlock","src":"3277:32:6","statements":[{"nodeType":"YulAssignment","src":"3287:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"3298:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3287:7:6"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3259:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3269:7:6","type":""}],"src":"3232:77:6"},{"body":{"nodeType":"YulBlock","src":"3347:28:6","statements":[{"nodeType":"YulAssignment","src":"3357:12:6","value":{"name":"value","nodeType":"YulIdentifier","src":"3364:5:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3357:3:6"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3333:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"3343:3:6","type":""}],"src":"3315:60:6"},{"body":{"nodeType":"YulBlock","src":"3441:82:6","statements":[{"nodeType":"YulAssignment","src":"3451:66:6","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3509:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3491:17:6"},"nodeType":"YulFunctionCall","src":"3491:24:6"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"3482:8:6"},"nodeType":"YulFunctionCall","src":"3482:34:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3464:17:6"},"nodeType":"YulFunctionCall","src":"3464:53:6"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"3451:9:6"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3421:5:6","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"3431:9:6","type":""}],"src":"3381:142:6"},{"body":{"nodeType":"YulBlock","src":"3576:28:6","statements":[{"nodeType":"YulAssignment","src":"3586:12:6","value":{"name":"value","nodeType":"YulIdentifier","src":"3593:5:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3586:3:6"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3562:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"3572:3:6","type":""}],"src":"3529:75:6"},{"body":{"nodeType":"YulBlock","src":"3686:193:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3696:63:6","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"3751:7:6"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"3720:30:6"},"nodeType":"YulFunctionCall","src":"3720:39:6"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"3700:16:6","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3775:4:6"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3815:4:6"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3809:5:6"},"nodeType":"YulFunctionCall","src":"3809:11:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3822:6:6"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"3854:16:6"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"3830:23:6"},"nodeType":"YulFunctionCall","src":"3830:41:6"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"3781:27:6"},"nodeType":"YulFunctionCall","src":"3781:91:6"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3768:6:6"},"nodeType":"YulFunctionCall","src":"3768:105:6"},"nodeType":"YulExpressionStatement","src":"3768:105:6"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3663:4:6","type":""},{"name":"offset","nodeType":"YulTypedName","src":"3669:6:6","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"3677:7:6","type":""}],"src":"3610:269:6"},{"body":{"nodeType":"YulBlock","src":"3934:24:6","statements":[{"nodeType":"YulAssignment","src":"3944:8:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3951:1:6","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3944:3:6"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"3930:3:6","type":""}],"src":"3885:73:6"},{"body":{"nodeType":"YulBlock","src":"4017:136:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4027:46:6","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"4041:30:6"},"nodeType":"YulFunctionCall","src":"4041:32:6"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"4031:6:6","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4126:4:6"},{"name":"offset","nodeType":"YulIdentifier","src":"4132:6:6"},{"name":"zero_0","nodeType":"YulIdentifier","src":"4140:6:6"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"4082:43:6"},"nodeType":"YulFunctionCall","src":"4082:65:6"},"nodeType":"YulExpressionStatement","src":"4082:65:6"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"4003:4:6","type":""},{"name":"offset","nodeType":"YulTypedName","src":"4009:6:6","type":""}],"src":"3964:189:6"},{"body":{"nodeType":"YulBlock","src":"4209:136:6","statements":[{"body":{"nodeType":"YulBlock","src":"4276:63:6","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"4320:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"4327:1:6","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"4290:29:6"},"nodeType":"YulFunctionCall","src":"4290:39:6"},"nodeType":"YulExpressionStatement","src":"4290:39:6"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"4229:5:6"},{"name":"end","nodeType":"YulIdentifier","src":"4236:3:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4226:2:6"},"nodeType":"YulFunctionCall","src":"4226:14:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4241:26:6","statements":[{"nodeType":"YulAssignment","src":"4243:22:6","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"4256:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"4263:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4252:3:6"},"nodeType":"YulFunctionCall","src":"4252:13:6"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"4243:5:6"}]}]},"pre":{"nodeType":"YulBlock","src":"4223:2:6","statements":[]},"src":"4219:120:6"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"4197:5:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"4204:3:6","type":""}],"src":"4159:186:6"},{"body":{"nodeType":"YulBlock","src":"4430:464:6","statements":[{"body":{"nodeType":"YulBlock","src":"4456:431:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4470:54:6","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4518:5:6"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"4486:31:6"},"nodeType":"YulFunctionCall","src":"4486:38:6"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"4474:8:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4537:63:6","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"4560:8:6"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"4588:10:6"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"4570:17:6"},"nodeType":"YulFunctionCall","src":"4570:29:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4556:3:6"},"nodeType":"YulFunctionCall","src":"4556:44:6"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"4541:11:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"4757:27:6","statements":[{"nodeType":"YulAssignment","src":"4759:23:6","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"4774:8:6"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"4759:11:6"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"4741:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"4753:2:6","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4738:2:6"},"nodeType":"YulFunctionCall","src":"4738:18:6"},"nodeType":"YulIf","src":"4735:49:6"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"4826:11:6"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"4843:8:6"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"4871:3:6"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"4853:17:6"},"nodeType":"YulFunctionCall","src":"4853:22:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4839:3:6"},"nodeType":"YulFunctionCall","src":"4839:37:6"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"4797:28:6"},"nodeType":"YulFunctionCall","src":"4797:80:6"},"nodeType":"YulExpressionStatement","src":"4797:80:6"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"4447:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"4452:2:6","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4444:2:6"},"nodeType":"YulFunctionCall","src":"4444:11:6"},"nodeType":"YulIf","src":"4441:446:6"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"4406:5:6","type":""},{"name":"len","nodeType":"YulTypedName","src":"4413:3:6","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"4418:10:6","type":""}],"src":"4351:543:6"},{"body":{"nodeType":"YulBlock","src":"4963:54:6","statements":[{"nodeType":"YulAssignment","src":"4973:37:6","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"4998:4:6"},{"name":"value","nodeType":"YulIdentifier","src":"5004:5:6"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4994:3:6"},"nodeType":"YulFunctionCall","src":"4994:16:6"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"4973:8:6"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"4938:4:6","type":""},{"name":"value","nodeType":"YulTypedName","src":"4944:5:6","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"4954:8:6","type":""}],"src":"4900:117:6"},{"body":{"nodeType":"YulBlock","src":"5074:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5084:68:6","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5133:1:6","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"5136:5:6"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5129:3:6"},"nodeType":"YulFunctionCall","src":"5129:13:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5148:1:6","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5144:3:6"},"nodeType":"YulFunctionCall","src":"5144:6:6"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"5100:28:6"},"nodeType":"YulFunctionCall","src":"5100:51:6"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5096:3:6"},"nodeType":"YulFunctionCall","src":"5096:56:6"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"5088:4:6","type":""}]},{"nodeType":"YulAssignment","src":"5161:25:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5175:4:6"},{"name":"mask","nodeType":"YulIdentifier","src":"5181:4:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5171:3:6"},"nodeType":"YulFunctionCall","src":"5171:15:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"5161:6:6"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5051:4:6","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"5057:5:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"5067:6:6","type":""}],"src":"5023:169:6"},{"body":{"nodeType":"YulBlock","src":"5278:214:6","statements":[{"nodeType":"YulAssignment","src":"5411:37:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5438:4:6"},{"name":"len","nodeType":"YulIdentifier","src":"5444:3:6"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"5419:18:6"},"nodeType":"YulFunctionCall","src":"5419:29:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"5411:4:6"}]},{"nodeType":"YulAssignment","src":"5457:29:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5468:4:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5478:1:6","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"5481:3:6"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5474:3:6"},"nodeType":"YulFunctionCall","src":"5474:11:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5465:2:6"},"nodeType":"YulFunctionCall","src":"5465:21:6"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"5457:4:6"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5259:4:6","type":""},{"name":"len","nodeType":"YulTypedName","src":"5265:3:6","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"5273:4:6","type":""}],"src":"5197:295:6"},{"body":{"nodeType":"YulBlock","src":"5589:1303:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5600:51:6","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5647:3:6"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"5614:32:6"},"nodeType":"YulFunctionCall","src":"5614:37:6"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"5604:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"5736:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5738:16:6"},"nodeType":"YulFunctionCall","src":"5738:18:6"},"nodeType":"YulExpressionStatement","src":"5738:18:6"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"5708:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"5716:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5705:2:6"},"nodeType":"YulFunctionCall","src":"5705:30:6"},"nodeType":"YulIf","src":"5702:56:6"},{"nodeType":"YulVariableDeclaration","src":"5768:52:6","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5814:4:6"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"5808:5:6"},"nodeType":"YulFunctionCall","src":"5808:11:6"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"5782:25:6"},"nodeType":"YulFunctionCall","src":"5782:38:6"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"5772:6:6","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5913:4:6"},{"name":"oldLen","nodeType":"YulIdentifier","src":"5919:6:6"},{"name":"newLen","nodeType":"YulIdentifier","src":"5927:6:6"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"5867:45:6"},"nodeType":"YulFunctionCall","src":"5867:67:6"},"nodeType":"YulExpressionStatement","src":"5867:67:6"},{"nodeType":"YulVariableDeclaration","src":"5944:18:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5961:1:6","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"5948:9:6","type":""}]},{"nodeType":"YulAssignment","src":"5972:17:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5985:4:6","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"5972:9:6"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"6036:611:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6050:37:6","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"6069:6:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6081:4:6","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6077:3:6"},"nodeType":"YulFunctionCall","src":"6077:9:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6065:3:6"},"nodeType":"YulFunctionCall","src":"6065:22:6"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"6054:7:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6101:51:6","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6147:4:6"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"6115:31:6"},"nodeType":"YulFunctionCall","src":"6115:37:6"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"6105:6:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6165:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"6174:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6169:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"6233:163:6","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"6258:6:6"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6276:3:6"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"6281:9:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6272:3:6"},"nodeType":"YulFunctionCall","src":"6272:19:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6266:5:6"},"nodeType":"YulFunctionCall","src":"6266:26:6"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6251:6:6"},"nodeType":"YulFunctionCall","src":"6251:42:6"},"nodeType":"YulExpressionStatement","src":"6251:42:6"},{"nodeType":"YulAssignment","src":"6310:24:6","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"6324:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"6332:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6320:3:6"},"nodeType":"YulFunctionCall","src":"6320:14:6"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"6310:6:6"}]},{"nodeType":"YulAssignment","src":"6351:31:6","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"6368:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6379:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6364:3:6"},"nodeType":"YulFunctionCall","src":"6364:18:6"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"6351:9:6"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6199:1:6"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"6202:7:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6196:2:6"},"nodeType":"YulFunctionCall","src":"6196:14:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6211:21:6","statements":[{"nodeType":"YulAssignment","src":"6213:17:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6222:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"6225:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6218:3:6"},"nodeType":"YulFunctionCall","src":"6218:12:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6213:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"6192:3:6","statements":[]},"src":"6188:208:6"},{"body":{"nodeType":"YulBlock","src":"6432:156:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6450:43:6","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6477:3:6"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"6482:9:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6473:3:6"},"nodeType":"YulFunctionCall","src":"6473:19:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6467:5:6"},"nodeType":"YulFunctionCall","src":"6467:26:6"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"6454:9:6","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"6517:6:6"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"6544:9:6"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"6559:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"6567:4:6","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6555:3:6"},"nodeType":"YulFunctionCall","src":"6555:17:6"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"6525:18:6"},"nodeType":"YulFunctionCall","src":"6525:48:6"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6510:6:6"},"nodeType":"YulFunctionCall","src":"6510:64:6"},"nodeType":"YulExpressionStatement","src":"6510:64:6"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"6415:7:6"},{"name":"newLen","nodeType":"YulIdentifier","src":"6424:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6412:2:6"},"nodeType":"YulFunctionCall","src":"6412:19:6"},"nodeType":"YulIf","src":"6409:179:6"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6608:4:6"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"6622:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"6630:1:6","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6618:3:6"},"nodeType":"YulFunctionCall","src":"6618:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"6634:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6614:3:6"},"nodeType":"YulFunctionCall","src":"6614:22:6"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6601:6:6"},"nodeType":"YulFunctionCall","src":"6601:36:6"},"nodeType":"YulExpressionStatement","src":"6601:36:6"}]},"nodeType":"YulCase","src":"6029:618:6","value":{"kind":"number","nodeType":"YulLiteral","src":"6034:1:6","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"6664:222:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6678:14:6","value":{"kind":"number","nodeType":"YulLiteral","src":"6691:1:6","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6682:5:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"6715:67:6","statements":[{"nodeType":"YulAssignment","src":"6733:35:6","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6752:3:6"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"6757:9:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6748:3:6"},"nodeType":"YulFunctionCall","src":"6748:19:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6742:5:6"},"nodeType":"YulFunctionCall","src":"6742:26:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6733:5:6"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"6708:6:6"},"nodeType":"YulIf","src":"6705:77:6"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"6802:4:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6861:5:6"},{"name":"newLen","nodeType":"YulIdentifier","src":"6868:6:6"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"6808:52:6"},"nodeType":"YulFunctionCall","src":"6808:67:6"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"6795:6:6"},"nodeType":"YulFunctionCall","src":"6795:81:6"},"nodeType":"YulExpressionStatement","src":"6795:81:6"}]},"nodeType":"YulCase","src":"6656:230:6","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"6009:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"6017:2:6","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6006:2:6"},"nodeType":"YulFunctionCall","src":"6006:14:6"},"nodeType":"YulSwitch","src":"5999:887:6"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5578:4:6","type":""},{"name":"src","nodeType":"YulTypedName","src":"5584:3:6","type":""}],"src":"5497:1395:6"},{"body":{"nodeType":"YulBlock","src":"6926:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6943:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6946:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6936:6:6"},"nodeType":"YulFunctionCall","src":"6936:88:6"},"nodeType":"YulExpressionStatement","src":"6936:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7040:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7043:4:6","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7033:6:6"},"nodeType":"YulFunctionCall","src":"7033:15:6"},"nodeType":"YulExpressionStatement","src":"7033:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7064:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7067:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7057:6:6"},"nodeType":"YulFunctionCall","src":"7057:15:6"},"nodeType":"YulExpressionStatement","src":"7057:15:6"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"6898:180:6"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n}\n","id":6,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE PUSH1 0xF PUSH1 0x1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2BB9 CODESIZE SUB DUP1 PUSH3 0x2BB9 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x3D SWAP2 SWAP1 PUSH3 0x41B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3A DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x2B7F PUSH1 0x3A SWAP2 CODECOPY DUP1 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x68 SWAP2 SWAP1 PUSH3 0x707 JUMP JUMPDEST POP POP PUSH3 0x7B CHAINID PUSH3 0x166 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x2 SWAP1 DUP2 PUSH3 0x8B SWAP2 SWAP1 PUSH3 0x707 JUMP JUMPDEST POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP POP POP PUSH3 0x81D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH3 0x17D DUP5 PUSH3 0x245 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x19F JUMPI PUSH3 0x19E PUSH3 0x498 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x1D2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH3 0x23A JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH3 0x22D JUMPI PUSH3 0x22C PUSH3 0x7EE JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH3 0x1E0 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH3 0x2A7 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH3 0x29D JUMPI PUSH3 0x29C PUSH3 0x7EE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH3 0x2E8 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH3 0x2DE JUMPI PUSH3 0x2DD PUSH3 0x7EE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH3 0x31B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH3 0x311 JUMPI PUSH3 0x310 PUSH3 0x7EE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH3 0x348 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH3 0x33E JUMPI PUSH3 0x33D PUSH3 0x7EE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH3 0x371 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH3 0x367 JUMPI PUSH3 0x366 PUSH3 0x7EE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH3 0x398 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH3 0x38E JUMPI PUSH3 0x38D PUSH3 0x7EE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH3 0x3A8 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3E3 DUP3 PUSH3 0x3B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x3F5 DUP2 PUSH3 0x3D6 JUMP JUMPDEST DUP2 EQ PUSH3 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x415 DUP2 PUSH3 0x3EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x438 JUMPI PUSH3 0x437 PUSH3 0x3B1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x448 DUP8 DUP3 DUP9 ADD PUSH3 0x404 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x45B DUP8 DUP3 DUP9 ADD PUSH3 0x404 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH3 0x46E DUP8 DUP3 DUP9 ADD PUSH3 0x404 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH3 0x481 DUP8 DUP3 DUP9 ADD PUSH3 0x404 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x50F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x525 JUMPI PUSH3 0x524 PUSH3 0x4C7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x58F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x550 JUMP JUMPDEST PUSH3 0x59B DUP7 DUP4 PUSH3 0x550 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5E8 PUSH3 0x5E2 PUSH3 0x5DC DUP5 PUSH3 0x5B3 JUMP JUMPDEST PUSH3 0x5BD JUMP JUMPDEST PUSH3 0x5B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x604 DUP4 PUSH3 0x5C7 JUMP JUMPDEST PUSH3 0x61C PUSH3 0x613 DUP3 PUSH3 0x5EF JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x55D JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x633 PUSH3 0x624 JUMP JUMPDEST PUSH3 0x640 DUP2 DUP5 DUP5 PUSH3 0x5F9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x668 JUMPI PUSH3 0x65C PUSH1 0x0 DUP3 PUSH3 0x629 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x646 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x6B7 JUMPI PUSH3 0x681 DUP2 PUSH3 0x52B JUMP JUMPDEST PUSH3 0x68C DUP5 PUSH3 0x540 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x69C JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x6B4 PUSH3 0x6AB DUP6 PUSH3 0x540 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x645 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6DC PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x6BC JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6F7 DUP4 DUP4 PUSH3 0x6C9 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x712 DUP3 PUSH3 0x48D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x72E JUMPI PUSH3 0x72D PUSH3 0x498 JUMP JUMPDEST JUMPDEST PUSH3 0x73A DUP3 SLOAD PUSH3 0x4F6 JUMP JUMPDEST PUSH3 0x747 DUP3 DUP3 DUP6 PUSH3 0x66C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x77F JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x76A JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x776 DUP6 DUP3 PUSH3 0x6E9 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x7E6 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x78F DUP7 PUSH3 0x52B JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x7B9 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x792 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x7D9 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x7D5 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x6C9 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x2328 PUSH3 0x857 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x399 ADD MSTORE PUSH1 0x0 PUSH2 0x43D ADD MSTORE PUSH1 0x0 PUSH2 0x4FD ADD MSTORE PUSH1 0x0 PUSH2 0x539 ADD MSTORE PUSH2 0x2328 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x85E1F4D0 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x85E1F4D0 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xB6AD16A8 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0xBEBC479C EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0xCB2E6043 EQ PUSH2 0x16B JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x6634E88 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x5E619A4A EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x7A1238A9 EQ PUSH2 0xE2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH2 0x189 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC7 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH2 0x1BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD9 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0x1417 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x106 PUSH2 0x79E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x113 SWAP2 SWAP1 PUSH2 0x151B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x136 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x131 SWAP2 SWAP1 PUSH2 0x153D JUMP JUMPDEST PUSH2 0x82C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x144 SWAP3 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x155 PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x162 SWAP2 SWAP1 PUSH2 0x151B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH2 0x92E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x180 SWAP2 SWAP1 PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 DUP7 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C6 SWAP1 PUSH2 0x168D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2DA DUP5 DUP5 DUP5 PUSH2 0x934 JUMP JUMPDEST PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x300 JUMPI PUSH2 0x2FF PUSH2 0x16AD JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP5 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x344 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x358 JUMPI PUSH2 0x357 PUSH2 0x16DC JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0xBA0BBA4000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH32 0x0 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x47A SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0xB63E800D00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1688F0B9 PUSH32 0x0 DUP5 CHAINID PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x578 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x18AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x597 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5BB SWAP2 SWAP1 PUSH2 0x18FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5E8 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x675 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x724E59C3 DUP3 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x642 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A1A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x670 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP10 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x68D SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP7 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x718 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x7AB SWAP1 PUSH2 0x1A89 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7D7 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x824 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x824 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x807 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH2 0x834 PUSH2 0x1278 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 NUMBER PUSH2 0x886 SWAP2 SWAP1 PUSH2 0x1AE9 JUMP JUMPDEST DUP2 MSTORE POP SWAP2 POP DUP2 PUSH2 0x895 DUP4 PUSH2 0xA75 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x8AD SWAP1 PUSH2 0x1A89 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8D9 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x926 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x926 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x909 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x940 DUP6 PUSH2 0xAC9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x992 DUP3 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0xAF3 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9A7 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA14 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA0B SWAP1 PUSH2 0x1B69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD NUMBER PUSH2 0xA22 SWAP2 SWAP1 PUSH2 0x1AE9 JUMP JUMPDEST DUP7 PUSH1 0x40 ADD CALLDATALOAD LT ISZERO PUSH2 0xA68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA5F SWAP1 PUSH2 0x1BD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA86 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0xB1A JUMP JUMPDEST PUSH2 0xA93 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0xB1A JUMP JUMPDEST PUSH2 0xAA0 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0xB47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAB3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAEC PUSH2 0xAE7 DUP4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAE2 SWAP2 SWAP1 PUSH2 0x1EC1 JUMP JUMPDEST PUSH2 0xA75 JUMP JUMPDEST PUSH2 0xC15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB02 DUP6 DUP6 PUSH2 0xC50 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xB0F DUP2 PUSH2 0xCA1 JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB40 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0xE07 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0xB56 DUP5 PUSH2 0x1043 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB75 JUMPI PUSH2 0xB74 PUSH2 0x16AD JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBA7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0xC0A JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0xBFE JUMPI PUSH2 0xBFD PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0xBB5 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC21 DUP3 MLOAD PUSH2 0xB47 JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC33 SWAP3 SWAP2 SWAP1 PUSH2 0x1FA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x41 DUP4 MLOAD SUB PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x20 DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x0 BYTE SWAP1 POP PUSH2 0xC85 DUP8 DUP3 DUP6 DUP6 PUSH2 0x1196 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xC9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCB5 JUMPI PUSH2 0xCB4 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCC8 JUMPI PUSH2 0xCC7 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0xE04 JUMPI PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCE2 JUMPI PUSH2 0xCE1 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCF5 JUMPI PUSH2 0xCF4 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xD35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD2C SWAP1 PUSH2 0x204F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xD49 JUMPI PUSH2 0xD48 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xD5C JUMPI PUSH2 0xD5B PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xD9C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD93 SWAP1 PUSH2 0x20BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xDB0 JUMPI PUSH2 0xDAF PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xDC3 JUMPI PUSH2 0xDC2 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xE03 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDFA SWAP1 PUSH2 0x214D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0xE1A SWAP2 SWAP1 PUSH2 0x216D JUMP JUMPDEST PUSH2 0xE24 SWAP2 SWAP1 PUSH2 0x21AF JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE3D JUMPI PUSH2 0xE3C PUSH2 0x16AD JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE6F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xEA7 JUMPI PUSH2 0xEA6 PUSH2 0x16DC JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xF0B JUMPI PUSH2 0xF0A PUSH2 0x16DC JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0xF4B SWAP2 SWAP1 PUSH2 0x216D JUMP JUMPDEST PUSH2 0xF55 SWAP2 SWAP1 PUSH2 0x21AF JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xFF5 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0xF97 JUMPI PUSH2 0xF96 PUSH2 0x16DC JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFAE JUMPI PUSH2 0xFAD PUSH2 0x16DC JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0xFEE SWAP1 PUSH2 0x21E3 JUMP JUMPDEST SWAP1 POP PUSH2 0xF58 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x1039 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1030 SWAP1 PUSH2 0x2258 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x10A1 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1097 JUMPI PUSH2 0x1096 PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x10DE JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x10D4 JUMPI PUSH2 0x10D3 PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x110D JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1103 JUMPI PUSH2 0x1102 PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1136 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x115B JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1151 JUMPI PUSH2 0x1150 PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x117E JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1174 JUMPI PUSH2 0x1173 PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x118D JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x11D1 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x126F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x11F6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x22AD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1218 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1266 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x126F JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1304 DUP3 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1314 DUP2 PUSH2 0x12F9 JUMP JUMPDEST DUP2 EQ PUSH2 0x131F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1331 DUP2 PUSH2 0x130B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x134D JUMPI PUSH2 0x134C PUSH2 0x12CF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x135B DUP5 DUP3 DUP6 ADD PUSH2 0x1322 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x136D DUP2 PUSH2 0x12F9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1388 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1364 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13A9 JUMPI PUSH2 0x13A8 PUSH2 0x138E JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x13D7 JUMPI PUSH2 0x13D6 PUSH2 0x13B2 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13F4 JUMPI PUSH2 0x13F3 PUSH2 0x13B7 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x1410 JUMPI PUSH2 0x140F PUSH2 0x13BC JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1431 JUMPI PUSH2 0x1430 PUSH2 0x12CF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x143F DUP8 DUP3 DUP9 ADD PUSH2 0x1393 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1460 JUMPI PUSH2 0x145F PUSH2 0x12D4 JUMP JUMPDEST JUMPDEST PUSH2 0x146C DUP8 DUP3 DUP9 ADD PUSH2 0x13C1 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP PUSH1 0x80 PUSH2 0x147F DUP8 DUP3 DUP9 ADD PUSH2 0x1322 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14C5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x14AA JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14ED DUP3 PUSH2 0x148B JUMP JUMPDEST PUSH2 0x14F7 DUP2 DUP6 PUSH2 0x1496 JUMP JUMPDEST SWAP4 POP PUSH2 0x1507 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14A7 JUMP JUMPDEST PUSH2 0x1510 DUP2 PUSH2 0x14D1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1535 DUP2 DUP5 PUSH2 0x14E2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1554 JUMPI PUSH2 0x1553 PUSH2 0x12CF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1562 DUP6 DUP3 DUP7 ADD PUSH2 0x1322 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1573 DUP6 DUP3 DUP7 ADD PUSH2 0x1322 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1586 DUP2 PUSH2 0x12F9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x159F DUP2 PUSH2 0x158C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x15BB PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x157D JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x15CE PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x157D JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x15E1 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1596 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x15FC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x15A5 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x160E DUP2 DUP5 PUSH2 0x14E2 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1620 DUP2 PUSH2 0x158C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x163B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1617 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666520616C72656164792065786973747320666F72206F776E6572000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1677 PUSH1 0x1D DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x1682 DUP3 PUSH2 0x1641 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16A6 DUP2 PUSH2 0x166A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1743 DUP4 DUP4 PUSH2 0x157D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1767 DUP3 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x1771 DUP2 DUP6 PUSH2 0x1716 JUMP JUMPDEST SWAP4 POP PUSH2 0x177C DUP4 PUSH2 0x1727 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17AD JUMPI DUP2 MLOAD PUSH2 0x1794 DUP9 DUP3 PUSH2 0x1737 JUMP JUMPDEST SWAP8 POP PUSH2 0x179F DUP4 PUSH2 0x174F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1780 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E1 DUP3 PUSH2 0x17BA JUMP JUMPDEST PUSH2 0x17EB DUP2 DUP6 PUSH2 0x17C5 JUMP JUMPDEST SWAP4 POP PUSH2 0x17FB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14A7 JUMP JUMPDEST PUSH2 0x1804 DUP2 PUSH2 0x14D1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x182A DUP2 DUP13 PUSH2 0x175C JUMP JUMPDEST SWAP1 POP PUSH2 0x1839 PUSH1 0x20 DUP4 ADD DUP12 PUSH2 0x1617 JUMP JUMPDEST PUSH2 0x1846 PUSH1 0x40 DUP4 ADD DUP11 PUSH2 0x1364 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1858 DUP2 DUP10 PUSH2 0x17D6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1867 PUSH1 0x80 DUP4 ADD DUP9 PUSH2 0x1364 JUMP JUMPDEST PUSH2 0x1874 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x1364 JUMP JUMPDEST PUSH2 0x1881 PUSH1 0xC0 DUP4 ADD DUP7 PUSH2 0x1364 JUMP JUMPDEST PUSH2 0x188E PUSH1 0xE0 DUP4 ADD DUP6 PUSH2 0x1617 JUMP JUMPDEST PUSH2 0x189C PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x1364 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x18BF PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1364 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x18D1 DUP2 DUP6 PUSH2 0x17D6 JUMP JUMPDEST SWAP1 POP PUSH2 0x18E0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1617 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x18F7 DUP2 PUSH2 0x130B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1913 JUMPI PUSH2 0x1912 PUSH2 0x12CF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1921 DUP5 DUP3 DUP6 ADD PUSH2 0x18E8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1939 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1322 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x194A DUP2 PUSH2 0x158C JUMP JUMPDEST DUP2 EQ PUSH2 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1967 DUP2 PUSH2 0x1941 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197C PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1958 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 ADD PUSH2 0x1995 PUSH1 0x0 DUP4 ADD DUP4 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x19A2 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x157D JUMP JUMPDEST POP PUSH2 0x19B0 PUSH1 0x20 DUP4 ADD DUP4 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x19BD PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x157D JUMP JUMPDEST POP PUSH2 0x19CB PUSH1 0x40 DUP4 ADD DUP4 PUSH2 0x196D JUMP JUMPDEST PUSH2 0x19D8 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1596 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19F9 DUP4 DUP6 PUSH2 0x17C5 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A06 DUP4 DUP6 DUP5 PUSH2 0x19DE JUMP JUMPDEST PUSH2 0x1A0F DUP4 PUSH2 0x14D1 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x1A2F PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1364 JUMP JUMPDEST PUSH2 0x1A3C PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1984 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x1A4F DUP2 DUP5 DUP7 PUSH2 0x19ED JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1AA1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1AB4 JUMPI PUSH2 0x1AB3 PUSH2 0x1A5A JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1AF4 DUP3 PUSH2 0x158C JUMP JUMPDEST SWAP2 POP PUSH2 0x1AFF DUP4 PUSH2 0x158C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1B17 JUMPI PUSH2 0x1B16 PUSH2 0x1ABA JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x696E76616C6964207369676E6174757265000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B53 PUSH1 0x11 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B5E DUP3 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B82 DUP2 PUSH2 0x1B46 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265717565737420697320746F6F206F6C640000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BBF PUSH1 0x12 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BCA DUP3 PUSH2 0x1B89 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BEE DUP2 PUSH2 0x1BB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x1C22 DUP2 PUSH2 0x1A89 JUMP JUMPDEST PUSH2 0x1C2C DUP2 DUP7 PUSH2 0x1BF5 JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0x1C47 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1C5C JUMPI PUSH2 0x1C8F JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 ISZERO ISZERO DUP3 MUL DUP7 ADD SWAP4 POP PUSH2 0x1C8F JUMP JUMPDEST PUSH2 0x1C65 DUP6 PUSH2 0x1C00 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C87 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1C68 JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xA0A4D653A200000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CCE PUSH1 0x6 DUP4 PUSH2 0x1BF5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CD9 DUP3 PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x6 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CEF DUP3 PUSH2 0x148B JUMP JUMPDEST PUSH2 0x1CF9 DUP2 DUP6 PUSH2 0x1BF5 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D09 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14A7 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xA4465766963653A200000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D4B PUSH1 0x9 DUP4 PUSH2 0x1BF5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D56 DUP3 PUSH2 0x1D15 JUMP JUMPDEST PUSH1 0x9 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xA4973737565642061743A200000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D97 PUSH1 0xC DUP4 PUSH2 0x1BF5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DA2 DUP3 PUSH2 0x1D61 JUMP JUMPDEST PUSH1 0xC DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DB9 DUP3 DUP8 PUSH2 0x1C15 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DC4 DUP3 PUSH2 0x1CC1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DD0 DUP3 DUP7 PUSH2 0x1CE4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DDB DUP3 PUSH2 0x1D3E JUMP JUMPDEST SWAP2 POP PUSH2 0x1DE7 DUP3 DUP6 PUSH2 0x1CE4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DF2 DUP3 PUSH2 0x1D8A JUMP JUMPDEST SWAP2 POP PUSH2 0x1DFE DUP3 DUP5 PUSH2 0x1CE4 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E1A DUP3 PUSH2 0x14D1 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1E39 JUMPI PUSH2 0x1E38 PUSH2 0x16AD JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E4C PUSH2 0x12C5 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E58 DUP3 DUP3 PUSH2 0x1E11 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E73 JUMPI PUSH2 0x1E72 PUSH2 0x1E0C JUMP JUMPDEST JUMPDEST PUSH2 0x1E7D PUSH1 0x60 PUSH2 0x1E42 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E8D DUP5 DUP3 DUP6 ADD PUSH2 0x1322 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x1EA1 DUP5 DUP3 DUP6 ADD PUSH2 0x1322 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1EB5 DUP5 DUP3 DUP6 ADD PUSH2 0x1958 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1ED7 JUMPI PUSH2 0x1ED6 PUSH2 0x12CF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1EE5 DUP5 DUP3 DUP6 ADD PUSH2 0x1E5D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F53 PUSH1 0x1A DUP4 PUSH2 0x1BF5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F5E DUP3 PUSH2 0x1F1D JUMP JUMPDEST PUSH1 0x1A DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F7F DUP3 PUSH2 0x17BA JUMP JUMPDEST PUSH2 0x1F89 DUP2 DUP6 PUSH2 0x1F69 JUMP JUMPDEST SWAP4 POP PUSH2 0x1F99 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14A7 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FB0 DUP3 PUSH2 0x1F46 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FBC DUP3 DUP6 PUSH2 0x1CE4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FC8 DUP3 DUP5 PUSH2 0x1F74 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2039 PUSH1 0x18 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x2044 DUP3 PUSH2 0x2003 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2068 DUP2 PUSH2 0x202C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20A5 PUSH1 0x1F DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x20B0 DUP3 PUSH2 0x206F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20D4 DUP2 PUSH2 0x2098 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2137 PUSH1 0x22 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x2142 DUP3 PUSH2 0x20DB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2166 DUP2 PUSH2 0x212A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2178 DUP3 PUSH2 0x158C JUMP JUMPDEST SWAP2 POP PUSH2 0x2183 DUP4 PUSH2 0x158C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x2191 DUP2 PUSH2 0x158C JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x21A8 JUMPI PUSH2 0x21A7 PUSH2 0x1ABA JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21BA DUP3 PUSH2 0x158C JUMP JUMPDEST SWAP2 POP PUSH2 0x21C5 DUP4 PUSH2 0x158C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x21DD JUMPI PUSH2 0x21DC PUSH2 0x1ABA JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21EE DUP3 PUSH2 0x158C JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x2201 JUMPI PUSH2 0x2200 PUSH2 0x1ABA JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2242 PUSH1 0x20 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x224D DUP3 PUSH2 0x220C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2271 DUP2 PUSH2 0x2235 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x228B DUP2 PUSH2 0x2278 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22A7 DUP2 PUSH2 0x2291 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x22C2 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x22CF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x229E JUMP JUMPDEST PUSH2 0x22DC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x22E9 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2282 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ SELFDESTRUCT PUSH32 0xC7BB4927C15B323F54F21D470143961EA2B73514B392D7E3BC911142B264736F PUSH13 0x63430008130033492061757468 PUSH16 0x72697A65207468697320646576696365 KECCAK256 PUSH21 0x6F2073656E64207472616E73616374696F6E73206F PUSH15 0x206D7920626568616C662E00000000 ","sourceMap":"847:4082:4:-:0;;;407:2:3;376:33;;1354:541:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;529:77:3;;;;;;;;;;;;;;;;;589:10;577:9;:22;;;;;;:::i;:::-;;529:77;1654:31:4::1;1671:13;1654:16;;;:31;;:::i;:::-;1643:8;:42;;;;;;:::i;:::-;;1717:18;1695:40;;;;;;;;::::0;::::1;1771:22;1745:48;;;;;;;;::::0;::::1;1828:22;1803:47;;;;;;;;::::0;::::1;1876:12;1860:28;;;;;;;;::::0;::::1;1354:541:::0;;;;847:4082;;415:696:0;471:13;520:14;557:1;537:17;548:5;537:10;;;:17;;:::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;788:280;1032:21;788:280;1088:6;1081:13;;;;;415:696;;;:::o;9889:890:2:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;88:117:6:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:820::-;942:6;950;958;966;1015:3;1003:9;994:7;990:23;986:33;983:120;;;1022:79;;:::i;:::-;983:120;1142:1;1167:64;1223:7;1214:6;1203:9;1199:22;1167:64;:::i;:::-;1157:74;;1113:128;1280:2;1306:64;1362:7;1353:6;1342:9;1338:22;1306:64;:::i;:::-;1296:74;;1251:129;1419:2;1445:64;1501:7;1492:6;1481:9;1477:22;1445:64;:::i;:::-;1435:74;;1390:129;1558:2;1584:64;1640:7;1631:6;1620:9;1616:22;1584:64;:::i;:::-;1574:74;;1529:129;845:820;;;;;;;:::o;1671:99::-;1723:6;1757:5;1751:12;1741:22;;1671:99;;;:::o;1776:180::-;1824:77;1821:1;1814:88;1921:4;1918:1;1911:15;1945:4;1942:1;1935:15;1962:180;2010:77;2007:1;2000:88;2107:4;2104:1;2097:15;2131:4;2128:1;2121:15;2148:320;2192:6;2229:1;2223:4;2219:12;2209:22;;2276:1;2270:4;2266:12;2297:18;2287:81;;2353:4;2345:6;2341:17;2331:27;;2287:81;2415:2;2407:6;2404:14;2384:18;2381:38;2378:84;;2434:18;;:::i;:::-;2378:84;2199:269;2148:320;;;:::o;2474:141::-;2523:4;2546:3;2538:11;;2569:3;2566:1;2559:14;2603:4;2600:1;2590:18;2582:26;;2474:141;;;:::o;2621:93::-;2658:6;2705:2;2700;2693:5;2689:14;2685:23;2675:33;;2621:93;;;:::o;2720:107::-;2764:8;2814:5;2808:4;2804:16;2783:37;;2720:107;;;;:::o;2833:393::-;2902:6;2952:1;2940:10;2936:18;2975:97;3005:66;2994:9;2975:97;:::i;:::-;3093:39;3123:8;3112:9;3093:39;:::i;:::-;3081:51;;3165:4;3161:9;3154:5;3150:21;3141:30;;3214:4;3204:8;3200:19;3193:5;3190:30;3180:40;;2909:317;;2833:393;;;;;:::o;3232:77::-;3269:7;3298:5;3287:16;;3232:77;;;:::o;3315:60::-;3343:3;3364:5;3357:12;;3315:60;;;:::o;3381:142::-;3431:9;3464:53;3482:34;3491:24;3509:5;3491:24;:::i;:::-;3482:34;:::i;:::-;3464:53;:::i;:::-;3451:66;;3381:142;;;:::o;3529:75::-;3572:3;3593:5;3586:12;;3529:75;;;:::o;3610:269::-;3720:39;3751:7;3720:39;:::i;:::-;3781:91;3830:41;3854:16;3830:41;:::i;:::-;3822:6;3815:4;3809:11;3781:91;:::i;:::-;3775:4;3768:105;3686:193;3610:269;;;:::o;3885:73::-;3930:3;3885:73;:::o;3964:189::-;4041:32;;:::i;:::-;4082:65;4140:6;4132;4126:4;4082:65;:::i;:::-;4017:136;3964:189;;:::o;4159:186::-;4219:120;4236:3;4229:5;4226:14;4219:120;;;4290:39;4327:1;4320:5;4290:39;:::i;:::-;4263:1;4256:5;4252:13;4243:22;;4219:120;;;4159:186;;:::o;4351:543::-;4452:2;4447:3;4444:11;4441:446;;;4486:38;4518:5;4486:38;:::i;:::-;4570:29;4588:10;4570:29;:::i;:::-;4560:8;4556:44;4753:2;4741:10;4738:18;4735:49;;;4774:8;4759:23;;4735:49;4797:80;4853:22;4871:3;4853:22;:::i;:::-;4843:8;4839:37;4826:11;4797:80;:::i;:::-;4456:431;;4441:446;4351:543;;;:::o;4900:117::-;4954:8;5004:5;4998:4;4994:16;4973:37;;4900:117;;;;:::o;5023:169::-;5067:6;5100:51;5148:1;5144:6;5136:5;5133:1;5129:13;5100:51;:::i;:::-;5096:56;5181:4;5175;5171:15;5161:25;;5074:118;5023:169;;;;:::o;5197:295::-;5273:4;5419:29;5444:3;5438:4;5419:29;:::i;:::-;5411:37;;5481:3;5478:1;5474:11;5468:4;5465:21;5457:29;;5197:295;;;;:::o;5497:1395::-;5614:37;5647:3;5614:37;:::i;:::-;5716:18;5708:6;5705:30;5702:56;;;5738:18;;:::i;:::-;5702:56;5782:38;5814:4;5808:11;5782:38;:::i;:::-;5867:67;5927:6;5919;5913:4;5867:67;:::i;:::-;5961:1;5985:4;5972:17;;6017:2;6009:6;6006:14;6034:1;6029:618;;;;6691:1;6708:6;6705:77;;;6757:9;6752:3;6748:19;6742:26;6733:35;;6705:77;6808:67;6868:6;6861:5;6808:67;:::i;:::-;6802:4;6795:81;6664:222;5999:887;;6029:618;6081:4;6077:9;6069:6;6065:22;6115:37;6147:4;6115:37;:::i;:::-;6174:1;6188:208;6202:7;6199:1;6196:14;6188:208;;;6281:9;6276:3;6272:19;6266:26;6258:6;6251:42;6332:1;6324:6;6320:14;6310:24;;6379:2;6368:9;6364:18;6351:31;;6225:4;6222:1;6218:12;6213:17;;6188:208;;;6424:6;6415:7;6412:19;6409:179;;;6482:9;6477:3;6473:19;6467:26;6525:48;6567:4;6559:6;6555:17;6544:9;6525:48;:::i;:::-;6517:6;6510:64;6432:156;6409:179;6634:1;6630;6622:6;6618:14;6614:22;6608:4;6601:36;6036:611;;;5999:887;;5589:1303;;;5497:1395;;:::o;6898:180::-;6946:77;6943:1;6936:88;7043:4;7040:1;7033:15;7067:4;7064:1;7057:15;847:4082:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@CHAIN_ID_1611":{"entryPoint":1950,"id":1611,"parameterSlots":0,"returnSlots":0},"@STATEMENT_1407":{"entryPoint":2208,"id":1407,"parameterSlots":0,"returnSlots":0},"@_throwError_228":{"entryPoint":3233,"id":228,"parameterSlots":1,"returnSlots":0},"@authenticate_1493":{"entryPoint":2356,"id":1493,"parameterSlots":3,"returnSlots":1},"@createSafe_1802":{"entryPoint":495,"id":1802,"parameterSlots":4,"returnSlots":0},"@createTokenRequest_1523":{"entryPoint":2092,"id":1523,"parameterSlots":2,"returnSlots":2},"@hashForToken_1578":{"entryPoint":2761,"id":1578,"parameterSlots":1,"returnSlots":1},"@lengthOfToken_1410":{"entryPoint":2350,"id":1410,"parameterSlots":0,"returnSlots":0},"@log10_1237":{"entryPoint":4163,"id":1237,"parameterSlots":1,"returnSlots":1},"@ownerToSafe_1631":{"entryPoint":444,"id":1631,"parameterSlots":0,"returnSlots":0},"@recover_301":{"entryPoint":2803,"id":301,"parameterSlots":2,"returnSlots":1},"@safeToOwner_1635":{"entryPoint":393,"id":1635,"parameterSlots":0,"returnSlots":0},"@stringToSign_1559":{"entryPoint":2677,"id":1559,"parameterSlots":1,"returnSlots":1},"@toEthSignedMessageHash_514":{"entryPoint":3093,"id":514,"parameterSlots":1,"returnSlots":1},"@toHexString_153":{"entryPoint":3591,"id":153,"parameterSlots":2,"returnSlots":1},"@toHexString_173":{"entryPoint":2842,"id":173,"parameterSlots":1,"returnSlots":1},"@toString_57":{"entryPoint":2887,"id":57,"parameterSlots":1,"returnSlots":1},"@tryRecover_274":{"entryPoint":3152,"id":274,"parameterSlots":2,"returnSlots":2},"@tryRecover_442":{"entryPoint":4502,"id":442,"parameterSlots":4,"returnSlots":2},"abi_decode_t_address":{"entryPoint":4898,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":6376,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":5057,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_struct$_TokenRequest_$1417_calldata_ptr":{"entryPoint":5011,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_TokenRequest_$1417_memory_ptr":{"entryPoint":7773,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":6488,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4919,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":6397,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":5437,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_struct$_TokenRequest_$1417_calldata_ptrt_bytes_calldata_ptrt_address":{"entryPoint":5143,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_struct$_TokenRequest_$1417_memory_ptr":{"entryPoint":7873,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_address_to_t_address":{"entryPoint":5943,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":5501,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":4964,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":5980,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":8834,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":6637,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":6102,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8052,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5346,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7396,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7189,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack":{"entryPoint":8236,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack":{"entryPoint":8757,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a_to_t_string_memory_ptr_fromStack":{"entryPoint":6982,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack":{"entryPoint":8344,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775_to_t_string_memory_ptr_fromStack":{"entryPoint":5738,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack":{"entryPoint":8490,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7562,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8006,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7486,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7361,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5_to_t_string_memory_ptr_fromStack":{"entryPoint":7090,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_TokenRequest_$1417_calldata_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack":{"entryPoint":6532,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_TokenRequest_$1417_memory_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack":{"entryPoint":5541,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":5526,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":5655,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":8862,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_storage_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_t_string_memory_ptr_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_t_string_memory_ptr_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7597,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4_t_string_memory_ptr_t_bytes_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8101,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":4979,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_bytes_memory_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":6314,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_struct$_TokenRequest_$1417_calldata_ptr_t_bytes_calldata_ptr__to_t_address_t_struct$_TokenRequest_$1417_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6682,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_address_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint256_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_address_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":6159,"id":null,"parameterSlots":10,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":8877,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5403,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8271,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8792,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7017,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8379,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5773,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8525,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7125,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__to_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5607,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":5670,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":7746,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":4805,"id":null,"parameterSlots":0,"returnSlots":1},"array_dataslot_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":5927,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":7168,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":5899,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":6074,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5259,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":5967,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":5910,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":6085,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8041,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5270,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7157,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_access_t_address":{"entryPoint":6442,"id":null,"parameterSlots":2,"returnSlots":1},"calldata_access_t_uint256":{"entryPoint":6509,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":8623,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":8557,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":6889,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":4857,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":8824,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":4825,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5516,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":8849,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":6622,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":5287,"id":null,"parameterSlots":3,"returnSlots":0},"decrement_t_uint256":{"entryPoint":8675,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":6793,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7697,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":6842,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":7918,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":8148,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":6746,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5852,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":5805,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":5047,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":5042,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d":{"entryPoint":5006,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":7692,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":5052,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":4820,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":4815,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5329,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be":{"entryPoint":8195,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2":{"entryPoint":8716,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a":{"entryPoint":6941,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77":{"entryPoint":8303,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775":{"entryPoint":5697,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd":{"entryPoint":8411,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb":{"entryPoint":7521,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4":{"entryPoint":7965,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60":{"entryPoint":7445,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262":{"entryPoint":7320,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5":{"entryPoint":7049,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":4875,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":6465,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:33806:6","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:6","statements":[{"nodeType":"YulAssignment","src":"57:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:6"},"nodeType":"YulFunctionCall","src":"67:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:6"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:6","type":""}],"src":"7:75:6"},{"body":{"nodeType":"YulBlock","src":"177:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:6"},"nodeType":"YulFunctionCall","src":"187:12:6"},"nodeType":"YulExpressionStatement","src":"187:12:6"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:6"},{"body":{"nodeType":"YulBlock","src":"300:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:6"},"nodeType":"YulFunctionCall","src":"310:12:6"},"nodeType":"YulExpressionStatement","src":"310:12:6"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:6"},{"body":{"nodeType":"YulBlock","src":"379:81:6","statements":[{"nodeType":"YulAssignment","src":"389:65:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:6"},"nodeType":"YulFunctionCall","src":"400:54:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:6"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:6","type":""}],"src":"334:126:6"},{"body":{"nodeType":"YulBlock","src":"511:51:6","statements":[{"nodeType":"YulAssignment","src":"521:35:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:6"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:6"},"nodeType":"YulFunctionCall","src":"532:24:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:6"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:6","type":""}],"src":"466:96:6"},{"body":{"nodeType":"YulBlock","src":"611:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:6"},"nodeType":"YulFunctionCall","src":"670:12:6"},"nodeType":"YulExpressionStatement","src":"670:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:6"},"nodeType":"YulFunctionCall","src":"641:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:6"},"nodeType":"YulFunctionCall","src":"631:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:6"},"nodeType":"YulFunctionCall","src":"624:43:6"},"nodeType":"YulIf","src":"621:63:6"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:6","type":""}],"src":"568:122:6"},{"body":{"nodeType":"YulBlock","src":"748:87:6","statements":[{"nodeType":"YulAssignment","src":"758:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"780:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"767:12:6"},"nodeType":"YulFunctionCall","src":"767:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"758:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"823:5:6"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"796:26:6"},"nodeType":"YulFunctionCall","src":"796:33:6"},"nodeType":"YulExpressionStatement","src":"796:33:6"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"726:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"734:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"742:5:6","type":""}],"src":"696:139:6"},{"body":{"nodeType":"YulBlock","src":"907:263:6","statements":[{"body":{"nodeType":"YulBlock","src":"953:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"955:77:6"},"nodeType":"YulFunctionCall","src":"955:79:6"},"nodeType":"YulExpressionStatement","src":"955:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"928:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"937:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"924:3:6"},"nodeType":"YulFunctionCall","src":"924:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"949:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"920:3:6"},"nodeType":"YulFunctionCall","src":"920:32:6"},"nodeType":"YulIf","src":"917:119:6"},{"nodeType":"YulBlock","src":"1046:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"1061:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1075:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1065:6:6","type":""}]},{"nodeType":"YulAssignment","src":"1090:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1125:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1136:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1121:3:6"},"nodeType":"YulFunctionCall","src":"1121:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1145:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1100:20:6"},"nodeType":"YulFunctionCall","src":"1100:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1090:6:6"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"877:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"888:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"900:6:6","type":""}],"src":"841:329:6"},{"body":{"nodeType":"YulBlock","src":"1241:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1258:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1281:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1263:17:6"},"nodeType":"YulFunctionCall","src":"1263:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1251:6:6"},"nodeType":"YulFunctionCall","src":"1251:37:6"},"nodeType":"YulExpressionStatement","src":"1251:37:6"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1229:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1236:3:6","type":""}],"src":"1176:118:6"},{"body":{"nodeType":"YulBlock","src":"1398:124:6","statements":[{"nodeType":"YulAssignment","src":"1408:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1420:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1431:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1416:3:6"},"nodeType":"YulFunctionCall","src":"1416:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1408:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1488:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1501:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1512:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1497:3:6"},"nodeType":"YulFunctionCall","src":"1497:17:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"1444:43:6"},"nodeType":"YulFunctionCall","src":"1444:71:6"},"nodeType":"YulExpressionStatement","src":"1444:71:6"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1370:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1382:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1393:4:6","type":""}],"src":"1300:222:6"},{"body":{"nodeType":"YulBlock","src":"1617:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1634:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1637:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1627:6:6"},"nodeType":"YulFunctionCall","src":"1627:12:6"},"nodeType":"YulExpressionStatement","src":"1627:12:6"}]},"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulFunctionDefinition","src":"1528:117:6"},{"body":{"nodeType":"YulBlock","src":"1781:152:6","statements":[{"body":{"nodeType":"YulBlock","src":"1820:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulIdentifier","src":"1822:77:6"},"nodeType":"YulFunctionCall","src":"1822:79:6"},"nodeType":"YulExpressionStatement","src":"1822:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"1802:3:6"},{"name":"offset","nodeType":"YulIdentifier","src":"1807:6:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1798:3:6"},"nodeType":"YulFunctionCall","src":"1798:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"1816:2:6","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1794:3:6"},"nodeType":"YulFunctionCall","src":"1794:25:6"},"nodeType":"YulIf","src":"1791:112:6"},{"nodeType":"YulAssignment","src":"1912:15:6","value":{"name":"offset","nodeType":"YulIdentifier","src":"1921:6:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1912:5:6"}]}]},"name":"abi_decode_t_struct$_TokenRequest_$1417_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1759:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1767:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:6","type":""}],"src":"1697:236:6"},{"body":{"nodeType":"YulBlock","src":"2028:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2045:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2048:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2038:6:6"},"nodeType":"YulFunctionCall","src":"2038:12:6"},"nodeType":"YulExpressionStatement","src":"2038:12:6"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"1939:117:6"},{"body":{"nodeType":"YulBlock","src":"2151:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2168:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2171:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2161:6:6"},"nodeType":"YulFunctionCall","src":"2161:12:6"},"nodeType":"YulExpressionStatement","src":"2161:12:6"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"2062:117:6"},{"body":{"nodeType":"YulBlock","src":"2274:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2291:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2294:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2284:6:6"},"nodeType":"YulFunctionCall","src":"2284:12:6"},"nodeType":"YulExpressionStatement","src":"2284:12:6"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"2185:117:6"},{"body":{"nodeType":"YulBlock","src":"2395:478:6","statements":[{"body":{"nodeType":"YulBlock","src":"2444:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2446:77:6"},"nodeType":"YulFunctionCall","src":"2446:79:6"},"nodeType":"YulExpressionStatement","src":"2446:79:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2423:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2431:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2419:3:6"},"nodeType":"YulFunctionCall","src":"2419:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"2438:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2415:3:6"},"nodeType":"YulFunctionCall","src":"2415:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2408:6:6"},"nodeType":"YulFunctionCall","src":"2408:35:6"},"nodeType":"YulIf","src":"2405:122:6"},{"nodeType":"YulAssignment","src":"2536:30:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2559:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2546:12:6"},"nodeType":"YulFunctionCall","src":"2546:20:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2536:6:6"}]},{"body":{"nodeType":"YulBlock","src":"2609:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"2611:77:6"},"nodeType":"YulFunctionCall","src":"2611:79:6"},"nodeType":"YulExpressionStatement","src":"2611:79:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2581:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2589:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2578:2:6"},"nodeType":"YulFunctionCall","src":"2578:30:6"},"nodeType":"YulIf","src":"2575:117:6"},{"nodeType":"YulAssignment","src":"2701:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2717:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2725:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2713:3:6"},"nodeType":"YulFunctionCall","src":"2713:17:6"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2701:8:6"}]},{"body":{"nodeType":"YulBlock","src":"2784:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"2786:77:6"},"nodeType":"YulFunctionCall","src":"2786:79:6"},"nodeType":"YulExpressionStatement","src":"2786:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2749:8:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2763:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2771:4:6","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2759:3:6"},"nodeType":"YulFunctionCall","src":"2759:17:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2745:3:6"},"nodeType":"YulFunctionCall","src":"2745:32:6"},{"name":"end","nodeType":"YulIdentifier","src":"2779:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2742:2:6"},"nodeType":"YulFunctionCall","src":"2742:41:6"},"nodeType":"YulIf","src":"2739:128:6"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2362:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"2370:3:6","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"2378:8:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"2388:6:6","type":""}],"src":"2321:552:6"},{"body":{"nodeType":"YulBlock","src":"3030:732:6","statements":[{"body":{"nodeType":"YulBlock","src":"3077:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3079:77:6"},"nodeType":"YulFunctionCall","src":"3079:79:6"},"nodeType":"YulExpressionStatement","src":"3079:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3051:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"3060:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3047:3:6"},"nodeType":"YulFunctionCall","src":"3047:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"3072:3:6","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3043:3:6"},"nodeType":"YulFunctionCall","src":"3043:33:6"},"nodeType":"YulIf","src":"3040:120:6"},{"nodeType":"YulBlock","src":"3170:149:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3185:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3199:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3189:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3214:95:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3281:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3292:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3277:3:6"},"nodeType":"YulFunctionCall","src":"3277:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3301:7:6"}],"functionName":{"name":"abi_decode_t_struct$_TokenRequest_$1417_calldata_ptr","nodeType":"YulIdentifier","src":"3224:52:6"},"nodeType":"YulFunctionCall","src":"3224:85:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3214:6:6"}]}]},{"nodeType":"YulBlock","src":"3329:297:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3344:46:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3375:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3386:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3371:3:6"},"nodeType":"YulFunctionCall","src":"3371:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3358:12:6"},"nodeType":"YulFunctionCall","src":"3358:32:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3348:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"3437:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3439:77:6"},"nodeType":"YulFunctionCall","src":"3439:79:6"},"nodeType":"YulExpressionStatement","src":"3439:79:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3409:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"3417:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3406:2:6"},"nodeType":"YulFunctionCall","src":"3406:30:6"},"nodeType":"YulIf","src":"3403:117:6"},{"nodeType":"YulAssignment","src":"3534:82:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3588:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3599:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3584:3:6"},"nodeType":"YulFunctionCall","src":"3584:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3608:7:6"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"3552:31:6"},"nodeType":"YulFunctionCall","src":"3552:64:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3534:6:6"},{"name":"value2","nodeType":"YulIdentifier","src":"3542:6:6"}]}]},{"nodeType":"YulBlock","src":"3636:119:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3651:17:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3665:3:6","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3655:6:6","type":""}]},{"nodeType":"YulAssignment","src":"3682:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3717:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"3728:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3713:3:6"},"nodeType":"YulFunctionCall","src":"3713:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3737:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3692:20:6"},"nodeType":"YulFunctionCall","src":"3692:53:6"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3682:6:6"}]}]}]},"name":"abi_decode_tuple_t_struct$_TokenRequest_$1417_calldata_ptrt_bytes_calldata_ptrt_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2976:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2987:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2999:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3007:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3015:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3023:6:6","type":""}],"src":"2879:883:6"},{"body":{"nodeType":"YulBlock","src":"3827:40:6","statements":[{"nodeType":"YulAssignment","src":"3838:22:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3854:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3848:5:6"},"nodeType":"YulFunctionCall","src":"3848:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3838:6:6"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3810:5:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3820:6:6","type":""}],"src":"3768:99:6"},{"body":{"nodeType":"YulBlock","src":"3969:73:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3986:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"3991:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3979:6:6"},"nodeType":"YulFunctionCall","src":"3979:19:6"},"nodeType":"YulExpressionStatement","src":"3979:19:6"},{"nodeType":"YulAssignment","src":"4007:29:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4026:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"4031:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4022:3:6"},"nodeType":"YulFunctionCall","src":"4022:14:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"4007:11:6"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3941:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"3946:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"3957:11:6","type":""}],"src":"3873:169:6"},{"body":{"nodeType":"YulBlock","src":"4110:184:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4120:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"4129:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4124:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"4189:63:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4214:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"4219:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4210:3:6"},"nodeType":"YulFunctionCall","src":"4210:11:6"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4233:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"4238:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4229:3:6"},"nodeType":"YulFunctionCall","src":"4229:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4223:5:6"},"nodeType":"YulFunctionCall","src":"4223:18:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4203:6:6"},"nodeType":"YulFunctionCall","src":"4203:39:6"},"nodeType":"YulExpressionStatement","src":"4203:39:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4150:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"4153:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4147:2:6"},"nodeType":"YulFunctionCall","src":"4147:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4161:19:6","statements":[{"nodeType":"YulAssignment","src":"4163:15:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4172:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"4175:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4168:3:6"},"nodeType":"YulFunctionCall","src":"4168:10:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4163:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"4143:3:6","statements":[]},"src":"4139:113:6"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4272:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"4277:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4268:3:6"},"nodeType":"YulFunctionCall","src":"4268:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"4286:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4261:6:6"},"nodeType":"YulFunctionCall","src":"4261:27:6"},"nodeType":"YulExpressionStatement","src":"4261:27:6"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"4092:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"4097:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"4102:6:6","type":""}],"src":"4048:246:6"},{"body":{"nodeType":"YulBlock","src":"4348:54:6","statements":[{"nodeType":"YulAssignment","src":"4358:38:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4376:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"4383:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4372:3:6"},"nodeType":"YulFunctionCall","src":"4372:14:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4392:2:6","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4388:3:6"},"nodeType":"YulFunctionCall","src":"4388:7:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4368:3:6"},"nodeType":"YulFunctionCall","src":"4368:28:6"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4358:6:6"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4331:5:6","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4341:6:6","type":""}],"src":"4300:102:6"},{"body":{"nodeType":"YulBlock","src":"4500:285:6","statements":[{"nodeType":"YulVariableDeclaration","src":"4510:53:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4557:5:6"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"4524:32:6"},"nodeType":"YulFunctionCall","src":"4524:39:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4514:6:6","type":""}]},{"nodeType":"YulAssignment","src":"4572:78:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4638:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"4643:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4579:58:6"},"nodeType":"YulFunctionCall","src":"4579:71:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4572:3:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4698:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"4705:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4694:3:6"},"nodeType":"YulFunctionCall","src":"4694:16:6"},{"name":"pos","nodeType":"YulIdentifier","src":"4712:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"4717:6:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4659:34:6"},"nodeType":"YulFunctionCall","src":"4659:65:6"},"nodeType":"YulExpressionStatement","src":"4659:65:6"},{"nodeType":"YulAssignment","src":"4733:46:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4744:3:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4771:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"4749:21:6"},"nodeType":"YulFunctionCall","src":"4749:29:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4740:3:6"},"nodeType":"YulFunctionCall","src":"4740:39:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4733:3:6"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4481:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4488:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4496:3:6","type":""}],"src":"4408:377:6"},{"body":{"nodeType":"YulBlock","src":"4909:195:6","statements":[{"nodeType":"YulAssignment","src":"4919:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4931:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4942:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4927:3:6"},"nodeType":"YulFunctionCall","src":"4927:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4919:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4966:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4977:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4962:3:6"},"nodeType":"YulFunctionCall","src":"4962:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4985:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"4991:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4981:3:6"},"nodeType":"YulFunctionCall","src":"4981:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4955:6:6"},"nodeType":"YulFunctionCall","src":"4955:47:6"},"nodeType":"YulExpressionStatement","src":"4955:47:6"},{"nodeType":"YulAssignment","src":"5011:86:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5083:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"5092:4:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5019:63:6"},"nodeType":"YulFunctionCall","src":"5019:78:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5011:4:6"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4881:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4893:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4904:4:6","type":""}],"src":"4791:313:6"},{"body":{"nodeType":"YulBlock","src":"5193:391:6","statements":[{"body":{"nodeType":"YulBlock","src":"5239:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5241:77:6"},"nodeType":"YulFunctionCall","src":"5241:79:6"},"nodeType":"YulExpressionStatement","src":"5241:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5214:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"5223:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5210:3:6"},"nodeType":"YulFunctionCall","src":"5210:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"5235:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5206:3:6"},"nodeType":"YulFunctionCall","src":"5206:32:6"},"nodeType":"YulIf","src":"5203:119:6"},{"nodeType":"YulBlock","src":"5332:117:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5347:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5361:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5351:6:6","type":""}]},{"nodeType":"YulAssignment","src":"5376:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5411:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"5422:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5407:3:6"},"nodeType":"YulFunctionCall","src":"5407:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5431:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5386:20:6"},"nodeType":"YulFunctionCall","src":"5386:53:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5376:6:6"}]}]},{"nodeType":"YulBlock","src":"5459:118:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5474:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5488:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5478:6:6","type":""}]},{"nodeType":"YulAssignment","src":"5504:63:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5539:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"5550:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5535:3:6"},"nodeType":"YulFunctionCall","src":"5535:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5559:7:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5514:20:6"},"nodeType":"YulFunctionCall","src":"5514:53:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5504:6:6"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5155:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5166:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5178:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5186:6:6","type":""}],"src":"5110:474:6"},{"body":{"nodeType":"YulBlock","src":"5645:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5662:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5685:5:6"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5667:17:6"},"nodeType":"YulFunctionCall","src":"5667:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5655:6:6"},"nodeType":"YulFunctionCall","src":"5655:37:6"},"nodeType":"YulExpressionStatement","src":"5655:37:6"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5633:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5640:3:6","type":""}],"src":"5590:108:6"},{"body":{"nodeType":"YulBlock","src":"5749:32:6","statements":[{"nodeType":"YulAssignment","src":"5759:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"5770:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5759:7:6"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5731:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5741:7:6","type":""}],"src":"5704:77:6"},{"body":{"nodeType":"YulBlock","src":"5842:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5859:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5882:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5864:17:6"},"nodeType":"YulFunctionCall","src":"5864:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5852:6:6"},"nodeType":"YulFunctionCall","src":"5852:37:6"},"nodeType":"YulExpressionStatement","src":"5852:37:6"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5830:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5837:3:6","type":""}],"src":"5787:108:6"},{"body":{"nodeType":"YulBlock","src":"6115:572:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6125:26:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6141:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"6146:4:6","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6137:3:6"},"nodeType":"YulFunctionCall","src":"6137:14:6"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"6129:4:6","type":""}]},{"nodeType":"YulBlock","src":"6161:165:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6197:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6227:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"6234:4:6","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6223:3:6"},"nodeType":"YulFunctionCall","src":"6223:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6217:5:6"},"nodeType":"YulFunctionCall","src":"6217:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6201:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6287:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6305:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"6310:4:6","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6301:3:6"},"nodeType":"YulFunctionCall","src":"6301:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"6253:33:6"},"nodeType":"YulFunctionCall","src":"6253:63:6"},"nodeType":"YulExpressionStatement","src":"6253:63:6"}]},{"nodeType":"YulBlock","src":"6336:166:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6373:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6403:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"6410:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6399:3:6"},"nodeType":"YulFunctionCall","src":"6399:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6393:5:6"},"nodeType":"YulFunctionCall","src":"6393:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6377:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6463:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6481:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"6486:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6477:3:6"},"nodeType":"YulFunctionCall","src":"6477:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"6429:33:6"},"nodeType":"YulFunctionCall","src":"6429:63:6"},"nodeType":"YulExpressionStatement","src":"6429:63:6"}]},{"nodeType":"YulBlock","src":"6512:168:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6551:43:6","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6581:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"6588:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6577:3:6"},"nodeType":"YulFunctionCall","src":"6577:16:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6571:5:6"},"nodeType":"YulFunctionCall","src":"6571:23:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6555:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6641:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6659:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"6664:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6655:3:6"},"nodeType":"YulFunctionCall","src":"6655:14:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"6607:33:6"},"nodeType":"YulFunctionCall","src":"6607:63:6"},"nodeType":"YulExpressionStatement","src":"6607:63:6"}]}]},"name":"abi_encode_t_struct$_TokenRequest_$1417_memory_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6102:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6109:3:6","type":""}],"src":"5989:698:6"},{"body":{"nodeType":"YulBlock","src":"6899:338:6","statements":[{"nodeType":"YulAssignment","src":"6909:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6921:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6932:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6917:3:6"},"nodeType":"YulFunctionCall","src":"6917:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6909:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7050:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7063:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7074:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7059:3:6"},"nodeType":"YulFunctionCall","src":"7059:17:6"}],"functionName":{"name":"abi_encode_t_struct$_TokenRequest_$1417_memory_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6946:103:6"},"nodeType":"YulFunctionCall","src":"6946:131:6"},"nodeType":"YulExpressionStatement","src":"6946:131:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7098:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7109:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7094:3:6"},"nodeType":"YulFunctionCall","src":"7094:18:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7118:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"7124:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7114:3:6"},"nodeType":"YulFunctionCall","src":"7114:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7087:6:6"},"nodeType":"YulFunctionCall","src":"7087:48:6"},"nodeType":"YulExpressionStatement","src":"7087:48:6"},{"nodeType":"YulAssignment","src":"7144:86:6","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7216:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"7225:4:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7152:63:6"},"nodeType":"YulFunctionCall","src":"7152:78:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7144:4:6"}]}]},"name":"abi_encode_tuple_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__to_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6863:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6875:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6883:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6894:4:6","type":""}],"src":"6693:544:6"},{"body":{"nodeType":"YulBlock","src":"7308:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7325:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7348:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7330:17:6"},"nodeType":"YulFunctionCall","src":"7330:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7318:6:6"},"nodeType":"YulFunctionCall","src":"7318:37:6"},"nodeType":"YulExpressionStatement","src":"7318:37:6"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7296:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7303:3:6","type":""}],"src":"7243:118:6"},{"body":{"nodeType":"YulBlock","src":"7465:124:6","statements":[{"nodeType":"YulAssignment","src":"7475:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7487:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7498:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7483:3:6"},"nodeType":"YulFunctionCall","src":"7483:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7475:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7555:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7568:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7579:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7564:3:6"},"nodeType":"YulFunctionCall","src":"7564:17:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"7511:43:6"},"nodeType":"YulFunctionCall","src":"7511:71:6"},"nodeType":"YulExpressionStatement","src":"7511:71:6"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7437:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7449:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7460:4:6","type":""}],"src":"7367:222:6"},{"body":{"nodeType":"YulBlock","src":"7701:73:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7723:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"7731:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7719:3:6"},"nodeType":"YulFunctionCall","src":"7719:14:6"},{"hexValue":"5361666520616c72656164792065786973747320666f72206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7735:31:6","type":"","value":"Safe already exists for owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7712:6:6"},"nodeType":"YulFunctionCall","src":"7712:55:6"},"nodeType":"YulExpressionStatement","src":"7712:55:6"}]},"name":"store_literal_in_memory_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7693:6:6","type":""}],"src":"7595:179:6"},{"body":{"nodeType":"YulBlock","src":"7926:220:6","statements":[{"nodeType":"YulAssignment","src":"7936:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8002:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8007:2:6","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7943:58:6"},"nodeType":"YulFunctionCall","src":"7943:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7936:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8108:3:6"}],"functionName":{"name":"store_literal_in_memory_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775","nodeType":"YulIdentifier","src":"8019:88:6"},"nodeType":"YulFunctionCall","src":"8019:93:6"},"nodeType":"YulExpressionStatement","src":"8019:93:6"},{"nodeType":"YulAssignment","src":"8121:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8132:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"8137:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8128:3:6"},"nodeType":"YulFunctionCall","src":"8128:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8121:3:6"}]}]},"name":"abi_encode_t_stringliteral_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7914:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7922:3:6","type":""}],"src":"7780:366:6"},{"body":{"nodeType":"YulBlock","src":"8323:248:6","statements":[{"nodeType":"YulAssignment","src":"8333:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8345:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8356:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8341:3:6"},"nodeType":"YulFunctionCall","src":"8341:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8333:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8380:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8391:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8376:3:6"},"nodeType":"YulFunctionCall","src":"8376:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8399:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"8405:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8395:3:6"},"nodeType":"YulFunctionCall","src":"8395:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8369:6:6"},"nodeType":"YulFunctionCall","src":"8369:47:6"},"nodeType":"YulExpressionStatement","src":"8369:47:6"},{"nodeType":"YulAssignment","src":"8425:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8559:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8433:124:6"},"nodeType":"YulFunctionCall","src":"8433:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8425:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8303:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8318:4:6","type":""}],"src":"8152:419:6"},{"body":{"nodeType":"YulBlock","src":"8605:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8622:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8625:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8615:6:6"},"nodeType":"YulFunctionCall","src":"8615:88:6"},"nodeType":"YulExpressionStatement","src":"8615:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8719:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8722:4:6","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8712:6:6"},"nodeType":"YulFunctionCall","src":"8712:15:6"},"nodeType":"YulExpressionStatement","src":"8712:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8743:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8746:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8736:6:6"},"nodeType":"YulFunctionCall","src":"8736:15:6"},"nodeType":"YulExpressionStatement","src":"8736:15:6"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"8577:180:6"},{"body":{"nodeType":"YulBlock","src":"8791:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8808:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8811:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8801:6:6"},"nodeType":"YulFunctionCall","src":"8801:88:6"},"nodeType":"YulExpressionStatement","src":"8801:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8905:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8908:4:6","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8898:6:6"},"nodeType":"YulFunctionCall","src":"8898:15:6"},"nodeType":"YulExpressionStatement","src":"8898:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8929:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8932:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8922:6:6"},"nodeType":"YulFunctionCall","src":"8922:15:6"},"nodeType":"YulExpressionStatement","src":"8922:15:6"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"8763:180:6"},{"body":{"nodeType":"YulBlock","src":"9023:40:6","statements":[{"nodeType":"YulAssignment","src":"9034:22:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9050:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9044:5:6"},"nodeType":"YulFunctionCall","src":"9044:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9034:6:6"}]}]},"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9006:5:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9016:6:6","type":""}],"src":"8949:114:6"},{"body":{"nodeType":"YulBlock","src":"9180:73:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9197:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"9202:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9190:6:6"},"nodeType":"YulFunctionCall","src":"9190:19:6"},"nodeType":"YulExpressionStatement","src":"9190:19:6"},{"nodeType":"YulAssignment","src":"9218:29:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9237:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9242:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9233:3:6"},"nodeType":"YulFunctionCall","src":"9233:14:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9218:11:6"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9152:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"9157:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9168:11:6","type":""}],"src":"9069:184:6"},{"body":{"nodeType":"YulBlock","src":"9331:60:6","statements":[{"nodeType":"YulAssignment","src":"9341:11:6","value":{"name":"ptr","nodeType":"YulIdentifier","src":"9349:3:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"9341:4:6"}]},{"nodeType":"YulAssignment","src":"9362:22:6","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"9374:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9379:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9370:3:6"},"nodeType":"YulFunctionCall","src":"9370:14:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"9362:4:6"}]}]},"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"9318:3:6","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"9326:4:6","type":""}],"src":"9259:132:6"},{"body":{"nodeType":"YulBlock","src":"9477:99:6","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9521:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"9529:3:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"9487:33:6"},"nodeType":"YulFunctionCall","src":"9487:46:6"},"nodeType":"YulExpressionStatement","src":"9487:46:6"},{"nodeType":"YulAssignment","src":"9542:28:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9560:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9565:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9556:3:6"},"nodeType":"YulFunctionCall","src":"9556:14:6"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"9542:10:6"}]}]},"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"9450:6:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9458:3:6","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"9466:10:6","type":""}],"src":"9397:179:6"},{"body":{"nodeType":"YulBlock","src":"9657:38:6","statements":[{"nodeType":"YulAssignment","src":"9667:22:6","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"9679:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"9684:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9675:3:6"},"nodeType":"YulFunctionCall","src":"9675:14:6"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"9667:4:6"}]}]},"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"9644:3:6","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"9652:4:6","type":""}],"src":"9582:113:6"},{"body":{"nodeType":"YulBlock","src":"9855:608:6","statements":[{"nodeType":"YulVariableDeclaration","src":"9865:68:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9927:5:6"}],"functionName":{"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"9879:47:6"},"nodeType":"YulFunctionCall","src":"9879:54:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9869:6:6","type":""}]},{"nodeType":"YulAssignment","src":"9942:93:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10023:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"10028:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9949:73:6"},"nodeType":"YulFunctionCall","src":"9949:86:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9942:3:6"}]},{"nodeType":"YulVariableDeclaration","src":"10044:71:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10109:5:6"}],"functionName":{"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"10059:49:6"},"nodeType":"YulFunctionCall","src":"10059:56:6"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"10048:7:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10124:21:6","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"10138:7:6"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"10128:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"10214:224:6","statements":[{"nodeType":"YulVariableDeclaration","src":"10228:34:6","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10255:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10249:5:6"},"nodeType":"YulFunctionCall","src":"10249:13:6"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"10232:13:6","type":""}]},{"nodeType":"YulAssignment","src":"10275:70:6","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"10326:13:6"},{"name":"pos","nodeType":"YulIdentifier","src":"10341:3:6"}],"functionName":{"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulIdentifier","src":"10282:43:6"},"nodeType":"YulFunctionCall","src":"10282:63:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10275:3:6"}]},{"nodeType":"YulAssignment","src":"10358:70:6","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10421:6:6"}],"functionName":{"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"10368:52:6"},"nodeType":"YulFunctionCall","src":"10368:60:6"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10358:6:6"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10176:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"10179:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10173:2:6"},"nodeType":"YulFunctionCall","src":"10173:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10187:18:6","statements":[{"nodeType":"YulAssignment","src":"10189:14:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10198:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"10201:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10194:3:6"},"nodeType":"YulFunctionCall","src":"10194:9:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10189:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"10158:14:6","statements":[{"nodeType":"YulVariableDeclaration","src":"10160:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"10169:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10164:1:6","type":""}]}]},"src":"10154:284:6"},{"nodeType":"YulAssignment","src":"10447:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"10454:3:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10447:3:6"}]}]},"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9834:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9841:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9850:3:6","type":""}],"src":"9731:732:6"},{"body":{"nodeType":"YulBlock","src":"10527:40:6","statements":[{"nodeType":"YulAssignment","src":"10538:22:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10554:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10548:5:6"},"nodeType":"YulFunctionCall","src":"10548:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10538:6:6"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10510:5:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10520:6:6","type":""}],"src":"10469:98:6"},{"body":{"nodeType":"YulBlock","src":"10668:73:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10685:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"10690:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10678:6:6"},"nodeType":"YulFunctionCall","src":"10678:19:6"},"nodeType":"YulExpressionStatement","src":"10678:19:6"},{"nodeType":"YulAssignment","src":"10706:29:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10725:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"10730:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10721:3:6"},"nodeType":"YulFunctionCall","src":"10721:14:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"10706:11:6"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10640:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"10645:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"10656:11:6","type":""}],"src":"10573:168:6"},{"body":{"nodeType":"YulBlock","src":"10837:283:6","statements":[{"nodeType":"YulVariableDeclaration","src":"10847:52:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10893:5:6"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"10861:31:6"},"nodeType":"YulFunctionCall","src":"10861:38:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10851:6:6","type":""}]},{"nodeType":"YulAssignment","src":"10908:77:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10973:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"10978:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10915:57:6"},"nodeType":"YulFunctionCall","src":"10915:70:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10908:3:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11033:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"11040:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11029:3:6"},"nodeType":"YulFunctionCall","src":"11029:16:6"},{"name":"pos","nodeType":"YulIdentifier","src":"11047:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"11052:6:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10994:34:6"},"nodeType":"YulFunctionCall","src":"10994:65:6"},"nodeType":"YulExpressionStatement","src":"10994:65:6"},{"nodeType":"YulAssignment","src":"11068:46:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11079:3:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11106:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"11084:21:6"},"nodeType":"YulFunctionCall","src":"11084:29:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11075:3:6"},"nodeType":"YulFunctionCall","src":"11075:39:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11068:3:6"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10818:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10825:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10833:3:6","type":""}],"src":"10747:373:6"},{"body":{"nodeType":"YulBlock","src":"11516:956:6","statements":[{"nodeType":"YulAssignment","src":"11526:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11538:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"11549:3:6","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11534:3:6"},"nodeType":"YulFunctionCall","src":"11534:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11526:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11574:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"11585:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11570:3:6"},"nodeType":"YulFunctionCall","src":"11570:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11593:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"11599:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11589:3:6"},"nodeType":"YulFunctionCall","src":"11589:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11563:6:6"},"nodeType":"YulFunctionCall","src":"11563:47:6"},"nodeType":"YulExpressionStatement","src":"11563:47:6"},{"nodeType":"YulAssignment","src":"11619:116:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11721:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"11730:4:6"}],"functionName":{"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11627:93:6"},"nodeType":"YulFunctionCall","src":"11627:108:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11619:4:6"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11789:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11802:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"11813:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11798:3:6"},"nodeType":"YulFunctionCall","src":"11798:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11745:43:6"},"nodeType":"YulFunctionCall","src":"11745:72:6"},"nodeType":"YulExpressionStatement","src":"11745:72:6"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11871:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11884:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"11895:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11880:3:6"},"nodeType":"YulFunctionCall","src":"11880:18:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11827:43:6"},"nodeType":"YulFunctionCall","src":"11827:72:6"},"nodeType":"YulExpressionStatement","src":"11827:72:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11920:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"11931:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11916:3:6"},"nodeType":"YulFunctionCall","src":"11916:18:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11940:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"11946:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11936:3:6"},"nodeType":"YulFunctionCall","src":"11936:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11909:6:6"},"nodeType":"YulFunctionCall","src":"11909:48:6"},"nodeType":"YulExpressionStatement","src":"11909:48:6"},{"nodeType":"YulAssignment","src":"11966:84:6","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"12036:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"12045:4:6"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11974:61:6"},"nodeType":"YulFunctionCall","src":"11974:76:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11966:4:6"}]},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"12104:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12117:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12128:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12113:3:6"},"nodeType":"YulFunctionCall","src":"12113:19:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12060:43:6"},"nodeType":"YulFunctionCall","src":"12060:73:6"},"nodeType":"YulExpressionStatement","src":"12060:73:6"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"12187:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12200:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12211:3:6","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12196:3:6"},"nodeType":"YulFunctionCall","src":"12196:19:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12143:43:6"},"nodeType":"YulFunctionCall","src":"12143:73:6"},"nodeType":"YulExpressionStatement","src":"12143:73:6"},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"12270:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12283:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12294:3:6","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12279:3:6"},"nodeType":"YulFunctionCall","src":"12279:19:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12226:43:6"},"nodeType":"YulFunctionCall","src":"12226:73:6"},"nodeType":"YulExpressionStatement","src":"12226:73:6"},{"expression":{"arguments":[{"name":"value7","nodeType":"YulIdentifier","src":"12353:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12366:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12377:3:6","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12362:3:6"},"nodeType":"YulFunctionCall","src":"12362:19:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12309:43:6"},"nodeType":"YulFunctionCall","src":"12309:73:6"},"nodeType":"YulExpressionStatement","src":"12309:73:6"},{"expression":{"arguments":[{"name":"value8","nodeType":"YulIdentifier","src":"12436:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12449:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12460:3:6","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12445:3:6"},"nodeType":"YulFunctionCall","src":"12445:19:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12392:43:6"},"nodeType":"YulFunctionCall","src":"12392:73:6"},"nodeType":"YulExpressionStatement","src":"12392:73:6"}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_address_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint256_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_address_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11424:9:6","type":""},{"name":"value8","nodeType":"YulTypedName","src":"11436:6:6","type":""},{"name":"value7","nodeType":"YulTypedName","src":"11444:6:6","type":""},{"name":"value6","nodeType":"YulTypedName","src":"11452:6:6","type":""},{"name":"value5","nodeType":"YulTypedName","src":"11460:6:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11468:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11476:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11484:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11492:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11500:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11511:4:6","type":""}],"src":"11126:1346:6"},{"body":{"nodeType":"YulBlock","src":"12650:357:6","statements":[{"nodeType":"YulAssignment","src":"12660:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12672:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12683:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12668:3:6"},"nodeType":"YulFunctionCall","src":"12668:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12660:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12740:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12753:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12764:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12749:3:6"},"nodeType":"YulFunctionCall","src":"12749:17:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12696:43:6"},"nodeType":"YulFunctionCall","src":"12696:71:6"},"nodeType":"YulExpressionStatement","src":"12696:71:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12788:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12799:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12784:3:6"},"nodeType":"YulFunctionCall","src":"12784:18:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12808:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"12814:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12804:3:6"},"nodeType":"YulFunctionCall","src":"12804:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12777:6:6"},"nodeType":"YulFunctionCall","src":"12777:48:6"},"nodeType":"YulExpressionStatement","src":"12777:48:6"},{"nodeType":"YulAssignment","src":"12834:84:6","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12904:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"12913:4:6"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12842:61:6"},"nodeType":"YulFunctionCall","src":"12842:76:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12834:4:6"}]},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12972:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12985:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"12996:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12981:3:6"},"nodeType":"YulFunctionCall","src":"12981:18:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12928:43:6"},"nodeType":"YulFunctionCall","src":"12928:72:6"},"nodeType":"YulExpressionStatement","src":"12928:72:6"}]},"name":"abi_encode_tuple_t_address_t_bytes_memory_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12606:9:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12618:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12626:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12634:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12645:4:6","type":""}],"src":"12478:529:6"},{"body":{"nodeType":"YulBlock","src":"13076:80:6","statements":[{"nodeType":"YulAssignment","src":"13086:22:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13101:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13095:5:6"},"nodeType":"YulFunctionCall","src":"13095:13:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13086:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13144:5:6"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"13117:26:6"},"nodeType":"YulFunctionCall","src":"13117:33:6"},"nodeType":"YulExpressionStatement","src":"13117:33:6"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13054:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"13062:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13070:5:6","type":""}],"src":"13013:143:6"},{"body":{"nodeType":"YulBlock","src":"13239:274:6","statements":[{"body":{"nodeType":"YulBlock","src":"13285:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"13287:77:6"},"nodeType":"YulFunctionCall","src":"13287:79:6"},"nodeType":"YulExpressionStatement","src":"13287:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13260:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"13269:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13256:3:6"},"nodeType":"YulFunctionCall","src":"13256:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"13281:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13252:3:6"},"nodeType":"YulFunctionCall","src":"13252:32:6"},"nodeType":"YulIf","src":"13249:119:6"},{"nodeType":"YulBlock","src":"13378:128:6","statements":[{"nodeType":"YulVariableDeclaration","src":"13393:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"13407:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13397:6:6","type":""}]},{"nodeType":"YulAssignment","src":"13422:74:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13468:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"13479:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13464:3:6"},"nodeType":"YulFunctionCall","src":"13464:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13488:7:6"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"13432:31:6"},"nodeType":"YulFunctionCall","src":"13432:64:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13422:6:6"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13209:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13220:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13232:6:6","type":""}],"src":"13162:351:6"},{"body":{"nodeType":"YulBlock","src":"13577:64:6","statements":[{"nodeType":"YulAssignment","src":"13587:48:6","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"13617:3:6"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"13626:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"13631:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13622:3:6"},"nodeType":"YulFunctionCall","src":"13622:12:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"13596:20:6"},"nodeType":"YulFunctionCall","src":"13596:39:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13587:5:6"}]}]},"name":"calldata_access_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"baseRef","nodeType":"YulTypedName","src":"13554:7:6","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"13563:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13571:5:6","type":""}],"src":"13519:122:6"},{"body":{"nodeType":"YulBlock","src":"13690:79:6","statements":[{"body":{"nodeType":"YulBlock","src":"13747:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13756:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13759:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13749:6:6"},"nodeType":"YulFunctionCall","src":"13749:12:6"},"nodeType":"YulExpressionStatement","src":"13749:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13713:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13738:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13720:17:6"},"nodeType":"YulFunctionCall","src":"13720:24:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13710:2:6"},"nodeType":"YulFunctionCall","src":"13710:35:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13703:6:6"},"nodeType":"YulFunctionCall","src":"13703:43:6"},"nodeType":"YulIf","src":"13700:63:6"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13683:5:6","type":""}],"src":"13647:122:6"},{"body":{"nodeType":"YulBlock","src":"13827:87:6","statements":[{"nodeType":"YulAssignment","src":"13837:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13859:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13846:12:6"},"nodeType":"YulFunctionCall","src":"13846:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13837:5:6"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13902:5:6"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"13875:26:6"},"nodeType":"YulFunctionCall","src":"13875:33:6"},"nodeType":"YulExpressionStatement","src":"13875:33:6"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13805:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"13813:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13821:5:6","type":""}],"src":"13775:139:6"},{"body":{"nodeType":"YulBlock","src":"13978:64:6","statements":[{"nodeType":"YulAssignment","src":"13988:48:6","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"14018:3:6"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"14027:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"14032:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14023:3:6"},"nodeType":"YulFunctionCall","src":"14023:12:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"13997:20:6"},"nodeType":"YulFunctionCall","src":"13997:39:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13988:5:6"}]}]},"name":"calldata_access_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"baseRef","nodeType":"YulTypedName","src":"13955:7:6","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"13964:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13972:5:6","type":""}],"src":"13920:122:6"},{"body":{"nodeType":"YulBlock","src":"14264:653:6","statements":[{"nodeType":"YulVariableDeclaration","src":"14274:26:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14290:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"14295:4:6","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14286:3:6"},"nodeType":"YulFunctionCall","src":"14286:14:6"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"14278:4:6","type":""}]},{"nodeType":"YulBlock","src":"14310:192:6","statements":[{"nodeType":"YulVariableDeclaration","src":"14346:70:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14392:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14403:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"14410:4:6","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14399:3:6"},"nodeType":"YulFunctionCall","src":"14399:16:6"}],"functionName":{"name":"calldata_access_t_address","nodeType":"YulIdentifier","src":"14366:25:6"},"nodeType":"YulFunctionCall","src":"14366:50:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14350:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14463:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14481:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"14486:4:6","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14477:3:6"},"nodeType":"YulFunctionCall","src":"14477:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"14429:33:6"},"nodeType":"YulFunctionCall","src":"14429:63:6"},"nodeType":"YulExpressionStatement","src":"14429:63:6"}]},{"nodeType":"YulBlock","src":"14512:193:6","statements":[{"nodeType":"YulVariableDeclaration","src":"14549:70:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14595:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14606:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"14613:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14602:3:6"},"nodeType":"YulFunctionCall","src":"14602:16:6"}],"functionName":{"name":"calldata_access_t_address","nodeType":"YulIdentifier","src":"14569:25:6"},"nodeType":"YulFunctionCall","src":"14569:50:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14553:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14666:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14684:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"14689:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14680:3:6"},"nodeType":"YulFunctionCall","src":"14680:14:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"14632:33:6"},"nodeType":"YulFunctionCall","src":"14632:63:6"},"nodeType":"YulExpressionStatement","src":"14632:63:6"}]},{"nodeType":"YulBlock","src":"14715:195:6","statements":[{"nodeType":"YulVariableDeclaration","src":"14754:70:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14800:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14811:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"14818:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14807:3:6"},"nodeType":"YulFunctionCall","src":"14807:16:6"}],"functionName":{"name":"calldata_access_t_uint256","nodeType":"YulIdentifier","src":"14774:25:6"},"nodeType":"YulFunctionCall","src":"14774:50:6"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14758:12:6","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14871:12:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14889:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"14894:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14885:3:6"},"nodeType":"YulFunctionCall","src":"14885:14:6"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"14837:33:6"},"nodeType":"YulFunctionCall","src":"14837:63:6"},"nodeType":"YulExpressionStatement","src":"14837:63:6"}]}]},"name":"abi_encode_t_struct$_TokenRequest_$1417_calldata_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14251:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14258:3:6","type":""}],"src":"14136:781:6"},{"body":{"nodeType":"YulBlock","src":"14987:82:6","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"15010:3:6"},{"name":"src","nodeType":"YulIdentifier","src":"15015:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"15020:6:6"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"14997:12:6"},"nodeType":"YulFunctionCall","src":"14997:30:6"},"nodeType":"YulExpressionStatement","src":"14997:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"15047:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"15052:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15043:3:6"},"nodeType":"YulFunctionCall","src":"15043:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"15061:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15036:6:6"},"nodeType":"YulFunctionCall","src":"15036:27:6"},"nodeType":"YulExpressionStatement","src":"15036:27:6"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"14969:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"14974:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"14979:6:6","type":""}],"src":"14923:146:6"},{"body":{"nodeType":"YulBlock","src":"15197:214:6","statements":[{"nodeType":"YulAssignment","src":"15207:77:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15272:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"15277:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15214:57:6"},"nodeType":"YulFunctionCall","src":"15214:70:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15207:3:6"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"15331:5:6"},{"name":"pos","nodeType":"YulIdentifier","src":"15338:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"15343:6:6"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"15294:36:6"},"nodeType":"YulFunctionCall","src":"15294:56:6"},"nodeType":"YulExpressionStatement","src":"15294:56:6"},{"nodeType":"YulAssignment","src":"15359:46:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15370:3:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15397:6:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"15375:21:6"},"nodeType":"YulFunctionCall","src":"15375:29:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15366:3:6"},"nodeType":"YulFunctionCall","src":"15366:39:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15359:3:6"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"15170:5:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"15177:6:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15185:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15193:3:6","type":""}],"src":"15097:314:6"},{"body":{"nodeType":"YulBlock","src":"15661:431:6","statements":[{"nodeType":"YulAssignment","src":"15671:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15683:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"15694:3:6","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15679:3:6"},"nodeType":"YulFunctionCall","src":"15679:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15671:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15752:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15765:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"15776:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15761:3:6"},"nodeType":"YulFunctionCall","src":"15761:17:6"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"15708:43:6"},"nodeType":"YulFunctionCall","src":"15708:71:6"},"nodeType":"YulExpressionStatement","src":"15708:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15895:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15908:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"15919:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15904:3:6"},"nodeType":"YulFunctionCall","src":"15904:18:6"}],"functionName":{"name":"abi_encode_t_struct$_TokenRequest_$1417_calldata_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15789:105:6"},"nodeType":"YulFunctionCall","src":"15789:134:6"},"nodeType":"YulExpressionStatement","src":"15789:134:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15944:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"15955:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15940:3:6"},"nodeType":"YulFunctionCall","src":"15940:19:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15965:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"15971:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15961:3:6"},"nodeType":"YulFunctionCall","src":"15961:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15933:6:6"},"nodeType":"YulFunctionCall","src":"15933:49:6"},"nodeType":"YulExpressionStatement","src":"15933:49:6"},{"nodeType":"YulAssignment","src":"15991:94:6","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16063:6:6"},{"name":"value3","nodeType":"YulIdentifier","src":"16071:6:6"},{"name":"tail","nodeType":"YulIdentifier","src":"16080:4:6"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15999:63:6"},"nodeType":"YulFunctionCall","src":"15999:86:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15991:4:6"}]}]},"name":"abi_encode_tuple_t_address_t_struct$_TokenRequest_$1417_calldata_ptr_t_bytes_calldata_ptr__to_t_address_t_struct$_TokenRequest_$1417_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15609:9:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15621:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15629:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15637:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15645:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15656:4:6","type":""}],"src":"15417:675:6"},{"body":{"nodeType":"YulBlock","src":"16126:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16143:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16146:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16136:6:6"},"nodeType":"YulFunctionCall","src":"16136:88:6"},"nodeType":"YulExpressionStatement","src":"16136:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16240:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16243:4:6","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16233:6:6"},"nodeType":"YulFunctionCall","src":"16233:15:6"},"nodeType":"YulExpressionStatement","src":"16233:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16264:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16267:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16257:6:6"},"nodeType":"YulFunctionCall","src":"16257:15:6"},"nodeType":"YulExpressionStatement","src":"16257:15:6"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"16098:180:6"},{"body":{"nodeType":"YulBlock","src":"16335:269:6","statements":[{"nodeType":"YulAssignment","src":"16345:22:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"16359:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"16365:1:6","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"16355:3:6"},"nodeType":"YulFunctionCall","src":"16355:12:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16345:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"16376:38:6","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"16406:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"16412:1:6","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16402:3:6"},"nodeType":"YulFunctionCall","src":"16402:12:6"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"16380:18:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"16453:51:6","statements":[{"nodeType":"YulAssignment","src":"16467:27:6","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16481:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"16489:4:6","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16477:3:6"},"nodeType":"YulFunctionCall","src":"16477:17:6"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16467:6:6"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"16433:18:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16426:6:6"},"nodeType":"YulFunctionCall","src":"16426:26:6"},"nodeType":"YulIf","src":"16423:81:6"},{"body":{"nodeType":"YulBlock","src":"16556:42:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"16570:16:6"},"nodeType":"YulFunctionCall","src":"16570:18:6"},"nodeType":"YulExpressionStatement","src":"16570:18:6"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"16520:18:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16543:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"16551:2:6","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16540:2:6"},"nodeType":"YulFunctionCall","src":"16540:14:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16517:2:6"},"nodeType":"YulFunctionCall","src":"16517:38:6"},"nodeType":"YulIf","src":"16514:84:6"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"16319:4:6","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"16328:6:6","type":""}],"src":"16284:320:6"},{"body":{"nodeType":"YulBlock","src":"16638:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16655:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16658:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16648:6:6"},"nodeType":"YulFunctionCall","src":"16648:88:6"},"nodeType":"YulExpressionStatement","src":"16648:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16752:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16755:4:6","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16745:6:6"},"nodeType":"YulFunctionCall","src":"16745:15:6"},"nodeType":"YulExpressionStatement","src":"16745:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16776:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16779:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16769:6:6"},"nodeType":"YulFunctionCall","src":"16769:15:6"},"nodeType":"YulExpressionStatement","src":"16769:15:6"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"16610:180:6"},{"body":{"nodeType":"YulBlock","src":"16841:149:6","statements":[{"nodeType":"YulAssignment","src":"16851:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16874:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"16856:17:6"},"nodeType":"YulFunctionCall","src":"16856:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"16851:1:6"}]},{"nodeType":"YulAssignment","src":"16885:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"16908:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"16890:17:6"},"nodeType":"YulFunctionCall","src":"16890:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"16885:1:6"}]},{"nodeType":"YulAssignment","src":"16919:17:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16931:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"16934:1:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16927:3:6"},"nodeType":"YulFunctionCall","src":"16927:9:6"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"16919:4:6"}]},{"body":{"nodeType":"YulBlock","src":"16961:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"16963:16:6"},"nodeType":"YulFunctionCall","src":"16963:18:6"},"nodeType":"YulExpressionStatement","src":"16963:18:6"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"16952:4:6"},{"name":"x","nodeType":"YulIdentifier","src":"16958:1:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16949:2:6"},"nodeType":"YulFunctionCall","src":"16949:11:6"},"nodeType":"YulIf","src":"16946:37:6"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"16827:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"16830:1:6","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"16836:4:6","type":""}],"src":"16796:194:6"},{"body":{"nodeType":"YulBlock","src":"17102:61:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17124:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"17132:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17120:3:6"},"nodeType":"YulFunctionCall","src":"17120:14:6"},{"hexValue":"696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"17136:19:6","type":"","value":"invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17113:6:6"},"nodeType":"YulFunctionCall","src":"17113:43:6"},"nodeType":"YulExpressionStatement","src":"17113:43:6"}]},"name":"store_literal_in_memory_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17094:6:6","type":""}],"src":"16996:167:6"},{"body":{"nodeType":"YulBlock","src":"17315:220:6","statements":[{"nodeType":"YulAssignment","src":"17325:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17391:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"17396:2:6","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17332:58:6"},"nodeType":"YulFunctionCall","src":"17332:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17325:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17497:3:6"}],"functionName":{"name":"store_literal_in_memory_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a","nodeType":"YulIdentifier","src":"17408:88:6"},"nodeType":"YulFunctionCall","src":"17408:93:6"},"nodeType":"YulExpressionStatement","src":"17408:93:6"},{"nodeType":"YulAssignment","src":"17510:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17521:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"17526:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17517:3:6"},"nodeType":"YulFunctionCall","src":"17517:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17510:3:6"}]}]},"name":"abi_encode_t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17303:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17311:3:6","type":""}],"src":"17169:366:6"},{"body":{"nodeType":"YulBlock","src":"17712:248:6","statements":[{"nodeType":"YulAssignment","src":"17722:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17734:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"17745:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17730:3:6"},"nodeType":"YulFunctionCall","src":"17730:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17722:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17769:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"17780:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17765:3:6"},"nodeType":"YulFunctionCall","src":"17765:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17788:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"17794:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17784:3:6"},"nodeType":"YulFunctionCall","src":"17784:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17758:6:6"},"nodeType":"YulFunctionCall","src":"17758:47:6"},"nodeType":"YulExpressionStatement","src":"17758:47:6"},{"nodeType":"YulAssignment","src":"17814:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17948:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17822:124:6"},"nodeType":"YulFunctionCall","src":"17822:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17814:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17692:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17707:4:6","type":""}],"src":"17541:419:6"},{"body":{"nodeType":"YulBlock","src":"18072:62:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18094:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"18102:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18090:3:6"},"nodeType":"YulFunctionCall","src":"18090:14:6"},{"hexValue":"5265717565737420697320746f6f206f6c64","kind":"string","nodeType":"YulLiteral","src":"18106:20:6","type":"","value":"Request is too old"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18083:6:6"},"nodeType":"YulFunctionCall","src":"18083:44:6"},"nodeType":"YulExpressionStatement","src":"18083:44:6"}]},"name":"store_literal_in_memory_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18064:6:6","type":""}],"src":"17966:168:6"},{"body":{"nodeType":"YulBlock","src":"18286:220:6","statements":[{"nodeType":"YulAssignment","src":"18296:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18362:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"18367:2:6","type":"","value":"18"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18303:58:6"},"nodeType":"YulFunctionCall","src":"18303:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18296:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18468:3:6"}],"functionName":{"name":"store_literal_in_memory_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5","nodeType":"YulIdentifier","src":"18379:88:6"},"nodeType":"YulFunctionCall","src":"18379:93:6"},"nodeType":"YulExpressionStatement","src":"18379:93:6"},{"nodeType":"YulAssignment","src":"18481:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18492:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"18497:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18488:3:6"},"nodeType":"YulFunctionCall","src":"18488:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18481:3:6"}]}]},"name":"abi_encode_t_stringliteral_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18274:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18282:3:6","type":""}],"src":"18140:366:6"},{"body":{"nodeType":"YulBlock","src":"18683:248:6","statements":[{"nodeType":"YulAssignment","src":"18693:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18705:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"18716:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18701:3:6"},"nodeType":"YulFunctionCall","src":"18701:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18693:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18740:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"18751:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18736:3:6"},"nodeType":"YulFunctionCall","src":"18736:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18759:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"18765:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18755:3:6"},"nodeType":"YulFunctionCall","src":"18755:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18729:6:6"},"nodeType":"YulFunctionCall","src":"18729:47:6"},"nodeType":"YulExpressionStatement","src":"18729:47:6"},{"nodeType":"YulAssignment","src":"18785:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18919:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18793:124:6"},"nodeType":"YulFunctionCall","src":"18793:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18785:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18663:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18678:4:6","type":""}],"src":"18512:419:6"},{"body":{"nodeType":"YulBlock","src":"19051:34:6","statements":[{"nodeType":"YulAssignment","src":"19061:18:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"19076:3:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"19061:11:6"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19023:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"19028:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"19039:11:6","type":""}],"src":"18937:148:6"},{"body":{"nodeType":"YulBlock","src":"19145:87:6","statements":[{"nodeType":"YulAssignment","src":"19155:11:6","value":{"name":"ptr","nodeType":"YulIdentifier","src":"19163:3:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"19155:4:6"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19183:1:6","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"19186:3:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19176:6:6"},"nodeType":"YulFunctionCall","src":"19176:14:6"},"nodeType":"YulExpressionStatement","src":"19176:14:6"},{"nodeType":"YulAssignment","src":"19199:26:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19217:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19220:4:6","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"19207:9:6"},"nodeType":"YulFunctionCall","src":"19207:18:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"19199:4:6"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"19132:3:6","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"19140:4:6","type":""}],"src":"19091:141:6"},{"body":{"nodeType":"YulBlock","src":"19369:767:6","statements":[{"nodeType":"YulVariableDeclaration","src":"19379:29:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19402:5:6"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"19396:5:6"},"nodeType":"YulFunctionCall","src":"19396:12:6"},"variables":[{"name":"slotValue","nodeType":"YulTypedName","src":"19383:9:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19417:50:6","value":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"19457:9:6"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"19431:25:6"},"nodeType":"YulFunctionCall","src":"19431:36:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"19421:6:6","type":""}]},{"nodeType":"YulAssignment","src":"19476:96:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19560:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"19565:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"19483:76:6"},"nodeType":"YulFunctionCall","src":"19483:89:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19476:3:6"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"19621:159:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19674:3:6"},{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"19683:9:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19698:4:6","type":"","value":"0xff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19694:3:6"},"nodeType":"YulFunctionCall","src":"19694:9:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19679:3:6"},"nodeType":"YulFunctionCall","src":"19679:25:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19667:6:6"},"nodeType":"YulFunctionCall","src":"19667:38:6"},"nodeType":"YulExpressionStatement","src":"19667:38:6"},{"nodeType":"YulAssignment","src":"19718:52:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19729:3:6"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19738:6:6"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19760:6:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19753:6:6"},"nodeType":"YulFunctionCall","src":"19753:14:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19746:6:6"},"nodeType":"YulFunctionCall","src":"19746:22:6"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"19734:3:6"},"nodeType":"YulFunctionCall","src":"19734:35:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19725:3:6"},"nodeType":"YulFunctionCall","src":"19725:45:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"19718:3:6"}]}]},"nodeType":"YulCase","src":"19614:166:6","value":{"kind":"number","nodeType":"YulLiteral","src":"19619:1:6","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"19796:334:6","statements":[{"nodeType":"YulVariableDeclaration","src":"19841:53:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19888:5:6"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"19856:31:6"},"nodeType":"YulFunctionCall","src":"19856:38:6"},"variables":[{"name":"dataPos","nodeType":"YulTypedName","src":"19845:7:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19907:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"19916:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"19911:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"19974:110:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20003:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"20008:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19999:3:6"},"nodeType":"YulFunctionCall","src":"19999:11:6"},{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"20018:7:6"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"20012:5:6"},"nodeType":"YulFunctionCall","src":"20012:14:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19992:6:6"},"nodeType":"YulFunctionCall","src":"19992:35:6"},"nodeType":"YulExpressionStatement","src":"19992:35:6"},{"nodeType":"YulAssignment","src":"20044:26:6","value":{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"20059:7:6"},{"kind":"number","nodeType":"YulLiteral","src":"20068:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20055:3:6"},"nodeType":"YulFunctionCall","src":"20055:15:6"},"variableNames":[{"name":"dataPos","nodeType":"YulIdentifier","src":"20044:7:6"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19941:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"19944:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19938:2:6"},"nodeType":"YulFunctionCall","src":"19938:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"19952:21:6","statements":[{"nodeType":"YulAssignment","src":"19954:17:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19963:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"19966:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19959:3:6"},"nodeType":"YulFunctionCall","src":"19959:12:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"19954:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"19934:3:6","statements":[]},"src":"19930:154:6"},{"nodeType":"YulAssignment","src":"20097:23:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20108:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"20113:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20104:3:6"},"nodeType":"YulFunctionCall","src":"20104:16:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"20097:3:6"}]}]},"nodeType":"YulCase","src":"19789:341:6","value":{"kind":"number","nodeType":"YulLiteral","src":"19794:1:6","type":"","value":"1"}}],"expression":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"19592:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"19603:1:6","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19588:3:6"},"nodeType":"YulFunctionCall","src":"19588:17:6"},"nodeType":"YulSwitch","src":"19581:549:6"}]},"name":"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19350:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"19357:3:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"19365:3:6","type":""}],"src":"19262:874:6"},{"body":{"nodeType":"YulBlock","src":"20248:108:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20270:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"20278:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20266:3:6"},"nodeType":"YulFunctionCall","src":"20266:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"20282:66:6","type":"","value":"0x0a0a4d653a200000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20259:6:6"},"nodeType":"YulFunctionCall","src":"20259:90:6"},"nodeType":"YulExpressionStatement","src":"20259:90:6"}]},"name":"store_literal_in_memory_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20240:6:6","type":""}],"src":"20142:214:6"},{"body":{"nodeType":"YulBlock","src":"20526:236:6","statements":[{"nodeType":"YulAssignment","src":"20536:91:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20620:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"20625:1:6","type":"","value":"6"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"20543:76:6"},"nodeType":"YulFunctionCall","src":"20543:84:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20536:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20725:3:6"}],"functionName":{"name":"store_literal_in_memory_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262","nodeType":"YulIdentifier","src":"20636:88:6"},"nodeType":"YulFunctionCall","src":"20636:93:6"},"nodeType":"YulExpressionStatement","src":"20636:93:6"},{"nodeType":"YulAssignment","src":"20738:18:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20749:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"20754:1:6","type":"","value":"6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20745:3:6"},"nodeType":"YulFunctionCall","src":"20745:11:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20738:3:6"}]}]},"name":"abi_encode_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20514:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20522:3:6","type":""}],"src":"20362:400:6"},{"body":{"nodeType":"YulBlock","src":"20878:280:6","statements":[{"nodeType":"YulVariableDeclaration","src":"20888:53:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20935:5:6"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"20902:32:6"},"nodeType":"YulFunctionCall","src":"20902:39:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"20892:6:6","type":""}]},{"nodeType":"YulAssignment","src":"20950:96:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21034:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"21039:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"20957:76:6"},"nodeType":"YulFunctionCall","src":"20957:89:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20950:3:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21094:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"21101:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21090:3:6"},"nodeType":"YulFunctionCall","src":"21090:16:6"},{"name":"pos","nodeType":"YulIdentifier","src":"21108:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"21113:6:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"21055:34:6"},"nodeType":"YulFunctionCall","src":"21055:65:6"},"nodeType":"YulExpressionStatement","src":"21055:65:6"},{"nodeType":"YulAssignment","src":"21129:23:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21140:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"21145:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21136:3:6"},"nodeType":"YulFunctionCall","src":"21136:16:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21129:3:6"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20859:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"20866:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20874:3:6","type":""}],"src":"20768:390:6"},{"body":{"nodeType":"YulBlock","src":"21270:108:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21292:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"21300:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21288:3:6"},"nodeType":"YulFunctionCall","src":"21288:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"21304:66:6","type":"","value":"0x0a4465766963653a200000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21281:6:6"},"nodeType":"YulFunctionCall","src":"21281:90:6"},"nodeType":"YulExpressionStatement","src":"21281:90:6"}]},"name":"store_literal_in_memory_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21262:6:6","type":""}],"src":"21164:214:6"},{"body":{"nodeType":"YulBlock","src":"21548:236:6","statements":[{"nodeType":"YulAssignment","src":"21558:91:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21642:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"21647:1:6","type":"","value":"9"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21565:76:6"},"nodeType":"YulFunctionCall","src":"21565:84:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21558:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21747:3:6"}],"functionName":{"name":"store_literal_in_memory_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60","nodeType":"YulIdentifier","src":"21658:88:6"},"nodeType":"YulFunctionCall","src":"21658:93:6"},"nodeType":"YulExpressionStatement","src":"21658:93:6"},{"nodeType":"YulAssignment","src":"21760:18:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21771:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"21776:1:6","type":"","value":"9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21767:3:6"},"nodeType":"YulFunctionCall","src":"21767:11:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21760:3:6"}]}]},"name":"abi_encode_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21536:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21544:3:6","type":""}],"src":"21384:400:6"},{"body":{"nodeType":"YulBlock","src":"21896:108:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21918:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"21926:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21914:3:6"},"nodeType":"YulFunctionCall","src":"21914:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"21930:66:6","type":"","value":"0x0a4973737565642061743a200000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21907:6:6"},"nodeType":"YulFunctionCall","src":"21907:90:6"},"nodeType":"YulExpressionStatement","src":"21907:90:6"}]},"name":"store_literal_in_memory_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21888:6:6","type":""}],"src":"21790:214:6"},{"body":{"nodeType":"YulBlock","src":"22174:238:6","statements":[{"nodeType":"YulAssignment","src":"22184:92:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22268:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"22273:2:6","type":"","value":"12"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"22191:76:6"},"nodeType":"YulFunctionCall","src":"22191:85:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22184:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22374:3:6"}],"functionName":{"name":"store_literal_in_memory_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb","nodeType":"YulIdentifier","src":"22285:88:6"},"nodeType":"YulFunctionCall","src":"22285:93:6"},"nodeType":"YulExpressionStatement","src":"22285:93:6"},{"nodeType":"YulAssignment","src":"22387:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22398:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"22403:2:6","type":"","value":"12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22394:3:6"},"nodeType":"YulFunctionCall","src":"22394:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22387:3:6"}]}]},"name":"abi_encode_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22162:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22170:3:6","type":""}],"src":"22010:402:6"},{"body":{"nodeType":"YulBlock","src":"22998:967:6","statements":[{"nodeType":"YulAssignment","src":"23009:99:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23095:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"23104:3:6"}],"functionName":{"name":"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23016:78:6"},"nodeType":"YulFunctionCall","src":"23016:92:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23009:3:6"}]},{"nodeType":"YulAssignment","src":"23118:155:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23269:3:6"}],"functionName":{"name":"abi_encode_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23125:142:6"},"nodeType":"YulFunctionCall","src":"23125:148:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23118:3:6"}]},{"nodeType":"YulAssignment","src":"23283:102:6","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23372:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"23381:3:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23290:81:6"},"nodeType":"YulFunctionCall","src":"23290:95:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23283:3:6"}]},{"nodeType":"YulAssignment","src":"23395:155:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23546:3:6"}],"functionName":{"name":"abi_encode_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23402:142:6"},"nodeType":"YulFunctionCall","src":"23402:148:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23395:3:6"}]},{"nodeType":"YulAssignment","src":"23560:102:6","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23649:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"23658:3:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23567:81:6"},"nodeType":"YulFunctionCall","src":"23567:95:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23560:3:6"}]},{"nodeType":"YulAssignment","src":"23672:155:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23823:3:6"}],"functionName":{"name":"abi_encode_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23679:142:6"},"nodeType":"YulFunctionCall","src":"23679:148:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23672:3:6"}]},{"nodeType":"YulAssignment","src":"23837:102:6","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"23926:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"23935:3:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23844:81:6"},"nodeType":"YulFunctionCall","src":"23844:95:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23837:3:6"}]},{"nodeType":"YulAssignment","src":"23949:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"23956:3:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23949:3:6"}]}]},"name":"abi_encode_tuple_packed_t_string_storage_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_t_string_memory_ptr_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_t_string_memory_ptr_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22953:3:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"22959:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22967:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22975:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22983:6:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22994:3:6","type":""}],"src":"22418:1547:6"},{"body":{"nodeType":"YulBlock","src":"24060:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24077:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24080:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24070:6:6"},"nodeType":"YulFunctionCall","src":"24070:12:6"},"nodeType":"YulExpressionStatement","src":"24070:12:6"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"23971:117:6"},{"body":{"nodeType":"YulBlock","src":"24137:238:6","statements":[{"nodeType":"YulVariableDeclaration","src":"24147:58:6","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24169:6:6"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"24199:4:6"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"24177:21:6"},"nodeType":"YulFunctionCall","src":"24177:27:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24165:3:6"},"nodeType":"YulFunctionCall","src":"24165:40:6"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"24151:10:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"24316:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"24318:16:6"},"nodeType":"YulFunctionCall","src":"24318:18:6"},"nodeType":"YulExpressionStatement","src":"24318:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"24259:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"24271:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24256:2:6"},"nodeType":"YulFunctionCall","src":"24256:34:6"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"24295:10:6"},{"name":"memPtr","nodeType":"YulIdentifier","src":"24307:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24292:2:6"},"nodeType":"YulFunctionCall","src":"24292:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"24253:2:6"},"nodeType":"YulFunctionCall","src":"24253:62:6"},"nodeType":"YulIf","src":"24250:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24354:2:6","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"24358:10:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24347:6:6"},"nodeType":"YulFunctionCall","src":"24347:22:6"},"nodeType":"YulExpressionStatement","src":"24347:22:6"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24123:6:6","type":""},{"name":"size","nodeType":"YulTypedName","src":"24131:4:6","type":""}],"src":"24094:281:6"},{"body":{"nodeType":"YulBlock","src":"24422:88:6","statements":[{"nodeType":"YulAssignment","src":"24432:30:6","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"24442:18:6"},"nodeType":"YulFunctionCall","src":"24442:20:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24432:6:6"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24491:6:6"},{"name":"size","nodeType":"YulIdentifier","src":"24499:4:6"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"24471:19:6"},"nodeType":"YulFunctionCall","src":"24471:33:6"},"nodeType":"YulExpressionStatement","src":"24471:33:6"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"24406:4:6","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"24415:6:6","type":""}],"src":"24381:129:6"},{"body":{"nodeType":"YulBlock","src":"24605:28:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24622:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24625:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24615:6:6"},"nodeType":"YulFunctionCall","src":"24615:12:6"},"nodeType":"YulExpressionStatement","src":"24615:12:6"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"24516:117:6"},{"body":{"nodeType":"YulBlock","src":"24770:662:6","statements":[{"body":{"nodeType":"YulBlock","src":"24814:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"24816:77:6"},"nodeType":"YulFunctionCall","src":"24816:79:6"},"nodeType":"YulExpressionStatement","src":"24816:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"24791:3:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"24796:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24787:3:6"},"nodeType":"YulFunctionCall","src":"24787:19:6"},{"kind":"number","nodeType":"YulLiteral","src":"24808:4:6","type":"","value":"0x60"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24783:3:6"},"nodeType":"YulFunctionCall","src":"24783:30:6"},"nodeType":"YulIf","src":"24780:117:6"},{"nodeType":"YulAssignment","src":"24906:30:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24931:4:6","type":"","value":"0x60"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"24915:15:6"},"nodeType":"YulFunctionCall","src":"24915:21:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24906:5:6"}]},{"nodeType":"YulBlock","src":"24946:151:6","statements":[{"nodeType":"YulVariableDeclaration","src":"24982:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"24996:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24986:6:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25022:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"25029:4:6","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25018:3:6"},"nodeType":"YulFunctionCall","src":"25018:16:6"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25061:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"25072:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25057:3:6"},"nodeType":"YulFunctionCall","src":"25057:22:6"},{"name":"end","nodeType":"YulIdentifier","src":"25081:3:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"25036:20:6"},"nodeType":"YulFunctionCall","src":"25036:49:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25011:6:6"},"nodeType":"YulFunctionCall","src":"25011:75:6"},"nodeType":"YulExpressionStatement","src":"25011:75:6"}]},{"nodeType":"YulBlock","src":"25107:153:6","statements":[{"nodeType":"YulVariableDeclaration","src":"25144:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"25158:2:6","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25148:6:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25185:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"25192:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25181:3:6"},"nodeType":"YulFunctionCall","src":"25181:16:6"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25224:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"25235:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25220:3:6"},"nodeType":"YulFunctionCall","src":"25220:22:6"},{"name":"end","nodeType":"YulIdentifier","src":"25244:3:6"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"25199:20:6"},"nodeType":"YulFunctionCall","src":"25199:49:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25174:6:6"},"nodeType":"YulFunctionCall","src":"25174:75:6"},"nodeType":"YulExpressionStatement","src":"25174:75:6"}]},{"nodeType":"YulBlock","src":"25270:155:6","statements":[{"nodeType":"YulVariableDeclaration","src":"25309:16:6","value":{"kind":"number","nodeType":"YulLiteral","src":"25323:2:6","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25313:6:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25350:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"25357:4:6","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25346:3:6"},"nodeType":"YulFunctionCall","src":"25346:16:6"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25389:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"25400:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25385:3:6"},"nodeType":"YulFunctionCall","src":"25385:22:6"},{"name":"end","nodeType":"YulIdentifier","src":"25409:3:6"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"25364:20:6"},"nodeType":"YulFunctionCall","src":"25364:49:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25339:6:6"},"nodeType":"YulFunctionCall","src":"25339:75:6"},"nodeType":"YulExpressionStatement","src":"25339:75:6"}]}]},"name":"abi_decode_t_struct$_TokenRequest_$1417_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24745:9:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"24756:3:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24764:5:6","type":""}],"src":"24685:747:6"},{"body":{"nodeType":"YulBlock","src":"25534:293:6","statements":[{"body":{"nodeType":"YulBlock","src":"25580:83:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"25582:77:6"},"nodeType":"YulFunctionCall","src":"25582:79:6"},"nodeType":"YulExpressionStatement","src":"25582:79:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"25555:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"25564:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25551:3:6"},"nodeType":"YulFunctionCall","src":"25551:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"25576:2:6","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"25547:3:6"},"nodeType":"YulFunctionCall","src":"25547:32:6"},"nodeType":"YulIf","src":"25544:119:6"},{"nodeType":"YulBlock","src":"25673:147:6","statements":[{"nodeType":"YulVariableDeclaration","src":"25688:15:6","value":{"kind":"number","nodeType":"YulLiteral","src":"25702:1:6","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25692:6:6","type":""}]},{"nodeType":"YulAssignment","src":"25717:93:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25782:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"25793:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25778:3:6"},"nodeType":"YulFunctionCall","src":"25778:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"25802:7:6"}],"functionName":{"name":"abi_decode_t_struct$_TokenRequest_$1417_memory_ptr","nodeType":"YulIdentifier","src":"25727:50:6"},"nodeType":"YulFunctionCall","src":"25727:83:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"25717:6:6"}]}]}]},"name":"abi_decode_tuple_t_struct$_TokenRequest_$1417_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25504:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"25515:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"25527:6:6","type":""}],"src":"25438:389:6"},{"body":{"nodeType":"YulBlock","src":"25861:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25878:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25881:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25871:6:6"},"nodeType":"YulFunctionCall","src":"25871:88:6"},"nodeType":"YulExpressionStatement","src":"25871:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25975:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25978:4:6","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25968:6:6"},"nodeType":"YulFunctionCall","src":"25968:15:6"},"nodeType":"YulExpressionStatement","src":"25968:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25999:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"26002:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25992:6:6"},"nodeType":"YulFunctionCall","src":"25992:15:6"},"nodeType":"YulExpressionStatement","src":"25992:15:6"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"25833:180:6"},{"body":{"nodeType":"YulBlock","src":"26125:108:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26147:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"26155:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26143:3:6"},"nodeType":"YulFunctionCall","src":"26143:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"26159:66:6","type":"","value":"0x19457468657265756d205369676e6564204d6573736167653a0a000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26136:6:6"},"nodeType":"YulFunctionCall","src":"26136:90:6"},"nodeType":"YulExpressionStatement","src":"26136:90:6"}]},"name":"store_literal_in_memory_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26117:6:6","type":""}],"src":"26019:214:6"},{"body":{"nodeType":"YulBlock","src":"26403:238:6","statements":[{"nodeType":"YulAssignment","src":"26413:92:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26497:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"26502:2:6","type":"","value":"26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"26420:76:6"},"nodeType":"YulFunctionCall","src":"26420:85:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26413:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26603:3:6"}],"functionName":{"name":"store_literal_in_memory_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","nodeType":"YulIdentifier","src":"26514:88:6"},"nodeType":"YulFunctionCall","src":"26514:93:6"},"nodeType":"YulExpressionStatement","src":"26514:93:6"},{"nodeType":"YulAssignment","src":"26616:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26627:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"26632:2:6","type":"","value":"26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26623:3:6"},"nodeType":"YulFunctionCall","src":"26623:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26616:3:6"}]}]},"name":"abi_encode_t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26391:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26399:3:6","type":""}],"src":"26239:402:6"},{"body":{"nodeType":"YulBlock","src":"26760:34:6","statements":[{"nodeType":"YulAssignment","src":"26770:18:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"26785:3:6"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26770:11:6"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26732:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"26737:6:6","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"26748:11:6","type":""}],"src":"26647:147:6"},{"body":{"nodeType":"YulBlock","src":"26908:278:6","statements":[{"nodeType":"YulVariableDeclaration","src":"26918:52:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26964:5:6"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"26932:31:6"},"nodeType":"YulFunctionCall","src":"26932:38:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"26922:6:6","type":""}]},{"nodeType":"YulAssignment","src":"26979:95:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27062:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"27067:6:6"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"26986:75:6"},"nodeType":"YulFunctionCall","src":"26986:88:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26979:3:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27122:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"27129:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27118:3:6"},"nodeType":"YulFunctionCall","src":"27118:16:6"},{"name":"pos","nodeType":"YulIdentifier","src":"27136:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"27141:6:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"27083:34:6"},"nodeType":"YulFunctionCall","src":"27083:65:6"},"nodeType":"YulExpressionStatement","src":"27083:65:6"},{"nodeType":"YulAssignment","src":"27157:23:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27168:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"27173:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27164:3:6"},"nodeType":"YulFunctionCall","src":"27164:16:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27157:3:6"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"26889:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"26896:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26904:3:6","type":""}],"src":"26800:386:6"},{"body":{"nodeType":"YulBlock","src":"27475:414:6","statements":[{"nodeType":"YulAssignment","src":"27486:155:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27637:3:6"}],"functionName":{"name":"abi_encode_t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"27493:142:6"},"nodeType":"YulFunctionCall","src":"27493:148:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27486:3:6"}]},{"nodeType":"YulAssignment","src":"27651:102:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27740:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"27749:3:6"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"27658:81:6"},"nodeType":"YulFunctionCall","src":"27658:95:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27651:3:6"}]},{"nodeType":"YulAssignment","src":"27763:100:6","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27850:6:6"},{"name":"pos","nodeType":"YulIdentifier","src":"27859:3:6"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"27770:79:6"},"nodeType":"YulFunctionCall","src":"27770:93:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27763:3:6"}]},{"nodeType":"YulAssignment","src":"27873:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"27880:3:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27873:3:6"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4_t_string_memory_ptr_t_bytes_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27446:3:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27452:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27460:6:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27471:3:6","type":""}],"src":"27192:697:6"},{"body":{"nodeType":"YulBlock","src":"27923:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27940:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27943:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27933:6:6"},"nodeType":"YulFunctionCall","src":"27933:88:6"},"nodeType":"YulExpressionStatement","src":"27933:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28037:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"28040:4:6","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28030:6:6"},"nodeType":"YulFunctionCall","src":"28030:15:6"},"nodeType":"YulExpressionStatement","src":"28030:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28061:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28064:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28054:6:6"},"nodeType":"YulFunctionCall","src":"28054:15:6"},"nodeType":"YulExpressionStatement","src":"28054:15:6"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"27895:180:6"},{"body":{"nodeType":"YulBlock","src":"28187:68:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28209:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"28217:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28205:3:6"},"nodeType":"YulFunctionCall","src":"28205:14:6"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"28221:26:6","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28198:6:6"},"nodeType":"YulFunctionCall","src":"28198:50:6"},"nodeType":"YulExpressionStatement","src":"28198:50:6"}]},"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28179:6:6","type":""}],"src":"28081:174:6"},{"body":{"nodeType":"YulBlock","src":"28407:220:6","statements":[{"nodeType":"YulAssignment","src":"28417:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28483:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"28488:2:6","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28424:58:6"},"nodeType":"YulFunctionCall","src":"28424:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28417:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28589:3:6"}],"functionName":{"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulIdentifier","src":"28500:88:6"},"nodeType":"YulFunctionCall","src":"28500:93:6"},"nodeType":"YulExpressionStatement","src":"28500:93:6"},{"nodeType":"YulAssignment","src":"28602:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28613:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"28618:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28609:3:6"},"nodeType":"YulFunctionCall","src":"28609:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28602:3:6"}]}]},"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28395:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28403:3:6","type":""}],"src":"28261:366:6"},{"body":{"nodeType":"YulBlock","src":"28804:248:6","statements":[{"nodeType":"YulAssignment","src":"28814:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28826:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"28837:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28822:3:6"},"nodeType":"YulFunctionCall","src":"28822:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28814:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28861:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"28872:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28857:3:6"},"nodeType":"YulFunctionCall","src":"28857:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28880:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"28886:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28876:3:6"},"nodeType":"YulFunctionCall","src":"28876:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28850:6:6"},"nodeType":"YulFunctionCall","src":"28850:47:6"},"nodeType":"YulExpressionStatement","src":"28850:47:6"},{"nodeType":"YulAssignment","src":"28906:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29040:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28914:124:6"},"nodeType":"YulFunctionCall","src":"28914:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28906:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28784:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28799:4:6","type":""}],"src":"28633:419:6"},{"body":{"nodeType":"YulBlock","src":"29164:75:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29186:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"29194:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29182:3:6"},"nodeType":"YulFunctionCall","src":"29182:14:6"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"29198:33:6","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29175:6:6"},"nodeType":"YulFunctionCall","src":"29175:57:6"},"nodeType":"YulExpressionStatement","src":"29175:57:6"}]},"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29156:6:6","type":""}],"src":"29058:181:6"},{"body":{"nodeType":"YulBlock","src":"29391:220:6","statements":[{"nodeType":"YulAssignment","src":"29401:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29467:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"29472:2:6","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29408:58:6"},"nodeType":"YulFunctionCall","src":"29408:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29401:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29573:3:6"}],"functionName":{"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulIdentifier","src":"29484:88:6"},"nodeType":"YulFunctionCall","src":"29484:93:6"},"nodeType":"YulExpressionStatement","src":"29484:93:6"},{"nodeType":"YulAssignment","src":"29586:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29597:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"29602:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29593:3:6"},"nodeType":"YulFunctionCall","src":"29593:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29586:3:6"}]}]},"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29379:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29387:3:6","type":""}],"src":"29245:366:6"},{"body":{"nodeType":"YulBlock","src":"29788:248:6","statements":[{"nodeType":"YulAssignment","src":"29798:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29810:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"29821:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29806:3:6"},"nodeType":"YulFunctionCall","src":"29806:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29798:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29845:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"29856:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29841:3:6"},"nodeType":"YulFunctionCall","src":"29841:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29864:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"29870:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29860:3:6"},"nodeType":"YulFunctionCall","src":"29860:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29834:6:6"},"nodeType":"YulFunctionCall","src":"29834:47:6"},"nodeType":"YulExpressionStatement","src":"29834:47:6"},{"nodeType":"YulAssignment","src":"29890:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30024:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29898:124:6"},"nodeType":"YulFunctionCall","src":"29898:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29890:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29768:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29783:4:6","type":""}],"src":"29617:419:6"},{"body":{"nodeType":"YulBlock","src":"30148:115:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30170:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"30178:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30166:3:6"},"nodeType":"YulFunctionCall","src":"30166:14:6"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"30182:34:6","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30159:6:6"},"nodeType":"YulFunctionCall","src":"30159:58:6"},"nodeType":"YulExpressionStatement","src":"30159:58:6"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30238:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"30246:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30234:3:6"},"nodeType":"YulFunctionCall","src":"30234:15:6"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"30251:4:6","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30227:6:6"},"nodeType":"YulFunctionCall","src":"30227:29:6"},"nodeType":"YulExpressionStatement","src":"30227:29:6"}]},"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30140:6:6","type":""}],"src":"30042:221:6"},{"body":{"nodeType":"YulBlock","src":"30415:220:6","statements":[{"nodeType":"YulAssignment","src":"30425:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30491:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"30496:2:6","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30432:58:6"},"nodeType":"YulFunctionCall","src":"30432:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30425:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30597:3:6"}],"functionName":{"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulIdentifier","src":"30508:88:6"},"nodeType":"YulFunctionCall","src":"30508:93:6"},"nodeType":"YulExpressionStatement","src":"30508:93:6"},{"nodeType":"YulAssignment","src":"30610:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30621:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"30626:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30617:3:6"},"nodeType":"YulFunctionCall","src":"30617:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30610:3:6"}]}]},"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30403:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30411:3:6","type":""}],"src":"30269:366:6"},{"body":{"nodeType":"YulBlock","src":"30812:248:6","statements":[{"nodeType":"YulAssignment","src":"30822:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30834:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"30845:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30830:3:6"},"nodeType":"YulFunctionCall","src":"30830:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30822:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30869:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"30880:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30865:3:6"},"nodeType":"YulFunctionCall","src":"30865:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30888:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"30894:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30884:3:6"},"nodeType":"YulFunctionCall","src":"30884:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30858:6:6"},"nodeType":"YulFunctionCall","src":"30858:47:6"},"nodeType":"YulExpressionStatement","src":"30858:47:6"},{"nodeType":"YulAssignment","src":"30914:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31048:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30922:124:6"},"nodeType":"YulFunctionCall","src":"30922:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30914:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30792:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30807:4:6","type":""}],"src":"30641:419:6"},{"body":{"nodeType":"YulBlock","src":"31114:362:6","statements":[{"nodeType":"YulAssignment","src":"31124:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"31147:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"31129:17:6"},"nodeType":"YulFunctionCall","src":"31129:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"31124:1:6"}]},{"nodeType":"YulAssignment","src":"31158:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"31181:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"31163:17:6"},"nodeType":"YulFunctionCall","src":"31163:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"31158:1:6"}]},{"nodeType":"YulVariableDeclaration","src":"31192:28:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"31215:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"31218:1:6"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"31211:3:6"},"nodeType":"YulFunctionCall","src":"31211:9:6"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"31196:11:6","type":""}]},{"nodeType":"YulAssignment","src":"31229:41:6","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"31258:11:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"31240:17:6"},"nodeType":"YulFunctionCall","src":"31240:30:6"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"31229:7:6"}]},{"body":{"nodeType":"YulBlock","src":"31447:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"31449:16:6"},"nodeType":"YulFunctionCall","src":"31449:18:6"},"nodeType":"YulExpressionStatement","src":"31449:18:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"31380:1:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"31373:6:6"},"nodeType":"YulFunctionCall","src":"31373:9:6"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"31403:1:6"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"31410:7:6"},{"name":"x","nodeType":"YulIdentifier","src":"31419:1:6"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"31406:3:6"},"nodeType":"YulFunctionCall","src":"31406:15:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"31400:2:6"},"nodeType":"YulFunctionCall","src":"31400:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"31353:2:6"},"nodeType":"YulFunctionCall","src":"31353:83:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"31333:6:6"},"nodeType":"YulFunctionCall","src":"31333:113:6"},"nodeType":"YulIf","src":"31330:139:6"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"31097:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"31100:1:6","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"31106:7:6","type":""}],"src":"31066:410:6"},{"body":{"nodeType":"YulBlock","src":"31526:147:6","statements":[{"nodeType":"YulAssignment","src":"31536:25:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"31559:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"31541:17:6"},"nodeType":"YulFunctionCall","src":"31541:20:6"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"31536:1:6"}]},{"nodeType":"YulAssignment","src":"31570:25:6","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"31593:1:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"31575:17:6"},"nodeType":"YulFunctionCall","src":"31575:20:6"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"31570:1:6"}]},{"nodeType":"YulAssignment","src":"31604:16:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"31615:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"31618:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31611:3:6"},"nodeType":"YulFunctionCall","src":"31611:9:6"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"31604:3:6"}]},{"body":{"nodeType":"YulBlock","src":"31644:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"31646:16:6"},"nodeType":"YulFunctionCall","src":"31646:18:6"},"nodeType":"YulExpressionStatement","src":"31646:18:6"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"31636:1:6"},{"name":"sum","nodeType":"YulIdentifier","src":"31639:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"31633:2:6"},"nodeType":"YulFunctionCall","src":"31633:10:6"},"nodeType":"YulIf","src":"31630:36:6"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"31513:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"31516:1:6","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"31522:3:6","type":""}],"src":"31482:191:6"},{"body":{"nodeType":"YulBlock","src":"31722:128:6","statements":[{"nodeType":"YulAssignment","src":"31732:33:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31759:5:6"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"31741:17:6"},"nodeType":"YulFunctionCall","src":"31741:24:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"31732:5:6"}]},{"body":{"nodeType":"YulBlock","src":"31793:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"31795:16:6"},"nodeType":"YulFunctionCall","src":"31795:18:6"},"nodeType":"YulExpressionStatement","src":"31795:18:6"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31780:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"31787:4:6","type":"","value":"0x00"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"31777:2:6"},"nodeType":"YulFunctionCall","src":"31777:15:6"},"nodeType":"YulIf","src":"31774:41:6"},{"nodeType":"YulAssignment","src":"31824:20:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31835:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"31842:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31831:3:6"},"nodeType":"YulFunctionCall","src":"31831:13:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"31824:3:6"}]}]},"name":"decrement_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31708:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"31718:3:6","type":""}],"src":"31679:171:6"},{"body":{"nodeType":"YulBlock","src":"31962:76:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31984:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"31992:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31980:3:6"},"nodeType":"YulFunctionCall","src":"31980:14:6"},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","kind":"string","nodeType":"YulLiteral","src":"31996:34:6","type":"","value":"Strings: hex length insufficient"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31973:6:6"},"nodeType":"YulFunctionCall","src":"31973:58:6"},"nodeType":"YulExpressionStatement","src":"31973:58:6"}]},"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31954:6:6","type":""}],"src":"31856:182:6"},{"body":{"nodeType":"YulBlock","src":"32190:220:6","statements":[{"nodeType":"YulAssignment","src":"32200:74:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32266:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"32271:2:6","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32207:58:6"},"nodeType":"YulFunctionCall","src":"32207:67:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32200:3:6"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32372:3:6"}],"functionName":{"name":"store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","nodeType":"YulIdentifier","src":"32283:88:6"},"nodeType":"YulFunctionCall","src":"32283:93:6"},"nodeType":"YulExpressionStatement","src":"32283:93:6"},{"nodeType":"YulAssignment","src":"32385:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32396:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"32401:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32392:3:6"},"nodeType":"YulFunctionCall","src":"32392:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32385:3:6"}]}]},"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32178:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32186:3:6","type":""}],"src":"32044:366:6"},{"body":{"nodeType":"YulBlock","src":"32587:248:6","statements":[{"nodeType":"YulAssignment","src":"32597:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32609:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"32620:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32605:3:6"},"nodeType":"YulFunctionCall","src":"32605:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32597:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32644:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"32655:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32640:3:6"},"nodeType":"YulFunctionCall","src":"32640:17:6"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32663:4:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"32669:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32659:3:6"},"nodeType":"YulFunctionCall","src":"32659:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32633:6:6"},"nodeType":"YulFunctionCall","src":"32633:47:6"},"nodeType":"YulExpressionStatement","src":"32633:47:6"},{"nodeType":"YulAssignment","src":"32689:139:6","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32823:4:6"}],"functionName":{"name":"abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32697:124:6"},"nodeType":"YulFunctionCall","src":"32697:131:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32689:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32567:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32582:4:6","type":""}],"src":"32416:419:6"},{"body":{"nodeType":"YulBlock","src":"32886:32:6","statements":[{"nodeType":"YulAssignment","src":"32896:16:6","value":{"name":"value","nodeType":"YulIdentifier","src":"32907:5:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"32896:7:6"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32868:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"32878:7:6","type":""}],"src":"32841:77:6"},{"body":{"nodeType":"YulBlock","src":"32989:53:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33006:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33029:5:6"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"33011:17:6"},"nodeType":"YulFunctionCall","src":"33011:24:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32999:6:6"},"nodeType":"YulFunctionCall","src":"32999:37:6"},"nodeType":"YulExpressionStatement","src":"32999:37:6"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32977:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"32984:3:6","type":""}],"src":"32924:118:6"},{"body":{"nodeType":"YulBlock","src":"33091:43:6","statements":[{"nodeType":"YulAssignment","src":"33101:27:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33116:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"33123:4:6","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"33112:3:6"},"nodeType":"YulFunctionCall","src":"33112:16:6"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"33101:7:6"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33073:5:6","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"33083:7:6","type":""}],"src":"33048:86:6"},{"body":{"nodeType":"YulBlock","src":"33201:51:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33218:3:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33239:5:6"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"33223:15:6"},"nodeType":"YulFunctionCall","src":"33223:22:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33211:6:6"},"nodeType":"YulFunctionCall","src":"33211:35:6"},"nodeType":"YulExpressionStatement","src":"33211:35:6"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33189:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"33196:3:6","type":""}],"src":"33140:112:6"},{"body":{"nodeType":"YulBlock","src":"33436:367:6","statements":[{"nodeType":"YulAssignment","src":"33446:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33458:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"33469:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33454:3:6"},"nodeType":"YulFunctionCall","src":"33454:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33446:4:6"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"33527:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33540:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"33551:1:6","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33536:3:6"},"nodeType":"YulFunctionCall","src":"33536:17:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"33483:43:6"},"nodeType":"YulFunctionCall","src":"33483:71:6"},"nodeType":"YulExpressionStatement","src":"33483:71:6"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"33604:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33617:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"33628:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33613:3:6"},"nodeType":"YulFunctionCall","src":"33613:18:6"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"33564:39:6"},"nodeType":"YulFunctionCall","src":"33564:68:6"},"nodeType":"YulExpressionStatement","src":"33564:68:6"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"33686:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33699:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"33710:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33695:3:6"},"nodeType":"YulFunctionCall","src":"33695:18:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"33642:43:6"},"nodeType":"YulFunctionCall","src":"33642:72:6"},"nodeType":"YulExpressionStatement","src":"33642:72:6"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"33768:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33781:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"33792:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33777:3:6"},"nodeType":"YulFunctionCall","src":"33777:18:6"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"33724:43:6"},"nodeType":"YulFunctionCall","src":"33724:72:6"},"nodeType":"YulExpressionStatement","src":"33724:72:6"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33384:9:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"33396:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"33404:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"33412:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"33420:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33431:4:6","type":""}],"src":"33258:545:6"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() {\n        revert(0, 0)\n    }\n\n    // struct TokenAuthenticated.TokenRequest\n    function abi_decode_t_struct$_TokenRequest_$1417_calldata_ptr(offset, end) -> value {\n        if slt(sub(end, offset), 96) { revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() }\n        value := offset\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_struct$_TokenRequest_$1417_calldata_ptrt_bytes_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_TokenRequest_$1417_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1, value2 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    // struct TokenAuthenticated.TokenRequest -> struct TokenAuthenticated.TokenRequest\n    function abi_encode_t_struct$_TokenRequest_$1417_memory_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x60)\n\n        {\n            // owner\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // device\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // issuedAt\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x40))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__to_t_struct$_TokenRequest_$1417_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_struct$_TokenRequest_$1417_memory_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775(memPtr) {\n\n        mstore(add(memPtr, 0), \"Safe already exists for owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2b169aa240367a5e3346a41789403357443f05db737a1f62bf4f351d642c4775_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_length_t_array$_t_address_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_address_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encodeUpdatedPos_t_address_to_t_address(value0, pos) -> updatedPos {\n        abi_encode_t_address_to_t_address(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_address_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // address[] -> address[]\n    function abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_address_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_address_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_address_to_t_address(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_address_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_address_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint256_t_address__to_t_array$_t_address_$dyn_memory_ptr_t_uint256_t_address_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint256_t_address__fromStack_reversed(headStart , value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 288)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_address_to_t_address_fromStack(value5,  add(headStart, 160))\n\n        abi_encode_t_address_to_t_address_fromStack(value6,  add(headStart, 192))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value7,  add(headStart, 224))\n\n        abi_encode_t_address_to_t_address_fromStack(value8,  add(headStart, 256))\n\n    }\n\n    function abi_encode_tuple_t_address_t_bytes_memory_ptr_t_uint256__to_t_address_t_bytes_memory_ptr_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value1,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function calldata_access_t_address(baseRef, ptr) -> value {\n        value := abi_decode_t_address(ptr, add(ptr, 32))\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function calldata_access_t_uint256(baseRef, ptr) -> value {\n        value := abi_decode_t_uint256(ptr, add(ptr, 32))\n    }\n\n    // struct TokenAuthenticated.TokenRequest -> struct TokenAuthenticated.TokenRequest\n    function abi_encode_t_struct$_TokenRequest_$1417_calldata_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x60)\n\n        {\n            // owner\n\n            let memberValue0 := calldata_access_t_address(value, add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // device\n\n            let memberValue0 := calldata_access_t_address(value, add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // issuedAt\n\n            let memberValue0 := calldata_access_t_uint256(value, add(value, 0x40))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x40))\n        }\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_struct$_TokenRequest_$1417_calldata_ptr_t_bytes_calldata_ptr__to_t_address_t_struct$_TokenRequest_$1417_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_struct$_TokenRequest_$1417_calldata_ptr_to_t_struct$_TokenRequest_$1417_memory_ptr_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 128), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value2, value3,  tail)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a179e1a73f41ef8e1ba2f259a99bc53b6ace3abb110ac2ea058e42c6104e1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5(memPtr) {\n\n        mstore(add(memPtr, 0), \"Request is too old\")\n\n    }\n\n    function abi_encode_t_stringliteral_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)\n        store_literal_in_memory_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f1b16351444dae87191b0b069f1984bfe6d4e64f9f3ec80c67f746bf869d86e5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    // string -> string\n    function abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> ret {\n        let slotValue := sload(value)\n        let length := extract_byte_array_length(slotValue)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        switch and(slotValue, 1)\n        case 0 {\n            // short byte array\n            mstore(pos, and(slotValue, not(0xff)))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            // long byte array\n            let dataPos := array_dataslot_t_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, 0x20) } {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, 1)\n            }\n            ret := add(pos, length)\n        }\n    }\n\n    function store_literal_in_memory_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262(memPtr) {\n\n        mstore(add(memPtr, 0), 0x0a0a4d653a200000000000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 6)\n        store_literal_in_memory_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262(pos)\n        end := add(pos, 6)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60(memPtr) {\n\n        mstore(add(memPtr, 0), 0x0a4465766963653a200000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 9)\n        store_literal_in_memory_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60(pos)\n        end := add(pos, 9)\n    }\n\n    function store_literal_in_memory_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb(memPtr) {\n\n        mstore(add(memPtr, 0), 0x0a4973737565642061743a200000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 12)\n        store_literal_in_memory_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb(pos)\n        end := add(pos, 12)\n    }\n\n    function abi_encode_tuple_packed_t_string_storage_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_t_string_memory_ptr_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_t_string_memory_ptr_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value3, value2, value1, value0) -> end {\n\n        pos := abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_b70d4a09f0316675b470d275a74e24abd64b6d4eb5e347d7852826ebdc68e262_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        pos := abi_encode_t_stringliteral_b571ed85e6ea272f4e1c551cc4cf3165a70bfeb79bd860502e1cbc170370bf60_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)\n\n        pos := abi_encode_t_stringliteral_8be36b85de62e8188eb8bd688e4dfa86dcbf70f7cf4ad06783756a54a67827fb_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value3,  pos)\n\n        end := pos\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct TokenAuthenticated.TokenRequest\n    function abi_decode_t_struct$_TokenRequest_$1417_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x60) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x60)\n\n        {\n            // owner\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n        {\n            // device\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n        {\n            // issuedAt\n\n            let offset := 64\n\n            mstore(add(value, 0x40), abi_decode_t_uint256(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_TokenRequest_$1417_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_TokenRequest_$1417_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4(memPtr) {\n\n        mstore(add(memPtr, 0), 0x19457468657265756d205369676e6564204d6573736167653a0a000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 26)\n        store_literal_in_memory_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4(pos)\n        end := add(pos, 26)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4_t_string_memory_ptr_t_bytes_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature length\")\n\n    }\n\n    function abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature 's' val\")\n\n        mstore(add(memPtr, 32), \"ue\")\n\n    }\n\n    function abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n}\n","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1613":[{"length":32,"start":1337}],"1615":[{"length":32,"start":1277}],"1617":[{"length":32,"start":1085}],"1619":[{"length":32,"start":921}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x85E1F4D0 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x85E1F4D0 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xB6AD16A8 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0xBEBC479C EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0xCB2E6043 EQ PUSH2 0x16B JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x6634E88 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x5E619A4A EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x7A1238A9 EQ PUSH2 0xE2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH2 0x189 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC7 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH2 0x1BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD9 SWAP2 SWAP1 PUSH2 0x1373 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0x1417 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x106 PUSH2 0x79E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x113 SWAP2 SWAP1 PUSH2 0x151B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x136 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x131 SWAP2 SWAP1 PUSH2 0x153D JUMP JUMPDEST PUSH2 0x82C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x144 SWAP3 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x155 PUSH2 0x8A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x162 SWAP2 SWAP1 PUSH2 0x151B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x173 PUSH2 0x92E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x180 SWAP2 SWAP1 PUSH2 0x1626 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 DUP7 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C6 SWAP1 PUSH2 0x168D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2DA DUP5 DUP5 DUP5 PUSH2 0x934 JUMP JUMPDEST PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x300 JUMPI PUSH2 0x2FF PUSH2 0x16AD JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP5 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x344 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x358 JUMPI PUSH2 0x357 PUSH2 0x16DC JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0xBA0BBA4000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH32 0x0 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x47A SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x180F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0xB63E800D00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1688F0B9 PUSH32 0x0 DUP5 CHAINID PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x578 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x18AA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x597 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5BB SWAP2 SWAP1 PUSH2 0x18FD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5E8 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x675 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x724E59C3 DUP3 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x642 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A1A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x670 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP10 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x68D SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP7 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x718 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH2 0x7AB SWAP1 PUSH2 0x1A89 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x7D7 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x824 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7F9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x824 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x807 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH2 0x834 PUSH2 0x1278 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 NUMBER PUSH2 0x886 SWAP2 SWAP1 PUSH2 0x1AE9 JUMP JUMPDEST DUP2 MSTORE POP SWAP2 POP DUP2 PUSH2 0x895 DUP4 PUSH2 0xA75 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x8AD SWAP1 PUSH2 0x1A89 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8D9 SWAP1 PUSH2 0x1A89 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x926 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x926 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x909 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x940 DUP6 PUSH2 0xAC9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x992 DUP3 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP PUSH2 0xAF3 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9A7 SWAP2 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA14 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA0B SWAP1 PUSH2 0x1B69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD NUMBER PUSH2 0xA22 SWAP2 SWAP1 PUSH2 0x1AE9 JUMP JUMPDEST DUP7 PUSH1 0x40 ADD CALLDATALOAD LT ISZERO PUSH2 0xA68 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA5F SWAP1 PUSH2 0x1BD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA86 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0xB1A JUMP JUMPDEST PUSH2 0xA93 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0xB1A JUMP JUMPDEST PUSH2 0xAA0 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0xB47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xAB3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1DAD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAEC PUSH2 0xAE7 DUP4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xAE2 SWAP2 SWAP1 PUSH2 0x1EC1 JUMP JUMPDEST PUSH2 0xA75 JUMP JUMPDEST PUSH2 0xC15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB02 DUP6 DUP6 PUSH2 0xC50 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xB0F DUP2 PUSH2 0xCA1 JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB40 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x14 PUSH1 0xFF AND PUSH2 0xE07 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0xB56 DUP5 PUSH2 0x1043 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB75 JUMPI PUSH2 0xB74 PUSH2 0x16AD JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBA7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0xC0A JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0xBFE JUMPI PUSH2 0xBFD PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0xBB5 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC21 DUP3 MLOAD PUSH2 0xB47 JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC33 SWAP3 SWAP2 SWAP1 PUSH2 0x1FA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x41 DUP4 MLOAD SUB PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x20 DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP PUSH1 0x60 DUP7 ADD MLOAD PUSH1 0x0 BYTE SWAP1 POP PUSH2 0xC85 DUP8 DUP3 DUP6 DUP6 PUSH2 0x1196 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xC9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCB5 JUMPI PUSH2 0xCB4 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCC8 JUMPI PUSH2 0xCC7 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0xE04 JUMPI PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCE2 JUMPI PUSH2 0xCE1 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCF5 JUMPI PUSH2 0xCF4 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xD35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD2C SWAP1 PUSH2 0x204F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xD49 JUMPI PUSH2 0xD48 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xD5C JUMPI PUSH2 0xD5B PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xD9C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD93 SWAP1 PUSH2 0x20BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xDB0 JUMPI PUSH2 0xDAF PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xDC3 JUMPI PUSH2 0xDC2 PUSH2 0x1FD4 JUMP JUMPDEST JUMPDEST SUB PUSH2 0xE03 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDFA SWAP1 PUSH2 0x214D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x2 DUP4 PUSH1 0x2 PUSH2 0xE1A SWAP2 SWAP1 PUSH2 0x216D JUMP JUMPDEST PUSH2 0xE24 SWAP2 SWAP1 PUSH2 0x21AF JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE3D JUMPI PUSH2 0xE3C PUSH2 0x16AD JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE6F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH32 0x3000000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xEA7 JUMPI PUSH2 0xEA6 PUSH2 0x16DC JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH32 0x7800000000000000000000000000000000000000000000000000000000000000 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xF0B JUMPI PUSH2 0xF0A PUSH2 0x16DC JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH1 0x1 DUP5 PUSH1 0x2 PUSH2 0xF4B SWAP2 SWAP1 PUSH2 0x216D JUMP JUMPDEST PUSH2 0xF55 SWAP2 SWAP1 PUSH2 0x21AF JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xFF5 JUMPI PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xF DUP7 AND PUSH1 0x10 DUP2 LT PUSH2 0xF97 JUMPI PUSH2 0xF96 PUSH2 0x16DC JUMP JUMPDEST JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFAE JUMPI PUSH2 0xFAD PUSH2 0x16DC JUMP JUMPDEST JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 DUP6 SWAP1 SHR SWAP5 POP DUP1 PUSH2 0xFEE SWAP1 PUSH2 0x21E3 JUMP JUMPDEST SWAP1 POP PUSH2 0xF58 JUMP JUMPDEST POP PUSH1 0x0 DUP5 EQ PUSH2 0x1039 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1030 SWAP1 PUSH2 0x2258 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x10A1 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1097 JUMPI PUSH2 0x1096 PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x10DE JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x10D4 JUMPI PUSH2 0x10D3 PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x110D JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1103 JUMPI PUSH2 0x1102 PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1136 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x115B JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1151 JUMPI PUSH2 0x1150 PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x117E JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1174 JUMPI PUSH2 0x1173 PUSH2 0x1EEE JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x118D JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x11D1 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x126F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x11F6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x22AD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1218 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1266 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x126F JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1304 DUP3 PUSH2 0x12D9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1314 DUP2 PUSH2 0x12F9 JUMP JUMPDEST DUP2 EQ PUSH2 0x131F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1331 DUP2 PUSH2 0x130B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x134D JUMPI PUSH2 0x134C PUSH2 0x12CF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x135B DUP5 DUP3 DUP6 ADD PUSH2 0x1322 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x136D DUP2 PUSH2 0x12F9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1388 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1364 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13A9 JUMPI PUSH2 0x13A8 PUSH2 0x138E JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x13D7 JUMPI PUSH2 0x13D6 PUSH2 0x13B2 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13F4 JUMPI PUSH2 0x13F3 PUSH2 0x13B7 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x1410 JUMPI PUSH2 0x140F PUSH2 0x13BC JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1431 JUMPI PUSH2 0x1430 PUSH2 0x12CF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x143F DUP8 DUP3 DUP9 ADD PUSH2 0x1393 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1460 JUMPI PUSH2 0x145F PUSH2 0x12D4 JUMP JUMPDEST JUMPDEST PUSH2 0x146C DUP8 DUP3 DUP9 ADD PUSH2 0x13C1 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP PUSH1 0x80 PUSH2 0x147F DUP8 DUP3 DUP9 ADD PUSH2 0x1322 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14C5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x14AA JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14ED DUP3 PUSH2 0x148B JUMP JUMPDEST PUSH2 0x14F7 DUP2 DUP6 PUSH2 0x1496 JUMP JUMPDEST SWAP4 POP PUSH2 0x1507 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14A7 JUMP JUMPDEST PUSH2 0x1510 DUP2 PUSH2 0x14D1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1535 DUP2 DUP5 PUSH2 0x14E2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1554 JUMPI PUSH2 0x1553 PUSH2 0x12CF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1562 DUP6 DUP3 DUP7 ADD PUSH2 0x1322 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1573 DUP6 DUP3 DUP7 ADD PUSH2 0x1322 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1586 DUP2 PUSH2 0x12F9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x159F DUP2 PUSH2 0x158C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x15BB PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x157D JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x15CE PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x157D JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x15E1 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1596 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x15FC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x15A5 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x160E DUP2 DUP5 PUSH2 0x14E2 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1620 DUP2 PUSH2 0x158C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x163B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1617 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666520616C72656164792065786973747320666F72206F776E6572000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1677 PUSH1 0x1D DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x1682 DUP3 PUSH2 0x1641 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16A6 DUP2 PUSH2 0x166A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1743 DUP4 DUP4 PUSH2 0x157D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1767 DUP3 PUSH2 0x170B JUMP JUMPDEST PUSH2 0x1771 DUP2 DUP6 PUSH2 0x1716 JUMP JUMPDEST SWAP4 POP PUSH2 0x177C DUP4 PUSH2 0x1727 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17AD JUMPI DUP2 MLOAD PUSH2 0x1794 DUP9 DUP3 PUSH2 0x1737 JUMP JUMPDEST SWAP8 POP PUSH2 0x179F DUP4 PUSH2 0x174F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1780 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E1 DUP3 PUSH2 0x17BA JUMP JUMPDEST PUSH2 0x17EB DUP2 DUP6 PUSH2 0x17C5 JUMP JUMPDEST SWAP4 POP PUSH2 0x17FB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14A7 JUMP JUMPDEST PUSH2 0x1804 DUP2 PUSH2 0x14D1 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x182A DUP2 DUP13 PUSH2 0x175C JUMP JUMPDEST SWAP1 POP PUSH2 0x1839 PUSH1 0x20 DUP4 ADD DUP12 PUSH2 0x1617 JUMP JUMPDEST PUSH2 0x1846 PUSH1 0x40 DUP4 ADD DUP11 PUSH2 0x1364 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1858 DUP2 DUP10 PUSH2 0x17D6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1867 PUSH1 0x80 DUP4 ADD DUP9 PUSH2 0x1364 JUMP JUMPDEST PUSH2 0x1874 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x1364 JUMP JUMPDEST PUSH2 0x1881 PUSH1 0xC0 DUP4 ADD DUP7 PUSH2 0x1364 JUMP JUMPDEST PUSH2 0x188E PUSH1 0xE0 DUP4 ADD DUP6 PUSH2 0x1617 JUMP JUMPDEST PUSH2 0x189C PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x1364 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x18BF PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1364 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x18D1 DUP2 DUP6 PUSH2 0x17D6 JUMP JUMPDEST SWAP1 POP PUSH2 0x18E0 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1617 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x18F7 DUP2 PUSH2 0x130B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1913 JUMPI PUSH2 0x1912 PUSH2 0x12CF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1921 DUP5 DUP3 DUP6 ADD PUSH2 0x18E8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1939 PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1322 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x194A DUP2 PUSH2 0x158C JUMP JUMPDEST DUP2 EQ PUSH2 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1967 DUP2 PUSH2 0x1941 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197C PUSH1 0x20 DUP5 ADD DUP5 PUSH2 0x1958 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 ADD PUSH2 0x1995 PUSH1 0x0 DUP4 ADD DUP4 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x19A2 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x157D JUMP JUMPDEST POP PUSH2 0x19B0 PUSH1 0x20 DUP4 ADD DUP4 PUSH2 0x192A JUMP JUMPDEST PUSH2 0x19BD PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x157D JUMP JUMPDEST POP PUSH2 0x19CB PUSH1 0x40 DUP4 ADD DUP4 PUSH2 0x196D JUMP JUMPDEST PUSH2 0x19D8 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1596 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19F9 DUP4 DUP6 PUSH2 0x17C5 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A06 DUP4 DUP6 DUP5 PUSH2 0x19DE JUMP JUMPDEST PUSH2 0x1A0F DUP4 PUSH2 0x14D1 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x1A2F PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1364 JUMP JUMPDEST PUSH2 0x1A3C PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1984 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x1A4F DUP2 DUP5 DUP7 PUSH2 0x19ED JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1AA1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1AB4 JUMPI PUSH2 0x1AB3 PUSH2 0x1A5A JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1AF4 DUP3 PUSH2 0x158C JUMP JUMPDEST SWAP2 POP PUSH2 0x1AFF DUP4 PUSH2 0x158C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x1B17 JUMPI PUSH2 0x1B16 PUSH2 0x1ABA JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x696E76616C6964207369676E6174757265000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B53 PUSH1 0x11 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B5E DUP3 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B82 DUP2 PUSH2 0x1B46 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265717565737420697320746F6F206F6C640000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BBF PUSH1 0x12 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BCA DUP3 PUSH2 0x1B89 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BEE DUP2 PUSH2 0x1BB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x1C22 DUP2 PUSH2 0x1A89 JUMP JUMPDEST PUSH2 0x1C2C DUP2 DUP7 PUSH2 0x1BF5 JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0x1C47 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1C5C JUMPI PUSH2 0x1C8F JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 ISZERO ISZERO DUP3 MUL DUP7 ADD SWAP4 POP PUSH2 0x1C8F JUMP JUMPDEST PUSH2 0x1C65 DUP6 PUSH2 0x1C00 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C87 JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1C68 JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xA0A4D653A200000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CCE PUSH1 0x6 DUP4 PUSH2 0x1BF5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CD9 DUP3 PUSH2 0x1C98 JUMP JUMPDEST PUSH1 0x6 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CEF DUP3 PUSH2 0x148B JUMP JUMPDEST PUSH2 0x1CF9 DUP2 DUP6 PUSH2 0x1BF5 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D09 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14A7 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xA4465766963653A200000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D4B PUSH1 0x9 DUP4 PUSH2 0x1BF5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D56 DUP3 PUSH2 0x1D15 JUMP JUMPDEST PUSH1 0x9 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0xA4973737565642061743A200000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D97 PUSH1 0xC DUP4 PUSH2 0x1BF5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DA2 DUP3 PUSH2 0x1D61 JUMP JUMPDEST PUSH1 0xC DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DB9 DUP3 DUP8 PUSH2 0x1C15 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DC4 DUP3 PUSH2 0x1CC1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DD0 DUP3 DUP7 PUSH2 0x1CE4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DDB DUP3 PUSH2 0x1D3E JUMP JUMPDEST SWAP2 POP PUSH2 0x1DE7 DUP3 DUP6 PUSH2 0x1CE4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DF2 DUP3 PUSH2 0x1D8A JUMP JUMPDEST SWAP2 POP PUSH2 0x1DFE DUP3 DUP5 PUSH2 0x1CE4 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E1A DUP3 PUSH2 0x14D1 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1E39 JUMPI PUSH2 0x1E38 PUSH2 0x16AD JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E4C PUSH2 0x12C5 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E58 DUP3 DUP3 PUSH2 0x1E11 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E73 JUMPI PUSH2 0x1E72 PUSH2 0x1E0C JUMP JUMPDEST JUMPDEST PUSH2 0x1E7D PUSH1 0x60 PUSH2 0x1E42 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1E8D DUP5 DUP3 DUP6 ADD PUSH2 0x1322 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x1EA1 DUP5 DUP3 DUP6 ADD PUSH2 0x1322 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1EB5 DUP5 DUP3 DUP6 ADD PUSH2 0x1958 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1ED7 JUMPI PUSH2 0x1ED6 PUSH2 0x12CF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1EE5 DUP5 DUP3 DUP6 ADD PUSH2 0x1E5D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F53 PUSH1 0x1A DUP4 PUSH2 0x1BF5 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F5E DUP3 PUSH2 0x1F1D JUMP JUMPDEST PUSH1 0x1A DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F7F DUP3 PUSH2 0x17BA JUMP JUMPDEST PUSH2 0x1F89 DUP2 DUP6 PUSH2 0x1F69 JUMP JUMPDEST SWAP4 POP PUSH2 0x1F99 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14A7 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FB0 DUP3 PUSH2 0x1F46 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FBC DUP3 DUP6 PUSH2 0x1CE4 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FC8 DUP3 DUP5 PUSH2 0x1F74 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2039 PUSH1 0x18 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x2044 DUP3 PUSH2 0x2003 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2068 DUP2 PUSH2 0x202C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20A5 PUSH1 0x1F DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x20B0 DUP3 PUSH2 0x206F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20D4 DUP2 PUSH2 0x2098 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2137 PUSH1 0x22 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x2142 DUP3 PUSH2 0x20DB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2166 DUP2 PUSH2 0x212A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2178 DUP3 PUSH2 0x158C JUMP JUMPDEST SWAP2 POP PUSH2 0x2183 DUP4 PUSH2 0x158C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x2191 DUP2 PUSH2 0x158C JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x21A8 JUMPI PUSH2 0x21A7 PUSH2 0x1ABA JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21BA DUP3 PUSH2 0x158C JUMP JUMPDEST SWAP2 POP PUSH2 0x21C5 DUP4 PUSH2 0x158C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x21DD JUMPI PUSH2 0x21DC PUSH2 0x1ABA JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21EE DUP3 PUSH2 0x158C JUMP JUMPDEST SWAP2 POP PUSH1 0x0 DUP3 SUB PUSH2 0x2201 JUMPI PUSH2 0x2200 PUSH2 0x1ABA JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2242 PUSH1 0x20 DUP4 PUSH2 0x1496 JUMP JUMPDEST SWAP2 POP PUSH2 0x224D DUP3 PUSH2 0x220C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2271 DUP2 PUSH2 0x2235 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x228B DUP2 PUSH2 0x2278 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22A7 DUP2 PUSH2 0x2291 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x22C2 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x22CF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x229E JUMP JUMPDEST PUSH2 0x22DC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2282 JUMP JUMPDEST PUSH2 0x22E9 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2282 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ SELFDESTRUCT PUSH32 0xC7BB4927C15B323F54F21D470143961EA2B73514B392D7E3BC911142B264736F PUSH13 0x63430008130033000000000000 ","sourceMap":"847:4082:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1301:46;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1249;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2798:2129;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;899:22;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1287:340:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;346:23;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;376:33;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1301:46:4;;;;;;;;;;;;;;;;;;;;;;:::o;1249:::-;;;;;;;;;;;;;;;;;;;;;;:::o;2798:2129::-;3008:1;2970:40;;:11;:26;2982:7;:13;;;;;;;;;;:::i;:::-;2970:26;;;;;;;;;;;;;;;;;;;;;;;;;:40;;;2949:116;;;;;;;;;;;;:::i;:::-;;;;;;;;;3083:32;3096:7;3105:9;;3083:12;:32::i;:::-;3075:41;;;;;;3592:23;3632:1;3618:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3592:42;;3656:7;:13;;;;;;;;;;:::i;:::-;3644:6;3651:1;3644:9;;;;;;;;:::i;:::-;;;;;;;:25;;;;;;;;;;;3680:24;3830:6;3902:1;3980:13;4031:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4100:22;4180:1;4237;4294;4349;3707:694;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3680:721;;4412:17;4446:23;4432:72;;;4522:19;4559:11;4588:13;4432:183;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4412:203;;4656:1;4630:28;;:7;:14;;;;;;;;;;:::i;:::-;:28;;;4626:198;;4693:17;4674:46;;;4738:9;4765:7;4790:9;;4674:139;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4626:198;4863:9;4834:11;:26;4846:7;:13;;;;;;;;;;:::i;:::-;4834:26;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;4907:7;:13;;;;;;;;;;:::i;:::-;4882:11;:22;4894:9;4882:22;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;2939:1988;;;2798:2129;;;;:::o;899:22::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1287:340:3:-;1389:27;;:::i;:::-;1418:13;1453:118;;;;;;;;1487:5;1453:118;;;;;;1514:6;1453:118;;;;;;1559:1;1544:12;:16;;;;:::i;:::-;1453:118;;;1443:128;;1589:7;1598:21;1611:7;1598:12;:21::i;:::-;1581:39;;;;1287:340;;;;;:::o;346:23::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;376:33::-;;;;:::o;828:453::-;952:4;968:15;986:21;999:7;986:12;:21::i;:::-;968:39;;1017:14;1034:33;1048:7;1057:9;;1034:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:13;:33::i;:::-;1017:50;;1095:7;:13;;;;;;;;;;:::i;:::-;1085:23;;:6;:23;;;1077:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;1196:13;;1181:12;:28;;;;:::i;:::-;1161:7;:16;;;:48;;1140:113;;;;;;;;;;;;:::i;:::-;;;;;;;;;1270:4;1263:11;;;;828:453;;;;;:::o;1852:408::-;1940:13;2009:9;2056:34;2076:7;:13;;;2056:19;:34::i;:::-;2130:35;2150:7;:14;;;2130:19;:35::i;:::-;2208:34;2225:7;:16;;;2208;:34::i;:::-;1979:273;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1965:288;;1852:408;;;:::o;2266:181::-;2356:7;2382:58;2417:21;2430:7;2417:21;;;;;;;;;;:::i;:::-;:12;:21::i;:::-;2382:28;:58::i;:::-;2375:65;;2266:181;;;:::o;3661:227:1:-;3739:7;3759:17;3778:18;3800:27;3811:4;3817:9;3800:10;:27::i;:::-;3758:69;;;;3837:18;3849:5;3837:11;:18::i;:::-;3872:9;3865:16;;;;3661:227;;;;:::o;2102:149:0:-;2160:13;2192:52;2220:4;2204:22;;311:2;2192:52;;:11;:52::i;:::-;2185:59;;2102:149;;;:::o;415:696::-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;788:280;1032:21;788:280;1088:6;1081:13;;;;;415:696;;;:::o;7806:196:1:-;7877:7;7964:26;7981:1;:8;7964:16;:26::i;:::-;7992:1;7913:81;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7903:92;;;;;;7896:99;;7806:196;;;:::o;2145:730::-;2226:7;2235:12;2283:2;2263:9;:16;:22;2259:610;;2301:9;2324;2347:7;2599:4;2588:9;2584:20;2578:27;2573:32;;2648:4;2637:9;2633:20;2627:27;2622:32;;2705:4;2694:9;2690:20;2684:27;2681:1;2676:36;2671:41;;2746:25;2757:4;2763:1;2766;2769;2746:10;:25::i;:::-;2739:32;;;;;;;;;2259:610;2818:1;2822:35;2802:56;;;;2145:730;;;;;;:::o;570:511::-;647:20;638:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;634:441;683:7;634:441;743:29;734:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;730:345;;788:34;;;;;;;;;;:::i;:::-;;;;;;;;730:345;852:35;843:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;839:236;;903:41;;;;;;;;;;:::i;:::-;;;;;;;;839:236;974:30;965:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;961:114;;1020:44;;;;;;;;;;:::i;:::-;;;;;;;;961:114;570:511;;:::o;1513:437:0:-;1588:13;1613:19;1658:1;1649:6;1645:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1635:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1613:47;;1670:15;:6;1677:1;1670:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1695;:6;1702:1;1695:9;;;;;;;;:::i;:::-;;;;;:15;;;;;;;;;;;1725:9;1750:1;1741:6;1737:1;:10;;;;:::i;:::-;:14;;;;:::i;:::-;1725:26;;1720:128;1757:1;1753;:5;1720:128;;;1791:8;1808:3;1800:5;:11;1791:21;;;;;;;:::i;:::-;;;;;1779:6;1786:1;1779:9;;;;;;;;:::i;:::-;;;;;:33;;;;;;;;;;;1836:1;1826:11;;;;;1760:3;;;;:::i;:::-;;;1720:128;;;;1874:1;1865:5;:10;1857:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;1936:6;1922:21;;;1513:437;;;;:::o;9889:890:2:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;5069:1494:1:-;5195:7;5204:12;6119:66;6114:1;6106:10;;:79;6102:161;;;6217:1;6221:30;6201:51;;;;;;6102:161;6357:14;6374:24;6384:4;6390:1;6393;6396;6374:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6357:41;;6430:1;6412:20;;:6;:20;;;6408:101;;6464:1;6468:29;6448:50;;;;;;;6408:101;6527:6;6535:20;6519:37;;;;;5069:1494;;;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:6:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:329::-;900:6;949:2;937:9;928:7;924:23;920:32;917:119;;;955:79;;:::i;:::-;917:119;1075:1;1100:53;1145:7;1136:6;1125:9;1121:22;1100:53;:::i;:::-;1090:63;;1046:117;841:329;;;;:::o;1176:118::-;1263:24;1281:5;1263:24;:::i;:::-;1258:3;1251:37;1176:118;;:::o;1300:222::-;1393:4;1431:2;1420:9;1416:18;1408:26;;1444:71;1512:1;1501:9;1497:17;1488:6;1444:71;:::i;:::-;1300:222;;;;:::o;1528:117::-;1637:1;1634;1627:12;1697:236;1775:5;1816:2;1807:6;1802:3;1798:16;1794:25;1791:112;;;1822:79;;:::i;:::-;1791:112;1921:6;1912:15;;1697:236;;;;:::o;1939:117::-;2048:1;2045;2038:12;2062:117;2171:1;2168;2161:12;2185:117;2294:1;2291;2284:12;2321:552;2378:8;2388:6;2438:3;2431:4;2423:6;2419:17;2415:27;2405:122;;2446:79;;:::i;:::-;2405:122;2559:6;2546:20;2536:30;;2589:18;2581:6;2578:30;2575:117;;;2611:79;;:::i;:::-;2575:117;2725:4;2717:6;2713:17;2701:29;;2779:3;2771:4;2763:6;2759:17;2749:8;2745:32;2742:41;2739:128;;;2786:79;;:::i;:::-;2739:128;2321:552;;;;;:::o;2879:883::-;2999:6;3007;3015;3023;3072:3;3060:9;3051:7;3047:23;3043:33;3040:120;;;3079:79;;:::i;:::-;3040:120;3199:1;3224:85;3301:7;3292:6;3281:9;3277:22;3224:85;:::i;:::-;3214:95;;3170:149;3386:2;3375:9;3371:18;3358:32;3417:18;3409:6;3406:30;3403:117;;;3439:79;;:::i;:::-;3403:117;3552:64;3608:7;3599:6;3588:9;3584:22;3552:64;:::i;:::-;3534:82;;;;3329:297;3665:3;3692:53;3737:7;3728:6;3717:9;3713:22;3692:53;:::i;:::-;3682:63;;3636:119;2879:883;;;;;;;:::o;3768:99::-;3820:6;3854:5;3848:12;3838:22;;3768:99;;;:::o;3873:169::-;3957:11;3991:6;3986:3;3979:19;4031:4;4026:3;4022:14;4007:29;;3873:169;;;;:::o;4048:246::-;4129:1;4139:113;4153:6;4150:1;4147:13;4139:113;;;4238:1;4233:3;4229:11;4223:18;4219:1;4214:3;4210:11;4203:39;4175:2;4172:1;4168:10;4163:15;;4139:113;;;4286:1;4277:6;4272:3;4268:16;4261:27;4110:184;4048:246;;;:::o;4300:102::-;4341:6;4392:2;4388:7;4383:2;4376:5;4372:14;4368:28;4358:38;;4300:102;;;:::o;4408:377::-;4496:3;4524:39;4557:5;4524:39;:::i;:::-;4579:71;4643:6;4638:3;4579:71;:::i;:::-;4572:78;;4659:65;4717:6;4712:3;4705:4;4698:5;4694:16;4659:65;:::i;:::-;4749:29;4771:6;4749:29;:::i;:::-;4744:3;4740:39;4733:46;;4500:285;4408:377;;;;:::o;4791:313::-;4904:4;4942:2;4931:9;4927:18;4919:26;;4991:9;4985:4;4981:20;4977:1;4966:9;4962:17;4955:47;5019:78;5092:4;5083:6;5019:78;:::i;:::-;5011:86;;4791:313;;;;:::o;5110:474::-;5178:6;5186;5235:2;5223:9;5214:7;5210:23;5206:32;5203:119;;;5241:79;;:::i;:::-;5203:119;5361:1;5386:53;5431:7;5422:6;5411:9;5407:22;5386:53;:::i;:::-;5376:63;;5332:117;5488:2;5514:53;5559:7;5550:6;5539:9;5535:22;5514:53;:::i;:::-;5504:63;;5459:118;5110:474;;;;;:::o;5590:108::-;5667:24;5685:5;5667:24;:::i;:::-;5662:3;5655:37;5590:108;;:::o;5704:77::-;5741:7;5770:5;5759:16;;5704:77;;;:::o;5787:108::-;5864:24;5882:5;5864:24;:::i;:::-;5859:3;5852:37;5787:108;;:::o;5989:698::-;6146:4;6141:3;6137:14;6234:4;6227:5;6223:16;6217:23;6253:63;6310:4;6305:3;6301:14;6287:12;6253:63;:::i;:::-;6161:165;6410:4;6403:5;6399:16;6393:23;6429:63;6486:4;6481:3;6477:14;6463:12;6429:63;:::i;:::-;6336:166;6588:4;6581:5;6577:16;6571:23;6607:63;6664:4;6659:3;6655:14;6641:12;6607:63;:::i;:::-;6512:168;6115:572;5989:698;;:::o;6693:544::-;6894:4;6932:3;6921:9;6917:19;6909:27;;6946:131;7074:1;7063:9;7059:17;7050:6;6946:131;:::i;:::-;7124:9;7118:4;7114:20;7109:2;7098:9;7094:18;7087:48;7152:78;7225:4;7216:6;7152:78;:::i;:::-;7144:86;;6693:544;;;;;:::o;7243:118::-;7330:24;7348:5;7330:24;:::i;:::-;7325:3;7318:37;7243:118;;:::o;7367:222::-;7460:4;7498:2;7487:9;7483:18;7475:26;;7511:71;7579:1;7568:9;7564:17;7555:6;7511:71;:::i;:::-;7367:222;;;;:::o;7595:179::-;7735:31;7731:1;7723:6;7719:14;7712:55;7595:179;:::o;7780:366::-;7922:3;7943:67;8007:2;8002:3;7943:67;:::i;:::-;7936:74;;8019:93;8108:3;8019:93;:::i;:::-;8137:2;8132:3;8128:12;8121:19;;7780:366;;;:::o;8152:419::-;8318:4;8356:2;8345:9;8341:18;8333:26;;8405:9;8399:4;8395:20;8391:1;8380:9;8376:17;8369:47;8433:131;8559:4;8433:131;:::i;:::-;8425:139;;8152:419;;;:::o;8577:180::-;8625:77;8622:1;8615:88;8722:4;8719:1;8712:15;8746:4;8743:1;8736:15;8763:180;8811:77;8808:1;8801:88;8908:4;8905:1;8898:15;8932:4;8929:1;8922:15;8949:114;9016:6;9050:5;9044:12;9034:22;;8949:114;;;:::o;9069:184::-;9168:11;9202:6;9197:3;9190:19;9242:4;9237:3;9233:14;9218:29;;9069:184;;;;:::o;9259:132::-;9326:4;9349:3;9341:11;;9379:4;9374:3;9370:14;9362:22;;9259:132;;;:::o;9397:179::-;9466:10;9487:46;9529:3;9521:6;9487:46;:::i;:::-;9565:4;9560:3;9556:14;9542:28;;9397:179;;;;:::o;9582:113::-;9652:4;9684;9679:3;9675:14;9667:22;;9582:113;;;:::o;9731:732::-;9850:3;9879:54;9927:5;9879:54;:::i;:::-;9949:86;10028:6;10023:3;9949:86;:::i;:::-;9942:93;;10059:56;10109:5;10059:56;:::i;:::-;10138:7;10169:1;10154:284;10179:6;10176:1;10173:13;10154:284;;;10255:6;10249:13;10282:63;10341:3;10326:13;10282:63;:::i;:::-;10275:70;;10368:60;10421:6;10368:60;:::i;:::-;10358:70;;10214:224;10201:1;10198;10194:9;10189:14;;10154:284;;;10158:14;10454:3;10447:10;;9855:608;;;9731:732;;;;:::o;10469:98::-;10520:6;10554:5;10548:12;10538:22;;10469:98;;;:::o;10573:168::-;10656:11;10690:6;10685:3;10678:19;10730:4;10725:3;10721:14;10706:29;;10573:168;;;;:::o;10747:373::-;10833:3;10861:38;10893:5;10861:38;:::i;:::-;10915:70;10978:6;10973:3;10915:70;:::i;:::-;10908:77;;10994:65;11052:6;11047:3;11040:4;11033:5;11029:16;10994:65;:::i;:::-;11084:29;11106:6;11084:29;:::i;:::-;11079:3;11075:39;11068:46;;10837:283;10747:373;;;;:::o;11126:1346::-;11511:4;11549:3;11538:9;11534:19;11526:27;;11599:9;11593:4;11589:20;11585:1;11574:9;11570:17;11563:47;11627:108;11730:4;11721:6;11627:108;:::i;:::-;11619:116;;11745:72;11813:2;11802:9;11798:18;11789:6;11745:72;:::i;:::-;11827;11895:2;11884:9;11880:18;11871:6;11827:72;:::i;:::-;11946:9;11940:4;11936:20;11931:2;11920:9;11916:18;11909:48;11974:76;12045:4;12036:6;11974:76;:::i;:::-;11966:84;;12060:73;12128:3;12117:9;12113:19;12104:6;12060:73;:::i;:::-;12143;12211:3;12200:9;12196:19;12187:6;12143:73;:::i;:::-;12226;12294:3;12283:9;12279:19;12270:6;12226:73;:::i;:::-;12309;12377:3;12366:9;12362:19;12353:6;12309:73;:::i;:::-;12392;12460:3;12449:9;12445:19;12436:6;12392:73;:::i;:::-;11126:1346;;;;;;;;;;;;:::o;12478:529::-;12645:4;12683:2;12672:9;12668:18;12660:26;;12696:71;12764:1;12753:9;12749:17;12740:6;12696:71;:::i;:::-;12814:9;12808:4;12804:20;12799:2;12788:9;12784:18;12777:48;12842:76;12913:4;12904:6;12842:76;:::i;:::-;12834:84;;12928:72;12996:2;12985:9;12981:18;12972:6;12928:72;:::i;:::-;12478:529;;;;;;:::o;13013:143::-;13070:5;13101:6;13095:13;13086:22;;13117:33;13144:5;13117:33;:::i;:::-;13013:143;;;;:::o;13162:351::-;13232:6;13281:2;13269:9;13260:7;13256:23;13252:32;13249:119;;;13287:79;;:::i;:::-;13249:119;13407:1;13432:64;13488:7;13479:6;13468:9;13464:22;13432:64;:::i;:::-;13422:74;;13378:128;13162:351;;;;:::o;13519:122::-;13571:5;13596:39;13631:2;13626:3;13622:12;13617:3;13596:39;:::i;:::-;13587:48;;13519:122;;;;:::o;13647:::-;13720:24;13738:5;13720:24;:::i;:::-;13713:5;13710:35;13700:63;;13759:1;13756;13749:12;13700:63;13647:122;:::o;13775:139::-;13821:5;13859:6;13846:20;13837:29;;13875:33;13902:5;13875:33;:::i;:::-;13775:139;;;;:::o;13920:122::-;13972:5;13997:39;14032:2;14027:3;14023:12;14018:3;13997:39;:::i;:::-;13988:48;;13920:122;;;;:::o;14136:781::-;14295:4;14290:3;14286:14;14366:50;14410:4;14403:5;14399:16;14392:5;14366:50;:::i;:::-;14429:63;14486:4;14481:3;14477:14;14463:12;14429:63;:::i;:::-;14310:192;14569:50;14613:4;14606:5;14602:16;14595:5;14569:50;:::i;:::-;14632:63;14689:4;14684:3;14680:14;14666:12;14632:63;:::i;:::-;14512:193;14774:50;14818:4;14811:5;14807:16;14800:5;14774:50;:::i;:::-;14837:63;14894:4;14889:3;14885:14;14871:12;14837:63;:::i;:::-;14715:195;14264:653;14136:781;;:::o;14923:146::-;15020:6;15015:3;15010;14997:30;15061:1;15052:6;15047:3;15043:16;15036:27;14923:146;;;:::o;15097:314::-;15193:3;15214:70;15277:6;15272:3;15214:70;:::i;:::-;15207:77;;15294:56;15343:6;15338:3;15331:5;15294:56;:::i;:::-;15375:29;15397:6;15375:29;:::i;:::-;15370:3;15366:39;15359:46;;15097:314;;;;;:::o;15417:675::-;15656:4;15694:3;15683:9;15679:19;15671:27;;15708:71;15776:1;15765:9;15761:17;15752:6;15708:71;:::i;:::-;15789:134;15919:2;15908:9;15904:18;15895:6;15789:134;:::i;:::-;15971:9;15965:4;15961:20;15955:3;15944:9;15940:19;15933:49;15999:86;16080:4;16071:6;16063;15999:86;:::i;:::-;15991:94;;15417:675;;;;;;;:::o;16098:180::-;16146:77;16143:1;16136:88;16243:4;16240:1;16233:15;16267:4;16264:1;16257:15;16284:320;16328:6;16365:1;16359:4;16355:12;16345:22;;16412:1;16406:4;16402:12;16433:18;16423:81;;16489:4;16481:6;16477:17;16467:27;;16423:81;16551:2;16543:6;16540:14;16520:18;16517:38;16514:84;;16570:18;;:::i;:::-;16514:84;16335:269;16284:320;;;:::o;16610:180::-;16658:77;16655:1;16648:88;16755:4;16752:1;16745:15;16779:4;16776:1;16769:15;16796:194;16836:4;16856:20;16874:1;16856:20;:::i;:::-;16851:25;;16890:20;16908:1;16890:20;:::i;:::-;16885:25;;16934:1;16931;16927:9;16919:17;;16958:1;16952:4;16949:11;16946:37;;;16963:18;;:::i;:::-;16946:37;16796:194;;;;:::o;16996:167::-;17136:19;17132:1;17124:6;17120:14;17113:43;16996:167;:::o;17169:366::-;17311:3;17332:67;17396:2;17391:3;17332:67;:::i;:::-;17325:74;;17408:93;17497:3;17408:93;:::i;:::-;17526:2;17521:3;17517:12;17510:19;;17169:366;;;:::o;17541:419::-;17707:4;17745:2;17734:9;17730:18;17722:26;;17794:9;17788:4;17784:20;17780:1;17769:9;17765:17;17758:47;17822:131;17948:4;17822:131;:::i;:::-;17814:139;;17541:419;;;:::o;17966:168::-;18106:20;18102:1;18094:6;18090:14;18083:44;17966:168;:::o;18140:366::-;18282:3;18303:67;18367:2;18362:3;18303:67;:::i;:::-;18296:74;;18379:93;18468:3;18379:93;:::i;:::-;18497:2;18492:3;18488:12;18481:19;;18140:366;;;:::o;18512:419::-;18678:4;18716:2;18705:9;18701:18;18693:26;;18765:9;18759:4;18755:20;18751:1;18740:9;18736:17;18729:47;18793:131;18919:4;18793:131;:::i;:::-;18785:139;;18512:419;;;:::o;18937:148::-;19039:11;19076:3;19061:18;;18937:148;;;;:::o;19091:141::-;19140:4;19163:3;19155:11;;19186:3;19183:1;19176:14;19220:4;19217:1;19207:18;19199:26;;19091:141;;;:::o;19262:874::-;19365:3;19402:5;19396:12;19431:36;19457:9;19431:36;:::i;:::-;19483:89;19565:6;19560:3;19483:89;:::i;:::-;19476:96;;19603:1;19592:9;19588:17;19619:1;19614:166;;;;19794:1;19789:341;;;;19581:549;;19614:166;19698:4;19694:9;19683;19679:25;19674:3;19667:38;19760:6;19753:14;19746:22;19738:6;19734:35;19729:3;19725:45;19718:52;;19614:166;;19789:341;19856:38;19888:5;19856:38;:::i;:::-;19916:1;19930:154;19944:6;19941:1;19938:13;19930:154;;;20018:7;20012:14;20008:1;20003:3;19999:11;19992:35;20068:1;20059:7;20055:15;20044:26;;19966:4;19963:1;19959:12;19954:17;;19930:154;;;20113:6;20108:3;20104:16;20097:23;;19796:334;;19581:549;;19369:767;;19262:874;;;;:::o;20142:214::-;20282:66;20278:1;20270:6;20266:14;20259:90;20142:214;:::o;20362:400::-;20522:3;20543:84;20625:1;20620:3;20543:84;:::i;:::-;20536:91;;20636:93;20725:3;20636:93;:::i;:::-;20754:1;20749:3;20745:11;20738:18;;20362:400;;;:::o;20768:390::-;20874:3;20902:39;20935:5;20902:39;:::i;:::-;20957:89;21039:6;21034:3;20957:89;:::i;:::-;20950:96;;21055:65;21113:6;21108:3;21101:4;21094:5;21090:16;21055:65;:::i;:::-;21145:6;21140:3;21136:16;21129:23;;20878:280;20768:390;;;;:::o;21164:214::-;21304:66;21300:1;21292:6;21288:14;21281:90;21164:214;:::o;21384:400::-;21544:3;21565:84;21647:1;21642:3;21565:84;:::i;:::-;21558:91;;21658:93;21747:3;21658:93;:::i;:::-;21776:1;21771:3;21767:11;21760:18;;21384:400;;;:::o;21790:214::-;21930:66;21926:1;21918:6;21914:14;21907:90;21790:214;:::o;22010:402::-;22170:3;22191:85;22273:2;22268:3;22191:85;:::i;:::-;22184:92;;22285:93;22374:3;22285:93;:::i;:::-;22403:2;22398:3;22394:12;22387:19;;22010:402;;;:::o;22418:1547::-;22994:3;23016:92;23104:3;23095:6;23016:92;:::i;:::-;23009:99;;23125:148;23269:3;23125:148;:::i;:::-;23118:155;;23290:95;23381:3;23372:6;23290:95;:::i;:::-;23283:102;;23402:148;23546:3;23402:148;:::i;:::-;23395:155;;23567:95;23658:3;23649:6;23567:95;:::i;:::-;23560:102;;23679:148;23823:3;23679:148;:::i;:::-;23672:155;;23844:95;23935:3;23926:6;23844:95;:::i;:::-;23837:102;;23956:3;23949:10;;22418:1547;;;;;;;:::o;23971:117::-;24080:1;24077;24070:12;24094:281;24177:27;24199:4;24177:27;:::i;:::-;24169:6;24165:40;24307:6;24295:10;24292:22;24271:18;24259:10;24256:34;24253:62;24250:88;;;24318:18;;:::i;:::-;24250:88;24358:10;24354:2;24347:22;24137:238;24094:281;;:::o;24381:129::-;24415:6;24442:20;;:::i;:::-;24432:30;;24471:33;24499:4;24491:6;24471:33;:::i;:::-;24381:129;;;:::o;24685:747::-;24764:5;24808:4;24796:9;24791:3;24787:19;24783:30;24780:117;;;24816:79;;:::i;:::-;24780:117;24915:21;24931:4;24915:21;:::i;:::-;24906:30;;24996:1;25036:49;25081:3;25072:6;25061:9;25057:22;25036:49;:::i;:::-;25029:4;25022:5;25018:16;25011:75;24946:151;25158:2;25199:49;25244:3;25235:6;25224:9;25220:22;25199:49;:::i;:::-;25192:4;25185:5;25181:16;25174:75;25107:153;25323:2;25364:49;25409:3;25400:6;25389:9;25385:22;25364:49;:::i;:::-;25357:4;25350:5;25346:16;25339:75;25270:155;24685:747;;;;:::o;25438:389::-;25527:6;25576:2;25564:9;25555:7;25551:23;25547:32;25544:119;;;25582:79;;:::i;:::-;25544:119;25702:1;25727:83;25802:7;25793:6;25782:9;25778:22;25727:83;:::i;:::-;25717:93;;25673:147;25438:389;;;;:::o;25833:180::-;25881:77;25878:1;25871:88;25978:4;25975:1;25968:15;26002:4;25999:1;25992:15;26019:214;26159:66;26155:1;26147:6;26143:14;26136:90;26019:214;:::o;26239:402::-;26399:3;26420:85;26502:2;26497:3;26420:85;:::i;:::-;26413:92;;26514:93;26603:3;26514:93;:::i;:::-;26632:2;26627:3;26623:12;26616:19;;26239:402;;;:::o;26647:147::-;26748:11;26785:3;26770:18;;26647:147;;;;:::o;26800:386::-;26904:3;26932:38;26964:5;26932:38;:::i;:::-;26986:88;27067:6;27062:3;26986:88;:::i;:::-;26979:95;;27083:65;27141:6;27136:3;27129:4;27122:5;27118:16;27083:65;:::i;:::-;27173:6;27168:3;27164:16;27157:23;;26908:278;26800:386;;;;:::o;27192:697::-;27471:3;27493:148;27637:3;27493:148;:::i;:::-;27486:155;;27658:95;27749:3;27740:6;27658:95;:::i;:::-;27651:102;;27770:93;27859:3;27850:6;27770:93;:::i;:::-;27763:100;;27880:3;27873:10;;27192:697;;;;;:::o;27895:180::-;27943:77;27940:1;27933:88;28040:4;28037:1;28030:15;28064:4;28061:1;28054:15;28081:174;28221:26;28217:1;28209:6;28205:14;28198:50;28081:174;:::o;28261:366::-;28403:3;28424:67;28488:2;28483:3;28424:67;:::i;:::-;28417:74;;28500:93;28589:3;28500:93;:::i;:::-;28618:2;28613:3;28609:12;28602:19;;28261:366;;;:::o;28633:419::-;28799:4;28837:2;28826:9;28822:18;28814:26;;28886:9;28880:4;28876:20;28872:1;28861:9;28857:17;28850:47;28914:131;29040:4;28914:131;:::i;:::-;28906:139;;28633:419;;;:::o;29058:181::-;29198:33;29194:1;29186:6;29182:14;29175:57;29058:181;:::o;29245:366::-;29387:3;29408:67;29472:2;29467:3;29408:67;:::i;:::-;29401:74;;29484:93;29573:3;29484:93;:::i;:::-;29602:2;29597:3;29593:12;29586:19;;29245:366;;;:::o;29617:419::-;29783:4;29821:2;29810:9;29806:18;29798:26;;29870:9;29864:4;29860:20;29856:1;29845:9;29841:17;29834:47;29898:131;30024:4;29898:131;:::i;:::-;29890:139;;29617:419;;;:::o;30042:221::-;30182:34;30178:1;30170:6;30166:14;30159:58;30251:4;30246:2;30238:6;30234:15;30227:29;30042:221;:::o;30269:366::-;30411:3;30432:67;30496:2;30491:3;30432:67;:::i;:::-;30425:74;;30508:93;30597:3;30508:93;:::i;:::-;30626:2;30621:3;30617:12;30610:19;;30269:366;;;:::o;30641:419::-;30807:4;30845:2;30834:9;30830:18;30822:26;;30894:9;30888:4;30884:20;30880:1;30869:9;30865:17;30858:47;30922:131;31048:4;30922:131;:::i;:::-;30914:139;;30641:419;;;:::o;31066:410::-;31106:7;31129:20;31147:1;31129:20;:::i;:::-;31124:25;;31163:20;31181:1;31163:20;:::i;:::-;31158:25;;31218:1;31215;31211:9;31240:30;31258:11;31240:30;:::i;:::-;31229:41;;31419:1;31410:7;31406:15;31403:1;31400:22;31380:1;31373:9;31353:83;31330:139;;31449:18;;:::i;:::-;31330:139;31114:362;31066:410;;;;:::o;31482:191::-;31522:3;31541:20;31559:1;31541:20;:::i;:::-;31536:25;;31575:20;31593:1;31575:20;:::i;:::-;31570:25;;31618:1;31615;31611:9;31604:16;;31639:3;31636:1;31633:10;31630:36;;;31646:18;;:::i;:::-;31630:36;31482:191;;;;:::o;31679:171::-;31718:3;31741:24;31759:5;31741:24;:::i;:::-;31732:33;;31787:4;31780:5;31777:15;31774:41;;31795:18;;:::i;:::-;31774:41;31842:1;31835:5;31831:13;31824:20;;31679:171;;;:::o;31856:182::-;31996:34;31992:1;31984:6;31980:14;31973:58;31856:182;:::o;32044:366::-;32186:3;32207:67;32271:2;32266:3;32207:67;:::i;:::-;32200:74;;32283:93;32372:3;32283:93;:::i;:::-;32401:2;32396:3;32392:12;32385:19;;32044:366;;;:::o;32416:419::-;32582:4;32620:2;32609:9;32605:18;32597:26;;32669:9;32663:4;32659:20;32655:1;32644:9;32640:17;32633:47;32697:131;32823:4;32697:131;:::i;:::-;32689:139;;32416:419;;;:::o;32841:77::-;32878:7;32907:5;32896:16;;32841:77;;;:::o;32924:118::-;33011:24;33029:5;33011:24;:::i;:::-;33006:3;32999:37;32924:118;;:::o;33048:86::-;33083:7;33123:4;33116:5;33112:16;33101:27;;33048:86;;;:::o;33140:112::-;33223:22;33239:5;33223:22;:::i;:::-;33218:3;33211:35;33140:112;;:::o;33258:545::-;33431:4;33469:3;33458:9;33454:19;33446:27;;33483:71;33551:1;33540:9;33536:17;33527:6;33483:71;:::i;:::-;33564:68;33628:2;33617:9;33613:18;33604:6;33564:68;:::i;:::-;33642:72;33710:2;33699:9;33695:18;33686:6;33642:72;:::i;:::-;33724;33792:2;33781:9;33777:18;33768:6;33724:72;:::i;:::-;33258:545;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1800000","executionCost":"infinite","totalCost":"infinite"},"external":{"CHAIN_ID()":"infinite","STATEMENT()":"infinite","createSafe((address,address,uint256),bytes,address)":"infinite","createTokenRequest(address,address)":"infinite","lengthOfToken()":"2495","ownerToSafe(address)":"infinite","safeToOwner(address)":"infinite"}},"methodIdentifiers":{"CHAIN_ID()":"85e1f4d0","STATEMENT()":"bebc479c","createSafe((address,address,uint256),bytes,address)":"7a1238a9","createTokenRequest(address,address)":"b6ad16a8","lengthOfToken()":"cb2e6043","ownerToSafe(address)":"5e619a4a","safeToOwner(address)":"06634e88"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gnosisSafeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gnosisSafeProxyFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultFallbackHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setupHandler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATEMENT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenAuthenticated.TokenRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"englishOwnerAdder\",\"type\":\"address\"}],\"name\":\"createSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"}],\"name\":\"createTokenRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenAuthenticated.TokenRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lengthOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safeToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract that allows a user to create a Gnosis Safe wallet by signing an English message.      It sets up a a safe by calling the SafeStetup.sol contract which adds the correct modules and the TokenRequest      device and owner as owners to the safe.\",\"kind\":\"dev\",\"methods\":{\"createSafe((address,address,uint256),bytes,address)\":{\"details\":\"Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.\",\"params\":{\"request\":\"The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.\",\"signature\":\"The signature signed by the owner to verify ownership.\"}}},\"title\":\"WalletDeployer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WalletDeployer.sol\":\"WalletDeployer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/TokenAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title TokenAuthenticated\\n * @dev allow a user to authenticate with a signed english token.\\n */\\ncontract TokenAuthenticated {\\n    string public STATEMENT;\\n\\n    uint256 public lengthOfToken = 15;\\n       \\n    struct TokenRequest {\\n        address owner;\\n        address device;\\n        uint256 issuedAt;\\n    }\\n\\n    constructor(string memory _statement) {\\n        STATEMENT = _statement;\\n    }\\n\\n    function _updateStatement(string memory newStatement) internal {\\n        STATEMENT = newStatement;\\n    }\\n\\n    function _updateLengthOfToken(uint256 newLength) internal {\\n        lengthOfToken = newLength;\\n    }\\n\\n    function authenticate(\\n        TokenRequest calldata request,\\n        bytes calldata signature\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = hashForToken(request);\\n        address signer = ECDSA.recover(msgHash, signature);\\n        require(signer == request.owner, \\\"invalid signature\\\");\\n        require(\\n            request.issuedAt >= block.number - lengthOfToken,\\n            \\\"Request is too old\\\"\\n        );\\n        return true;\\n    }\\n\\n    function createTokenRequest(\\n        address owner,\\n        address device\\n    ) public view returns (TokenRequest memory request, string memory) {\\n        request = TokenRequest({\\n            owner: owner,\\n            device: device,\\n            issuedAt: block.number - 1\\n        });\\n        return (request, stringToSign(request));\\n    }\\n\\n\\n    /**\\n     * @dev Returns the string to sign of the provided WalletCreateRequest.\\n     * @param request The WalletCreateRequest struct containing the owner address, device address, and issuedAt block number.\\n     */\\n    function stringToSign(\\n        TokenRequest memory request\\n    ) internal view returns (string memory) {\\n        return string(abi.encodePacked(\\n            STATEMENT,\\n            \\\"\\\\n\\\\nMe: \\\",\\n            Strings.toHexString(request.owner),\\n            \\\"\\\\nDevice: \\\",\\n            Strings.toHexString(request.device),\\n            \\\"\\\\nIssued at: \\\",\\n            Strings.toString(request.issuedAt)\\n        ));\\n    }\\n\\n    function hashForToken(\\n        TokenRequest calldata request\\n    ) internal view returns (bytes32) {\\n        return ECDSA.toEthSignedMessageHash(bytes(stringToSign(request)));\\n    }\\n}\",\"keccak256\":\"0x46bcf484ada1e1d321fd73afe7060e7e0b3930ba844bc32599fe88b7860715ce\",\"license\":\"MIT\"},\"contracts/WalletDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./TokenAuthenticated.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IProxyFactory {\\n    function createProxyWithNonce(\\n        address _mastercopy,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) external returns (address proxy);\\n}\\n\\ninterface IEnglishOwnerAdder {\\n    function addOwner(\\n        address safe,\\n        TokenAuthenticated.TokenRequest calldata request,\\n        bytes calldata signature\\n    ) external;\\n}\\n\\n/**\\n * @title WalletDeployer\\n * @dev A contract that allows a user to create a Gnosis Safe wallet by signing an English message.\\n *      It sets up a a safe by calling the SafeStetup.sol contract which adds the correct modules and the TokenRequest\\n *      device and owner as owners to the safe.\\n */\\ncontract WalletDeployer is TokenAuthenticated {\\n    string public CHAIN_ID;\\n\\n    address private immutable _gnosisSafeContract;\\n    address private immutable _gnosisSafeProxyFactory;\\n    address private immutable _defaultFallackhandler;\\n\\n    address private immutable _setupHandler;\\n\\n    bytes4 private constant SETUP_DATA = bytes4(keccak256(\\\"setup()\\\"));\\n\\n    // a mapping of owner to safe address\\n    mapping(address => address) public ownerToSafe;\\n    mapping(address => address) public safeToOwner;\\n\\n    constructor(\\n        address gnosisSafeContract,\\n        address gnosisSafeProxyFactory,\\n        address defaultFallbackHandler,\\n        address setupHandler\\n    )\\n        TokenAuthenticated(\\n            \\\"I authorize this device to send transactions on my behalf.\\\"\\n        )\\n    {\\n        CHAIN_ID = Strings.toString(block.chainid);\\n        _gnosisSafeContract = gnosisSafeContract;\\n        _gnosisSafeProxyFactory = gnosisSafeProxyFactory;\\n        _defaultFallackhandler = defaultFallbackHandler;\\n        _setupHandler = setupHandler;\\n    }\\n\\n    // async walletAddressForUser(user:Address):Promise<Address> {\\n    //     const setupData = await setupDataForUser(user)\\n\\n    //     const salt = utils.keccak256(utils.solidityPack(['bytes', 'uint256'], [utils.keccak256(setupData), this.chainId]))\\n    //     const initCode = utils.solidityKeccak256(['bytes', 'bytes'], [await this.proxyFactory.proxyCreationCode(), utils.defaultAbiCoder.encode(['address'], [MASTER_COPY_ADDR])])\\n\\n    //     const addr = utils.getCreate2Address(this.proxyFactory.address, salt, initCode)\\n    //     return addr.toLowerCase()\\n    //   }\\n\\n    /**\\n     * @dev Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.\\n     * @param request The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.\\n     * @param signature The signature signed by the owner to verify ownership.\\n     */\\n    function createSafe(\\n        TokenRequest calldata request,\\n        bytes calldata signature,\\n        address englishOwnerAdder\\n    ) public {\\n        require(\\n            ownerToSafe[request.owner] == address(0),\\n            \\\"Safe already exists for owner\\\"\\n        );\\n        require(authenticate(request, signature));\\n\\n        // // not sure exactly why, but it's important that this array is a memory address[] so that the initializer is encoded properly\\n        // address[] memory owners;\\n        // if (request.device == address(0)) {\\n        //     owners = new address[](1);\\n        //     owners[0] = request.owner;\\n        // } else {\\n        //     owners = new address[](2);\\n        //     owners[0] = request.owner;\\n        //     owners[1] = request.device;\\n        // }\\n\\n        address[] memory owners = new address[](1);\\n        owners[0] = request.owner;\\n\\n        bytes memory initializer = abi.encodeWithSignature(\\n            \\\"setup(address[],uint256,address,bytes,address,address,uint256,address)\\\",\\n            owners, // set the owner and first device addresses\\n            uint256(1), // set the number of required confirmations (threshhold) to 1\\n            _setupHandler, // setupModules address\\n            abi.encodeWithSignature(\\\"setup()\\\"), // setupModules data\\n            _defaultFallackhandler, // set the default fallback handler\\n            address(0), // set the payment token address\\n            address(0), // set the payment token address\\n            uint256(0), // set the payment amount to 0\\n            address(0) // set the payment fee receiver address\\n        );\\n\\n        address proxyAddr = IProxyFactory(_gnosisSafeProxyFactory)\\n            .createProxyWithNonce(\\n                _gnosisSafeContract,\\n                initializer,\\n                block.chainid\\n            );\\n\\n        if (request.device != address(0)) {\\n            IEnglishOwnerAdder(englishOwnerAdder).addOwner(\\n                proxyAddr,\\n                request,\\n                signature\\n            );\\n        }\\n\\n        ownerToSafe[request.owner] = proxyAddr;\\n        safeToOwner[proxyAddr] = request.owner;\\n    }\\n}\\n\\n// async walletAddressForUser(user:Address):Promise<Address> {\\n//     const setupData = await setupDataForUser(user)\\n\\n//     const salt = utils.keccak256(utils.solidityPack(['bytes', 'uint256'], [utils.keccak256(setupData), this.chainId]))\\n//     const initCode = utils.solidityKeccak256(['bytes', 'bytes'], [await this.proxyFactory.proxyCreationCode(), utils.defaultAbiCoder.encode(['address'], [MASTER_COPY_ADDR])])\\n\\n//     const addr = utils.getCreate2Address(this.proxyFactory.address, salt, initCode)\\n//     return addr.toLowerCase()\\n//   }\\n\",\"keccak256\":\"0x5c8858873f4f8f3dbc24afc1f12d0e99c688ddd33c1980db251dcd7ed9b80d38\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity ^0.8.19;\\n\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\\ninterface GnosisSafe {\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    function addOwnerWithThreshold(address owner, uint256 threshold) external;\\n    function removeOwner(address prevOwner, address owner, uint256 threshold) external;\\n\\n    function getThreshold() external view returns (uint256);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function enableModule(address module) external;\\n}\\n\",\"keccak256\":\"0x6d5d793890962a6c0a2811940a21425aeb03b72a70f398367d2ff3d260f0ae4c\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1407,"contract":"contracts/WalletDeployer.sol:WalletDeployer","label":"STATEMENT","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1410,"contract":"contracts/WalletDeployer.sol:WalletDeployer","label":"lengthOfToken","offset":0,"slot":"1","type":"t_uint256"},{"astId":1611,"contract":"contracts/WalletDeployer.sol:WalletDeployer","label":"CHAIN_ID","offset":0,"slot":"2","type":"t_string_storage"},{"astId":1631,"contract":"contracts/WalletDeployer.sol:WalletDeployer","label":"ownerToSafe","offset":0,"slot":"3","type":"t_mapping(t_address,t_address)"},{"astId":1635,"contract":"contracts/WalletDeployer.sol:WalletDeployer","label":"safeToOwner","offset":0,"slot":"4","type":"t_mapping(t_address,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IGnosisSafe.sol":{"Enum":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212205254468989b836faaf77dedac6a635042648d2f5153b455be74c980f7a3934cb64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE SLOAD CHAINID DUP10 DUP10 0xB8 CALLDATASIZE STATICCALL 0xAF PUSH24 0xDEDAC6A635042648D2F5153B455BE74C980F7A3934CB6473 PUSH16 0x6C634300081300330000000000000000 ","sourceMap":"26:79:5:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea26469706673582212205254468989b836faaf77dedac6a635042648d2f5153b455be74c980f7a3934cb64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE SLOAD CHAINID DUP10 DUP10 0xB8 CALLDATASIZE STATICCALL 0xAF PUSH24 0xDEDAC6A635042648D2F5153B455BE74C980F7A3934CB6473 PUSH16 0x6C634300081300330000000000000000 ","sourceMap":"26:79:5:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IGnosisSafe.sol\":\"Enum\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity ^0.8.19;\\n\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\\ninterface GnosisSafe {\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    function addOwnerWithThreshold(address owner, uint256 threshold) external;\\n    function removeOwner(address prevOwner, address owner, uint256 threshold) external;\\n\\n    function getThreshold() external view returns (uint256);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function enableModule(address module) external;\\n}\\n\",\"keccak256\":\"0x6d5d793890962a6c0a2811940a21425aeb03b72a70f398367d2ff3d260f0ae4c\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"GnosisSafe":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"threshold","type":"uint256"}],"name":"addOwnerWithThreshold","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"module","type":"address"}],"name":"enableModule","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"enum Enum.Operation","name":"operation","type":"uint8"}],"name":"execTransactionFromModule","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getOwners","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getThreshold","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"prevOwner","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"threshold","type":"uint256"}],"name":"removeOwner","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"execTransactionFromModule(address,uint256,bytes,uint8)":{"details":"Allows a Module to execute a Safe transaction without any further confirmations.","params":{"data":"Data payload of module transaction.","operation":"Operation type of module transaction.","to":"Destination address of module transaction.","value":"Ether value of module transaction."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addOwnerWithThreshold(address,uint256)":"0d582f13","enableModule(address)":"610b5925","execTransactionFromModule(address,uint256,bytes,uint8)":"468721a7","getOwners()":"a0e67e2b","getThreshold()":"e75235b8","isOwner(address)":"2f54bf6e","removeOwner(address,address,uint256)":"f8dc5dd9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"addOwnerWithThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Allows a Module to execute a Safe transaction without any further confirmations.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IGnosisSafe.sol\":\"GnosisSafe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity ^0.8.19;\\n\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\\ninterface GnosisSafe {\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    function addOwnerWithThreshold(address owner, uint256 threshold) external;\\n    function removeOwner(address prevOwner, address owner, uint256 threshold) external;\\n\\n    function getThreshold() external view returns (uint256);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function enableModule(address module) external;\\n}\\n\",\"keccak256\":\"0x6d5d793890962a6c0a2811940a21425aeb03b72a70f398367d2ff3d260f0ae4c\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}